(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{161:function(module,exports,__webpack_require__){eval('module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== \'undefined\' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: \'Module\' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, \'__esModule\', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === \'object\' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, \'default\', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != \'string\') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module[\'default\']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, \'a\', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = "/dist/";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 78);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n"use strict";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === \'function\'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = \'data-v-\' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== \'undefined\') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn\'t\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n/***/ }),\n\n/***/ 10:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(31);\n\n/***/ }),\n\n/***/ 11:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(52);\n\n/***/ }),\n\n/***/ 12:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(53);\n\n/***/ }),\n\n/***/ 15:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(32);\n\n/***/ }),\n\n/***/ 16:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(33);\n\n/***/ }),\n\n/***/ 17:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(22);\n\n/***/ }),\n\n/***/ 19:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(55);\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(16);\n\n/***/ }),\n\n/***/ 21:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(23);\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(3);\n\n/***/ }),\n\n/***/ 37:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(60);\n\n/***/ }),\n\n/***/ 4:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(7);\n\n/***/ }),\n\n/***/ 40:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(38);\n\n/***/ }),\n\n/***/ 5:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(20);\n\n/***/ }),\n\n/***/ 50:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(91);\n\n/***/ }),\n\n/***/ 6:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(30);\n\n/***/ }),\n\n/***/ 78:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n"use strict";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/cascader/src/cascader.vue?vue&type=template&id=032537a6&\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    "div",\n    {\n      directives: [\n        {\n          name: "clickoutside",\n          rawName: "v-clickoutside",\n          value: function() {\n            return _vm.toggleDropDownVisible(false)\n          },\n          expression: "() => toggleDropDownVisible(false)"\n        }\n      ],\n      ref: "reference",\n      class: [\n        "el-cascader",\n        _vm.realSize && "el-cascader--" + _vm.realSize,\n        { "is-disabled": _vm.isDisabled }\n      ],\n      on: {\n        mouseenter: function($event) {\n          _vm.inputHover = true\n        },\n        mouseleave: function($event) {\n          _vm.inputHover = false\n        },\n        click: function() {\n          return _vm.toggleDropDownVisible(_vm.readonly ? undefined : true)\n        },\n        keydown: _vm.handleKeyDown\n      }\n    },\n    [\n      _c(\n        "el-input",\n        {\n          ref: "input",\n          class: { "is-focus": _vm.dropDownVisible },\n          attrs: {\n            size: _vm.realSize,\n            placeholder: _vm.placeholder,\n            readonly: _vm.readonly,\n            disabled: _vm.isDisabled,\n            "validate-event": false\n          },\n          on: {\n            focus: _vm.handleFocus,\n            blur: _vm.handleBlur,\n            input: _vm.handleInput\n          },\n          model: {\n            value: _vm.multiple ? _vm.presentText : _vm.inputValue,\n            callback: function($$v) {\n              _vm.multiple ? _vm.presentText : (_vm.inputValue = $$v)\n            },\n            expression: "multiple ? presentText : inputValue"\n          }\n        },\n        [\n          _c("template", { slot: "suffix" }, [\n            _vm.clearBtnVisible\n              ? _c("i", {\n                  key: "clear",\n                  staticClass: "el-input__icon el-icon-circle-close",\n                  on: {\n                    click: function($event) {\n                      $event.stopPropagation()\n                      return _vm.handleClear($event)\n                    }\n                  }\n                })\n              : _c("i", {\n                  key: "arrow-down",\n                  class: [\n                    "el-input__icon",\n                    "el-icon-arrow-down",\n                    _vm.dropDownVisible && "is-reverse"\n                  ],\n                  on: {\n                    click: function($event) {\n                      $event.stopPropagation()\n                      _vm.toggleDropDownVisible()\n                    }\n                  }\n                })\n          ])\n        ],\n        2\n      ),\n      _vm.multiple\n        ? _c(\n            "div",\n            { staticClass: "el-cascader__tags" },\n            [\n              _vm._l(_vm.presentTags, function(tag) {\n                return _c(\n                  "el-tag",\n                  {\n                    key: tag.key,\n                    attrs: {\n                      type: "info",\n                      size: _vm.tagSize,\n                      hit: tag.hitState,\n                      closable: tag.closable,\n                      "disable-transitions": ""\n                    },\n                    on: {\n                      close: function($event) {\n                        _vm.deleteTag(tag)\n                      }\n                    }\n                  },\n                  [_c("span", [_vm._v(_vm._s(tag.text))])]\n                )\n              }),\n              _vm.filterable && !_vm.isDisabled\n                ? _c("input", {\n                    directives: [\n                      {\n                        name: "model",\n                        rawName: "v-model.trim",\n                        value: _vm.inputValue,\n                        expression: "inputValue",\n                        modifiers: { trim: true }\n                      }\n                    ],\n                    staticClass: "el-cascader__search-input",\n                    attrs: {\n                      type: "text",\n                      placeholder: _vm.presentTags.length ? "" : _vm.placeholder\n                    },\n                    domProps: { value: _vm.inputValue },\n                    on: {\n                      input: [\n                        function($event) {\n                          if ($event.target.composing) {\n                            return\n                          }\n                          _vm.inputValue = $event.target.value.trim()\n                        },\n                        function(e) {\n                          return _vm.handleInput(_vm.inputValue, e)\n                        }\n                      ],\n                      click: function($event) {\n                        $event.stopPropagation()\n                        _vm.toggleDropDownVisible(true)\n                      },\n                      keydown: function($event) {\n                        if (\n                          !("button" in $event) &&\n                          _vm._k(\n                            $event.keyCode,\n                            "delete",\n                            [8, 46],\n                            $event.key,\n                            ["Backspace", "Delete", "Del"]\n                          )\n                        ) {\n                          return null\n                        }\n                        return _vm.handleDelete($event)\n                      },\n                      blur: function($event) {\n                        _vm.$forceUpdate()\n                      }\n                    }\n                  })\n                : _vm._e()\n            ],\n            2\n          )\n        : _vm._e(),\n      _c(\n        "transition",\n        {\n          attrs: { name: "el-zoom-in-top" },\n          on: { "after-leave": _vm.handleDropdownLeave }\n        },\n        [\n          _c(\n            "div",\n            {\n              directives: [\n                {\n                  name: "show",\n                  rawName: "v-show",\n                  value: _vm.dropDownVisible,\n                  expression: "dropDownVisible"\n                }\n              ],\n              ref: "popper",\n              class: ["el-popper", "el-cascader__dropdown", _vm.popperClass]\n            },\n            [\n              _c("el-cascader-panel", {\n                directives: [\n                  {\n                    name: "show",\n                    rawName: "v-show",\n                    value: !_vm.filtering,\n                    expression: "!filtering"\n                  }\n                ],\n                ref: "panel",\n                attrs: {\n                  options: _vm.options,\n                  props: _vm.config,\n                  border: false,\n                  "render-label": _vm.$scopedSlots.default\n                },\n                on: {\n                  "expand-change": _vm.handleExpandChange,\n                  close: function($event) {\n                    _vm.toggleDropDownVisible(false)\n                  }\n                },\n                model: {\n                  value: _vm.checkedValue,\n                  callback: function($$v) {\n                    _vm.checkedValue = $$v\n                  },\n                  expression: "checkedValue"\n                }\n              }),\n              _vm.filterable\n                ? _c(\n                    "el-scrollbar",\n                    {\n                      directives: [\n                        {\n                          name: "show",\n                          rawName: "v-show",\n                          value: _vm.filtering,\n                          expression: "filtering"\n                        }\n                      ],\n                      ref: "suggestionPanel",\n                      staticClass: "el-cascader__suggestion-panel",\n                      attrs: {\n                        tag: "ul",\n                        "view-class": "el-cascader__suggestion-list"\n                      },\n                      nativeOn: {\n                        keydown: function($event) {\n                          return _vm.handleSuggestionKeyDown($event)\n                        }\n                      }\n                    },\n                    [\n                      _vm.suggestions.length\n                        ? _vm._l(_vm.suggestions, function(item, index) {\n                            return _c(\n                              "li",\n                              {\n                                key: item.uid,\n                                class: [\n                                  "el-cascader__suggestion-item",\n                                  item.checked && "is-checked"\n                                ],\n                                attrs: { tabindex: -1 },\n                                on: {\n                                  click: function($event) {\n                                    _vm.handleSuggestionClick(index)\n                                  }\n                                }\n                              },\n                              [\n                                _c("span", [_vm._v(_vm._s(item.text))]),\n                                item.checked\n                                  ? _c("i", { staticClass: "el-icon-check" })\n                                  : _vm._e()\n                              ]\n                            )\n                          })\n                        : _vm._t("empty", [\n                            _c(\n                              "li",\n                              { staticClass: "el-cascader__empty-text" },\n                              [_vm._v(_vm._s(_vm.t("el.cascader.noMatch")))]\n                            )\n                          ])\n                    ],\n                    2\n                  )\n                : _vm._e()\n            ],\n            1\n          )\n        ]\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/cascader/src/cascader.vue?vue&type=template&id=032537a6&\n\n// EXTERNAL MODULE: external "element-ui/lib/utils/vue-popper"\nvar vue_popper_ = __webpack_require__(5);\nvar vue_popper_default = /*#__PURE__*/__webpack_require__.n(vue_popper_);\n\n// EXTERNAL MODULE: external "element-ui/lib/utils/clickoutside"\nvar clickoutside_ = __webpack_require__(12);\nvar clickoutside_default = /*#__PURE__*/__webpack_require__.n(clickoutside_);\n\n// EXTERNAL MODULE: external "element-ui/lib/mixins/emitter"\nvar emitter_ = __webpack_require__(4);\nvar emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_);\n\n// EXTERNAL MODULE: external "element-ui/lib/mixins/locale"\nvar locale_ = __webpack_require__(6);\nvar locale_default = /*#__PURE__*/__webpack_require__.n(locale_);\n\n// EXTERNAL MODULE: external "element-ui/lib/mixins/migrating"\nvar migrating_ = __webpack_require__(11);\nvar migrating_default = /*#__PURE__*/__webpack_require__.n(migrating_);\n\n// EXTERNAL MODULE: external "element-ui/lib/input"\nvar input_ = __webpack_require__(10);\nvar input_default = /*#__PURE__*/__webpack_require__.n(input_);\n\n// EXTERNAL MODULE: external "element-ui/lib/tag"\nvar tag_ = __webpack_require__(37);\nvar tag_default = /*#__PURE__*/__webpack_require__.n(tag_);\n\n// EXTERNAL MODULE: external "element-ui/lib/scrollbar"\nvar scrollbar_ = __webpack_require__(15);\nvar scrollbar_default = /*#__PURE__*/__webpack_require__.n(scrollbar_);\n\n// EXTERNAL MODULE: external "element-ui/lib/cascader-panel"\nvar cascader_panel_ = __webpack_require__(50);\nvar cascader_panel_default = /*#__PURE__*/__webpack_require__.n(cascader_panel_);\n\n// EXTERNAL MODULE: external "element-ui/lib/utils/aria-utils"\nvar aria_utils_ = __webpack_require__(40);\nvar aria_utils_default = /*#__PURE__*/__webpack_require__.n(aria_utils_);\n\n// EXTERNAL MODULE: external "element-ui/lib/locale"\nvar lib_locale_ = __webpack_require__(20);\n\n// EXTERNAL MODULE: external "element-ui/lib/utils/util"\nvar util_ = __webpack_require__(3);\n\n// EXTERNAL MODULE: external "element-ui/lib/utils/types"\nvar types_ = __webpack_require__(19);\n\n// EXTERNAL MODULE: external "element-ui/lib/utils/shared"\nvar shared_ = __webpack_require__(21);\n\n// EXTERNAL MODULE: external "element-ui/lib/utils/resize-event"\nvar resize_event_ = __webpack_require__(16);\n\n// EXTERNAL MODULE: external "throttle-debounce/debounce"\nvar debounce_ = __webpack_require__(17);\nvar debounce_default = /*#__PURE__*/__webpack_require__.n(debounce_);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/cascader/src/cascader.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar KeyCode = aria_utils_default.a.keys;\n\nvar MigratingProps = {\n  expandTrigger: {\n    newProp: \'expandTrigger\',\n    type: String\n  },\n  changeOnSelect: {\n    newProp: \'checkStrictly\',\n    type: Boolean\n  },\n  hoverThreshold: {\n    newProp: \'hoverThreshold\',\n    type: Number\n  }\n};\n\nvar PopperMixin = {\n  props: {\n    placement: {\n      type: String,\n      default: \'bottom-start\'\n    },\n    appendToBody: vue_popper_default.a.props.appendToBody,\n    visibleArrow: {\n      type: Boolean,\n      default: true\n    },\n    arrowOffset: vue_popper_default.a.props.arrowOffset,\n    offset: vue_popper_default.a.props.offset,\n    boundariesPadding: vue_popper_default.a.props.boundariesPadding,\n    popperOptions: vue_popper_default.a.props.popperOptions\n  },\n  methods: vue_popper_default.a.methods,\n  data: vue_popper_default.a.data,\n  beforeDestroy: vue_popper_default.a.beforeDestroy\n};\n\nvar InputSizeMap = {\n  medium: 36,\n  small: 32,\n  mini: 28\n};\n\n/* harmony default export */ var cascadervue_type_script_lang_js_ = ({\n  name: \'ElCascader\',\n\n  directives: { Clickoutside: clickoutside_default.a },\n\n  mixins: [PopperMixin, emitter_default.a, locale_default.a, migrating_default.a],\n\n  inject: {\n    elForm: {\n      default: \'\'\n    },\n    elFormItem: {\n      default: \'\'\n    }\n  },\n\n  components: {\n    ElInput: input_default.a,\n    ElTag: tag_default.a,\n    ElScrollbar: scrollbar_default.a,\n    ElCascaderPanel: cascader_panel_default.a\n  },\n\n  props: {\n    value: {},\n    options: Array,\n    props: Object,\n    size: String,\n    placeholder: {\n      type: String,\n      default: function _default() {\n        return Object(lib_locale_["t"])(\'el.cascader.placeholder\');\n      }\n    },\n    disabled: Boolean,\n    clearable: Boolean,\n    filterable: Boolean,\n    filterMethod: Function,\n    separator: {\n      type: String,\n      default: \' / \'\n    },\n    showAllLevels: {\n      type: Boolean,\n      default: true\n    },\n    collapseTags: Boolean,\n    debounce: {\n      type: Number,\n      default: 300\n    },\n    beforeFilter: {\n      type: Function,\n      default: function _default() {\n        return function () {};\n      }\n    },\n    popperClass: String\n  },\n\n  data: function data() {\n    return {\n      dropDownVisible: false,\n      checkedValue: this.value || null,\n      inputHover: false,\n      inputValue: null,\n      presentText: null,\n      presentTags: [],\n      checkedNodes: [],\n      filtering: false,\n      suggestions: [],\n      inputInitialHeight: 0,\n      pressDeleteCount: 0\n    };\n  },\n\n\n  computed: {\n    realSize: function realSize() {\n      var _elFormItemSize = (this.elFormItem || {}).elFormItemSize;\n      return this.size || _elFormItemSize || (this.$ELEMENT || {}).size;\n    },\n    tagSize: function tagSize() {\n      return [\'small\', \'mini\'].indexOf(this.realSize) > -1 ? \'mini\' : \'small\';\n    },\n    isDisabled: function isDisabled() {\n      return this.disabled || (this.elForm || {}).disabled;\n    },\n    config: function config() {\n      var config = this.props || {};\n      var $attrs = this.$attrs;\n\n\n      Object.keys(MigratingProps).forEach(function (oldProp) {\n        var _MigratingProps$oldPr = MigratingProps[oldProp],\n            newProp = _MigratingProps$oldPr.newProp,\n            type = _MigratingProps$oldPr.type;\n\n        var oldValue = $attrs[oldProp] || $attrs[Object(util_["kebabCase"])(oldProp)];\n        if (Object(shared_["isDef"])(oldProp) && !Object(shared_["isDef"])(config[newProp])) {\n          if (type === Boolean && oldValue === \'\') {\n            oldValue = true;\n          }\n          config[newProp] = oldValue;\n        }\n      });\n\n      return config;\n    },\n    multiple: function multiple() {\n      return this.config.multiple;\n    },\n    leafOnly: function leafOnly() {\n      return !this.config.checkStrictly;\n    },\n    readonly: function readonly() {\n      return !this.filterable || this.multiple;\n    },\n    clearBtnVisible: function clearBtnVisible() {\n      if (!this.clearable || this.isDisabled || this.filtering || !this.inputHover) {\n        return false;\n      }\n\n      return this.multiple ? !!this.checkedNodes.filter(function (node) {\n        return !node.isDisabled;\n      }).length : !!this.presentText;\n    },\n    panel: function panel() {\n      return this.$refs.panel;\n    }\n  },\n\n  watch: {\n    disabled: function disabled() {\n      this.computePresentContent();\n    },\n    value: function value(val) {\n      if (!Object(util_["isEqual"])(val, this.checkedValue)) {\n        this.checkedValue = val;\n        this.computePresentContent();\n      }\n    },\n    checkedValue: function checkedValue(val) {\n      var value = this.value,\n          dropDownVisible = this.dropDownVisible;\n      var _config = this.config,\n          checkStrictly = _config.checkStrictly,\n          multiple = _config.multiple;\n\n\n      if (!Object(util_["isEqual"])(val, value) || Object(types_["isUndefined"])(value)) {\n        this.computePresentContent();\n        // hide dropdown when single mode\n        if (!multiple && !checkStrictly && dropDownVisible) {\n          this.toggleDropDownVisible(false);\n        }\n\n        this.$emit(\'input\', val);\n        this.$emit(\'change\', val);\n        this.dispatch(\'ElFormItem\', \'el.form.change\', [val]);\n      }\n    },\n\n    options: {\n      handler: function handler() {\n        this.$nextTick(this.computePresentContent);\n      },\n      deep: true\n    },\n    presentText: function presentText(val) {\n      this.inputValue = val;\n    },\n    presentTags: function presentTags(val, oldVal) {\n      if (this.multiple && (val.length || oldVal.length)) {\n        this.$nextTick(this.updateStyle);\n      }\n    },\n    filtering: function filtering(val) {\n      this.$nextTick(this.updatePopper);\n    }\n  },\n\n  mounted: function mounted() {\n    var _this = this;\n\n    var input = this.$refs.input;\n\n    if (input && input.$el) {\n      this.inputInitialHeight = input.$el.offsetHeight || InputSizeMap[this.realSize] || 40;\n    }\n\n    if (!Object(util_["isEmpty"])(this.value)) {\n      this.computePresentContent();\n    }\n\n    this.filterHandler = debounce_default()(this.debounce, function () {\n      var inputValue = _this.inputValue;\n\n\n      if (!inputValue) {\n        _this.filtering = false;\n        return;\n      }\n\n      var before = _this.beforeFilter(inputValue);\n      if (before && before.then) {\n        before.then(_this.getSuggestions);\n      } else if (before !== false) {\n        _this.getSuggestions();\n      } else {\n        _this.filtering = false;\n      }\n    });\n\n    Object(resize_event_["addResizeListener"])(this.$el, this.updateStyle);\n  },\n  beforeDestroy: function beforeDestroy() {\n    Object(resize_event_["removeResizeListener"])(this.$el, this.updateStyle);\n  },\n\n\n  methods: {\n    getMigratingConfig: function getMigratingConfig() {\n      return {\n        props: {\n          \'expand-trigger\': \'expand-trigger is removed, use `props.expandTrigger` instead.\',\n          \'change-on-select\': \'change-on-select is removed, use `props.checkStrictly` instead.\',\n          \'hover-threshold\': \'hover-threshold is removed, use `props.hoverThreshold` instead\'\n        },\n        events: {\n          \'active-item-change\': \'active-item-change is renamed to expand-change\'\n        }\n      };\n    },\n    toggleDropDownVisible: function toggleDropDownVisible(visible) {\n      var _this2 = this;\n\n      if (this.isDisabled) return;\n\n      var dropDownVisible = this.dropDownVisible;\n      var input = this.$refs.input;\n\n      visible = Object(shared_["isDef"])(visible) ? visible : !dropDownVisible;\n      if (visible !== dropDownVisible) {\n        this.dropDownVisible = visible;\n        if (visible) {\n          this.$nextTick(function () {\n            _this2.updatePopper();\n            _this2.panel.scrollIntoView();\n          });\n        }\n        input.$refs.input.setAttribute(\'aria-expanded\', visible);\n        this.$emit(\'visible-change\', visible);\n      }\n    },\n    handleDropdownLeave: function handleDropdownLeave() {\n      this.filtering = false;\n      this.inputValue = this.presentText;\n    },\n    handleKeyDown: function handleKeyDown(event) {\n      switch (event.keyCode) {\n        case KeyCode.enter:\n          this.toggleDropDownVisible();\n          break;\n        case KeyCode.down:\n          this.toggleDropDownVisible(true);\n          this.focusFirstNode();\n          event.preventDefault();\n          break;\n        case KeyCode.esc:\n        case KeyCode.tab:\n          this.toggleDropDownVisible(false);\n          break;\n      }\n    },\n    handleFocus: function handleFocus(e) {\n      this.$emit(\'focus\', e);\n    },\n    handleBlur: function handleBlur(e) {\n      this.$emit(\'blur\', e);\n    },\n    handleInput: function handleInput(val, event) {\n      !this.dropDownVisible && this.toggleDropDownVisible(true);\n\n      if (event && event.isComposing) return;\n      if (val) {\n        this.filterHandler();\n      } else {\n        this.filtering = false;\n      }\n    },\n    handleClear: function handleClear() {\n      this.presentText = \'\';\n      this.panel.clearCheckedNodes();\n    },\n    handleExpandChange: function handleExpandChange(value) {\n      this.$nextTick(this.updatePopper.bind(this));\n      this.$emit(\'expand-change\', value);\n      this.$emit(\'active-item-change\', value); // Deprecated\n    },\n    focusFirstNode: function focusFirstNode() {\n      var _this3 = this;\n\n      this.$nextTick(function () {\n        var filtering = _this3.filtering;\n        var _$refs = _this3.$refs,\n            popper = _$refs.popper,\n            suggestionPanel = _$refs.suggestionPanel;\n\n        var firstNode = null;\n\n        if (filtering && suggestionPanel) {\n          firstNode = suggestionPanel.$el.querySelector(\'.el-cascader__suggestion-item\');\n        } else {\n          var firstMenu = popper.querySelector(\'.el-cascader-menu\');\n          firstNode = firstMenu.querySelector(\'.el-cascader-node[tabindex="-1"]\');\n        }\n\n        if (firstNode) {\n          firstNode.focus();\n          !filtering && firstNode.click();\n        }\n      });\n    },\n    computePresentContent: function computePresentContent() {\n      var _this4 = this;\n\n      // nextTick is required, because checked nodes may not change right now\n      this.$nextTick(function () {\n        if (_this4.config.multiple) {\n          _this4.computePresentTags();\n          _this4.presentText = _this4.presentTags.length ? \' \' : null;\n        } else {\n          _this4.computePresentText();\n        }\n      });\n    },\n    computePresentText: function computePresentText() {\n      var checkedValue = this.checkedValue,\n          config = this.config;\n\n      if (!Object(util_["isEmpty"])(checkedValue)) {\n        var node = this.panel.getNodeByValue(checkedValue);\n        if (node && (config.checkStrictly || node.isLeaf)) {\n          this.presentText = node.getText(this.showAllLevels, this.separator);\n          return;\n        }\n      }\n      this.presentText = null;\n    },\n    computePresentTags: function computePresentTags() {\n      var isDisabled = this.isDisabled,\n          leafOnly = this.leafOnly,\n          showAllLevels = this.showAllLevels,\n          separator = this.separator,\n          collapseTags = this.collapseTags;\n\n      var checkedNodes = this.getCheckedNodes(leafOnly);\n      var tags = [];\n\n      var genTag = function genTag(node) {\n        return {\n          node: node,\n          key: node.uid,\n          text: node.getText(showAllLevels, separator),\n          hitState: false,\n          closable: !isDisabled && !node.isDisabled\n        };\n      };\n\n      if (checkedNodes.length) {\n        var first = checkedNodes[0],\n            rest = checkedNodes.slice(1);\n\n        var restCount = rest.length;\n        tags.push(genTag(first));\n\n        if (restCount) {\n          if (collapseTags) {\n            tags.push({\n              key: -1,\n              text: \'+ \' + restCount,\n              closable: false\n            });\n          } else {\n            rest.forEach(function (node) {\n              return tags.push(genTag(node));\n            });\n          }\n        }\n      }\n\n      this.checkedNodes = checkedNodes;\n      this.presentTags = tags;\n    },\n    getSuggestions: function getSuggestions() {\n      var _this5 = this;\n\n      var filterMethod = this.filterMethod;\n\n\n      if (!Object(types_["isFunction"])(filterMethod)) {\n        filterMethod = function filterMethod(node, keyword) {\n          return node.text.includes(keyword);\n        };\n      }\n\n      var suggestions = this.panel.getFlattedNodes(this.leafOnly).filter(function (node) {\n        if (node.isDisabled) return false;\n        node.text = node.getText(_this5.showAllLevels, _this5.separator) || \'\';\n        return filterMethod(node, _this5.inputValue);\n      });\n\n      if (this.multiple) {\n        this.presentTags.forEach(function (tag) {\n          tag.hitState = false;\n        });\n      } else {\n        suggestions.forEach(function (node) {\n          node.checked = Object(util_["isEqual"])(_this5.checkedValue, node.getValueByOption());\n        });\n      }\n\n      this.filtering = true;\n      this.suggestions = suggestions;\n      this.$nextTick(this.updatePopper);\n    },\n    handleSuggestionKeyDown: function handleSuggestionKeyDown(event) {\n      var keyCode = event.keyCode,\n          target = event.target;\n\n      switch (keyCode) {\n        case KeyCode.enter:\n          target.click();\n          break;\n        case KeyCode.up:\n          var prev = target.previousElementSibling;\n          prev && prev.focus();\n          break;\n        case KeyCode.down:\n          var next = target.nextElementSibling;\n          next && next.focus();\n          break;\n        case KeyCode.esc:\n        case KeyCode.tab:\n          this.toggleDropDownVisible(false);\n          break;\n      }\n    },\n    handleDelete: function handleDelete() {\n      var inputValue = this.inputValue,\n          pressDeleteCount = this.pressDeleteCount,\n          presentTags = this.presentTags;\n\n      var lastIndex = presentTags.length - 1;\n      var lastTag = presentTags[lastIndex];\n      this.pressDeleteCount = inputValue ? 0 : pressDeleteCount + 1;\n\n      if (!lastTag) return;\n\n      if (this.pressDeleteCount) {\n        if (lastTag.hitState) {\n          this.deleteTag(lastTag);\n        } else {\n          lastTag.hitState = true;\n        }\n      }\n    },\n    handleSuggestionClick: function handleSuggestionClick(index) {\n      var multiple = this.multiple;\n\n      var targetNode = this.suggestions[index];\n\n      if (multiple) {\n        var checked = targetNode.checked;\n\n        targetNode.doCheck(!checked);\n        this.panel.calculateMultiCheckedValue();\n      } else {\n        this.checkedValue = targetNode.getValueByOption();\n        this.toggleDropDownVisible(false);\n      }\n    },\n    deleteTag: function deleteTag(tag) {\n      var checkedValue = this.checkedValue;\n\n      var current = tag.node.getValueByOption();\n      var val = checkedValue.find(function (n) {\n        return Object(util_["isEqual"])(n, current);\n      });\n      this.checkedValue = checkedValue.filter(function (n) {\n        return !Object(util_["isEqual"])(n, current);\n      });\n      this.$emit(\'remove-tag\', val);\n    },\n    updateStyle: function updateStyle() {\n      var $el = this.$el,\n          inputInitialHeight = this.inputInitialHeight;\n\n      if (this.$isServer || !$el) return;\n\n      var suggestionPanel = this.$refs.suggestionPanel;\n\n      var inputInner = $el.querySelector(\'.el-input__inner\');\n\n      if (!inputInner) return;\n\n      var tags = $el.querySelector(\'.el-cascader__tags\');\n      var suggestionPanelEl = null;\n\n      if (suggestionPanel && (suggestionPanelEl = suggestionPanel.$el)) {\n        var suggestionList = suggestionPanelEl.querySelector(\'.el-cascader__suggestion-list\');\n        suggestionList.style.minWidth = inputInner.offsetWidth + \'px\';\n      }\n\n      if (tags) {\n        var offsetHeight = tags.offsetHeight;\n\n        var height = Math.max(offsetHeight + 6, inputInitialHeight) + \'px\';\n        inputInner.style.height = height;\n        this.updatePopper();\n      }\n    },\n\n\n    /**\n     * public methods\n    */\n    getCheckedNodes: function getCheckedNodes(leafOnly) {\n      return this.panel.getCheckedNodes(leafOnly);\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/cascader/src/cascader.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_cascadervue_type_script_lang_js_ = (cascadervue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./packages/cascader/src/cascader.vue\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer["a" /* default */])(\n  src_cascadervue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = "packages/cascader/src/cascader.vue"\n/* harmony default export */ var cascader = (component.exports);\n// CONCATENATED MODULE: ./packages/cascader/index.js\n\n\n/* istanbul ignore next */\ncascader.install = function (Vue) {\n  Vue.component(cascader.name, cascader);\n};\n\n/* harmony default export */ var packages_cascader = __webpack_exports__["default"] = (cascader);\n\n/***/ })\n\n/******/ });\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///161\n')}}]);