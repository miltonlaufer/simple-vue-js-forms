(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{"./node_modules/element-ui/lib/tree.js":
/*!*********************************************!*\
  !*** ./node_modules/element-ui/lib/tree.js ***!
  \*********************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval("module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist/\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 58);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n/***/ }),\n\n/***/ 18:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/checkbox */ \"./node_modules/element-ui/lib/checkbox.js\");\n\n/***/ }),\n\n/***/ 2:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/utils/dom */ \"./node_modules/element-ui/lib/utils/dom.js\");\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/locale */ \"./node_modules/element-ui/lib/locale/index.js\");\n\n/***/ }),\n\n/***/ 28:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/transitions/collapse-transition */ \"./node_modules/element-ui/lib/transitions/collapse-transition.js\");\n\n/***/ }),\n\n/***/ 3:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/utils/util */ \"./node_modules/element-ui/lib/utils/util.js\");\n\n/***/ }),\n\n/***/ 4:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/mixins/emitter */ \"./node_modules/element-ui/lib/mixins/emitter.js\");\n\n/***/ }),\n\n/***/ 58:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree/src/tree.vue?vue&type=template&id=547575a6&\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"el-tree\",\n      class: {\n        \"el-tree--highlight-current\": _vm.highlightCurrent,\n        \"is-dragging\": !!_vm.dragState.draggingNode,\n        \"is-drop-not-allow\": !_vm.dragState.allowDrop,\n        \"is-drop-inner\": _vm.dragState.dropType === \"inner\"\n      },\n      attrs: { role: \"tree\" }\n    },\n    [\n      _vm._l(_vm.root.childNodes, function(child) {\n        return _c(\"el-tree-node\", {\n          key: _vm.getNodeKey(child),\n          attrs: {\n            node: child,\n            props: _vm.props,\n            \"render-after-expand\": _vm.renderAfterExpand,\n            \"show-checkbox\": _vm.showCheckbox,\n            \"render-content\": _vm.renderContent\n          },\n          on: { \"node-expand\": _vm.handleNodeExpand }\n        })\n      }),\n      _vm.isEmpty\n        ? _c(\"div\", { staticClass: \"el-tree__empty-block\" }, [\n            _c(\"span\", { staticClass: \"el-tree__empty-text\" }, [\n              _vm._v(_vm._s(_vm.emptyText))\n            ])\n          ])\n        : _vm._e(),\n      _c(\"div\", {\n        directives: [\n          {\n            name: \"show\",\n            rawName: \"v-show\",\n            value: _vm.dragState.showDropIndicator,\n            expression: \"dragState.showDropIndicator\"\n          }\n        ],\n        ref: \"dropIndicator\",\n        staticClass: \"el-tree__drop-indicator\"\n      })\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/tree/src/tree.vue?vue&type=template&id=547575a6&\n\n// EXTERNAL MODULE: external \"element-ui/lib/utils/merge\"\nvar merge_ = __webpack_require__(9);\nvar merge_default = /*#__PURE__*/__webpack_require__.n(merge_);\n\n// CONCATENATED MODULE: ./packages/tree/src/model/util.js\nvar NODE_KEY = '$treeNodeId';\n\nvar markNodeData = function markNodeData(node, data) {\n  if (!data || data[NODE_KEY]) return;\n  Object.defineProperty(data, NODE_KEY, {\n    value: node.id,\n    enumerable: false,\n    configurable: false,\n    writable: false\n  });\n};\n\nvar util_getNodeKey = function getNodeKey(key, data) {\n  if (!key) return data[NODE_KEY];\n  return data[key];\n};\n\nvar findNearestComponent = function findNearestComponent(element, componentName) {\n  var target = element;\n  while (target && target.tagName !== 'BODY') {\n    if (target.__vue__ && target.__vue__.$options.name === componentName) {\n      return target.__vue__;\n    }\n    target = target.parentNode;\n  }\n  return null;\n};\n// EXTERNAL MODULE: external \"element-ui/lib/utils/util\"\nvar util_ = __webpack_require__(3);\n\n// CONCATENATED MODULE: ./packages/tree/src/model/node.js\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\n\n\nvar getChildState = function getChildState(node) {\n  var all = true;\n  var none = true;\n  var allWithoutDisable = true;\n  for (var i = 0, j = node.length; i < j; i++) {\n    var n = node[i];\n    if (n.checked !== true || n.indeterminate) {\n      all = false;\n      if (!n.disabled) {\n        allWithoutDisable = false;\n      }\n    }\n    if (n.checked !== false || n.indeterminate) {\n      none = false;\n    }\n  }\n\n  return { all: all, none: none, allWithoutDisable: allWithoutDisable, half: !all && !none };\n};\n\nvar reInitChecked = function reInitChecked(node) {\n  if (node.childNodes.length === 0) return;\n\n  var _getChildState = getChildState(node.childNodes),\n      all = _getChildState.all,\n      none = _getChildState.none,\n      half = _getChildState.half;\n\n  if (all) {\n    node.checked = true;\n    node.indeterminate = false;\n  } else if (half) {\n    node.checked = false;\n    node.indeterminate = true;\n  } else if (none) {\n    node.checked = false;\n    node.indeterminate = false;\n  }\n\n  var parent = node.parent;\n  if (!parent || parent.level === 0) return;\n\n  if (!node.store.checkStrictly) {\n    reInitChecked(parent);\n  }\n};\n\nvar getPropertyFromData = function getPropertyFromData(node, prop) {\n  var props = node.store.props;\n  var data = node.data || {};\n  var config = props[prop];\n\n  if (typeof config === 'function') {\n    return config(data, node);\n  } else if (typeof config === 'string') {\n    return data[config];\n  } else if (typeof config === 'undefined') {\n    var dataProp = data[prop];\n    return dataProp === undefined ? '' : dataProp;\n  }\n};\n\nvar nodeIdSeed = 0;\n\nvar node_Node = function () {\n  function Node(options) {\n    _classCallCheck(this, Node);\n\n    this.id = nodeIdSeed++;\n    this.text = null;\n    this.checked = false;\n    this.indeterminate = false;\n    this.data = null;\n    this.expanded = false;\n    this.parent = null;\n    this.visible = true;\n    this.isCurrent = false;\n\n    for (var name in options) {\n      if (options.hasOwnProperty(name)) {\n        this[name] = options[name];\n      }\n    }\n\n    // internal\n    this.level = 0;\n    this.loaded = false;\n    this.childNodes = [];\n    this.loading = false;\n\n    if (this.parent) {\n      this.level = this.parent.level + 1;\n    }\n\n    var store = this.store;\n    if (!store) {\n      throw new Error('[Node]store is required!');\n    }\n    store.registerNode(this);\n\n    var props = store.props;\n    if (props && typeof props.isLeaf !== 'undefined') {\n      var isLeaf = getPropertyFromData(this, 'isLeaf');\n      if (typeof isLeaf === 'boolean') {\n        this.isLeafByUser = isLeaf;\n      }\n    }\n\n    if (store.lazy !== true && this.data) {\n      this.setData(this.data);\n\n      if (store.defaultExpandAll) {\n        this.expanded = true;\n      }\n    } else if (this.level > 0 && store.lazy && store.defaultExpandAll) {\n      this.expand();\n    }\n    if (!Array.isArray(this.data)) {\n      markNodeData(this, this.data);\n    }\n    if (!this.data) return;\n    var defaultExpandedKeys = store.defaultExpandedKeys;\n    var key = store.key;\n    if (key && defaultExpandedKeys && defaultExpandedKeys.indexOf(this.key) !== -1) {\n      this.expand(null, store.autoExpandParent);\n    }\n\n    if (key && store.currentNodeKey !== undefined && this.key === store.currentNodeKey) {\n      store.currentNode = this;\n      store.currentNode.isCurrent = true;\n    }\n\n    if (store.lazy) {\n      store._initDefaultCheckedNode(this);\n    }\n\n    this.updateLeafState();\n  }\n\n  Node.prototype.setData = function setData(data) {\n    if (!Array.isArray(data)) {\n      markNodeData(this, data);\n    }\n\n    this.data = data;\n    this.childNodes = [];\n\n    var children = void 0;\n    if (this.level === 0 && this.data instanceof Array) {\n      children = this.data;\n    } else {\n      children = getPropertyFromData(this, 'children') || [];\n    }\n\n    for (var i = 0, j = children.length; i < j; i++) {\n      this.insertChild({ data: children[i] });\n    }\n  };\n\n  Node.prototype.contains = function contains(target) {\n    var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    var walk = function walk(parent) {\n      var children = parent.childNodes || [];\n      var result = false;\n      for (var i = 0, j = children.length; i < j; i++) {\n        var child = children[i];\n        if (child === target || deep && walk(child)) {\n          result = true;\n          break;\n        }\n      }\n      return result;\n    };\n\n    return walk(this);\n  };\n\n  Node.prototype.remove = function remove() {\n    var parent = this.parent;\n    if (parent) {\n      parent.removeChild(this);\n    }\n  };\n\n  Node.prototype.insertChild = function insertChild(child, index, batch) {\n    if (!child) throw new Error('insertChild error: child is required.');\n\n    if (!(child instanceof Node)) {\n      if (!batch) {\n        var children = this.getChildren(true);\n        if (children.indexOf(child.data) === -1) {\n          if (typeof index === 'undefined' || index < 0) {\n            children.push(child.data);\n          } else {\n            children.splice(index, 0, child.data);\n          }\n        }\n      }\n      merge_default()(child, {\n        parent: this,\n        store: this.store\n      });\n      child = new Node(child);\n    }\n\n    child.level = this.level + 1;\n\n    if (typeof index === 'undefined' || index < 0) {\n      this.childNodes.push(child);\n    } else {\n      this.childNodes.splice(index, 0, child);\n    }\n\n    this.updateLeafState();\n  };\n\n  Node.prototype.insertBefore = function insertBefore(child, ref) {\n    var index = void 0;\n    if (ref) {\n      index = this.childNodes.indexOf(ref);\n    }\n    this.insertChild(child, index);\n  };\n\n  Node.prototype.insertAfter = function insertAfter(child, ref) {\n    var index = void 0;\n    if (ref) {\n      index = this.childNodes.indexOf(ref);\n      if (index !== -1) index += 1;\n    }\n    this.insertChild(child, index);\n  };\n\n  Node.prototype.removeChild = function removeChild(child) {\n    var children = this.getChildren() || [];\n    var dataIndex = children.indexOf(child.data);\n    if (dataIndex > -1) {\n      children.splice(dataIndex, 1);\n    }\n\n    var index = this.childNodes.indexOf(child);\n\n    if (index > -1) {\n      this.store && this.store.deregisterNode(child);\n      child.parent = null;\n      this.childNodes.splice(index, 1);\n    }\n\n    this.updateLeafState();\n  };\n\n  Node.prototype.removeChildByData = function removeChildByData(data) {\n    var targetNode = null;\n\n    for (var i = 0; i < this.childNodes.length; i++) {\n      if (this.childNodes[i].data === data) {\n        targetNode = this.childNodes[i];\n        break;\n      }\n    }\n\n    if (targetNode) {\n      this.removeChild(targetNode);\n    }\n  };\n\n  Node.prototype.expand = function expand(callback, expandParent) {\n    var _this = this;\n\n    var done = function done() {\n      if (expandParent) {\n        var parent = _this.parent;\n        while (parent.level > 0) {\n          parent.expanded = true;\n          parent = parent.parent;\n        }\n      }\n      _this.expanded = true;\n      if (callback) callback();\n    };\n\n    if (this.shouldLoadData()) {\n      this.loadData(function (data) {\n        if (data instanceof Array) {\n          if (_this.checked) {\n            _this.setChecked(true, true);\n          } else if (!_this.store.checkStrictly) {\n            reInitChecked(_this);\n          }\n          done();\n        }\n      });\n    } else {\n      done();\n    }\n  };\n\n  Node.prototype.doCreateChildren = function doCreateChildren(array) {\n    var _this2 = this;\n\n    var defaultProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    array.forEach(function (item) {\n      _this2.insertChild(merge_default()({ data: item }, defaultProps), undefined, true);\n    });\n  };\n\n  Node.prototype.collapse = function collapse() {\n    this.expanded = false;\n  };\n\n  Node.prototype.shouldLoadData = function shouldLoadData() {\n    return this.store.lazy === true && this.store.load && !this.loaded;\n  };\n\n  Node.prototype.updateLeafState = function updateLeafState() {\n    if (this.store.lazy === true && this.loaded !== true && typeof this.isLeafByUser !== 'undefined') {\n      this.isLeaf = this.isLeafByUser;\n      return;\n    }\n    var childNodes = this.childNodes;\n    if (!this.store.lazy || this.store.lazy === true && this.loaded === true) {\n      this.isLeaf = !childNodes || childNodes.length === 0;\n      return;\n    }\n    this.isLeaf = false;\n  };\n\n  Node.prototype.setChecked = function setChecked(value, deep, recursion, passValue) {\n    var _this3 = this;\n\n    this.indeterminate = value === 'half';\n    this.checked = value === true;\n\n    if (this.store.checkStrictly) return;\n\n    if (!(this.shouldLoadData() && !this.store.checkDescendants)) {\n      var _getChildState2 = getChildState(this.childNodes),\n          all = _getChildState2.all,\n          allWithoutDisable = _getChildState2.allWithoutDisable;\n\n      if (!this.isLeaf && !all && allWithoutDisable) {\n        this.checked = false;\n        value = false;\n      }\n\n      var handleDescendants = function handleDescendants() {\n        if (deep) {\n          var childNodes = _this3.childNodes;\n          for (var i = 0, j = childNodes.length; i < j; i++) {\n            var child = childNodes[i];\n            passValue = passValue || value !== false;\n            var isCheck = child.disabled ? child.checked : passValue;\n            child.setChecked(isCheck, deep, true, passValue);\n          }\n\n          var _getChildState3 = getChildState(childNodes),\n              half = _getChildState3.half,\n              _all = _getChildState3.all;\n\n          if (!_all) {\n            _this3.checked = _all;\n            _this3.indeterminate = half;\n          }\n        }\n      };\n\n      if (this.shouldLoadData()) {\n        // Only work on lazy load data.\n        this.loadData(function () {\n          handleDescendants();\n          reInitChecked(_this3);\n        }, {\n          checked: value !== false\n        });\n        return;\n      } else {\n        handleDescendants();\n      }\n    }\n\n    var parent = this.parent;\n    if (!parent || parent.level === 0) return;\n\n    if (!recursion) {\n      reInitChecked(parent);\n    }\n  };\n\n  Node.prototype.getChildren = function getChildren() {\n    var forceInit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    // this is data\n    if (this.level === 0) return this.data;\n    var data = this.data;\n    if (!data) return null;\n\n    var props = this.store.props;\n    var children = 'children';\n    if (props) {\n      children = props.children || 'children';\n    }\n\n    if (data[children] === undefined) {\n      data[children] = null;\n    }\n\n    if (forceInit && !data[children]) {\n      data[children] = [];\n    }\n\n    return data[children];\n  };\n\n  Node.prototype.updateChildren = function updateChildren() {\n    var _this4 = this;\n\n    var newData = this.getChildren() || [];\n    var oldData = this.childNodes.map(function (node) {\n      return node.data;\n    });\n\n    var newDataMap = {};\n    var newNodes = [];\n\n    newData.forEach(function (item, index) {\n      var key = item[NODE_KEY];\n      var isNodeExists = !!key && Object(util_[\"arrayFindIndex\"])(oldData, function (data) {\n        return data[NODE_KEY] === key;\n      }) >= 0;\n      if (isNodeExists) {\n        newDataMap[key] = { index: index, data: item };\n      } else {\n        newNodes.push({ index: index, data: item });\n      }\n    });\n\n    if (!this.store.lazy) {\n      oldData.forEach(function (item) {\n        if (!newDataMap[item[NODE_KEY]]) _this4.removeChildByData(item);\n      });\n    }\n\n    newNodes.forEach(function (_ref) {\n      var index = _ref.index,\n          data = _ref.data;\n\n      _this4.insertChild({ data: data }, index);\n    });\n\n    this.updateLeafState();\n  };\n\n  Node.prototype.loadData = function loadData(callback) {\n    var _this5 = this;\n\n    var defaultProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (this.store.lazy === true && this.store.load && !this.loaded && (!this.loading || Object.keys(defaultProps).length)) {\n      this.loading = true;\n\n      var resolve = function resolve(children) {\n        _this5.loaded = true;\n        _this5.loading = false;\n        _this5.childNodes = [];\n\n        _this5.doCreateChildren(children, defaultProps);\n\n        _this5.updateLeafState();\n        if (callback) {\n          callback.call(_this5, children);\n        }\n      };\n\n      this.store.load(this, resolve);\n    } else {\n      if (callback) {\n        callback.call(this);\n      }\n    }\n  };\n\n  _createClass(Node, [{\n    key: 'label',\n    get: function get() {\n      return getPropertyFromData(this, 'label');\n    }\n  }, {\n    key: 'key',\n    get: function get() {\n      var nodeKey = this.store.key;\n      if (this.data) return this.data[nodeKey];\n      return null;\n    }\n  }, {\n    key: 'disabled',\n    get: function get() {\n      return getPropertyFromData(this, 'disabled');\n    }\n  }, {\n    key: 'nextSibling',\n    get: function get() {\n      var parent = this.parent;\n      if (parent) {\n        var index = parent.childNodes.indexOf(this);\n        if (index > -1) {\n          return parent.childNodes[index + 1];\n        }\n      }\n      return null;\n    }\n  }, {\n    key: 'previousSibling',\n    get: function get() {\n      var parent = this.parent;\n      if (parent) {\n        var index = parent.childNodes.indexOf(this);\n        if (index > -1) {\n          return index > 0 ? parent.childNodes[index - 1] : null;\n        }\n      }\n      return null;\n    }\n  }]);\n\n  return Node;\n}();\n\n/* harmony default export */ var model_node = (node_Node);\n// CONCATENATED MODULE: ./packages/tree/src/model/tree-store.js\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction tree_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\n\nvar tree_store_TreeStore = function () {\n  function TreeStore(options) {\n    var _this = this;\n\n    tree_store_classCallCheck(this, TreeStore);\n\n    this.currentNode = null;\n    this.currentNodeKey = null;\n\n    for (var option in options) {\n      if (options.hasOwnProperty(option)) {\n        this[option] = options[option];\n      }\n    }\n\n    this.nodesMap = {};\n\n    this.root = new model_node({\n      data: this.data,\n      store: this\n    });\n\n    if (this.lazy && this.load) {\n      var loadFn = this.load;\n      loadFn(this.root, function (data) {\n        _this.root.doCreateChildren(data);\n        _this._initDefaultCheckedNodes();\n      });\n    } else {\n      this._initDefaultCheckedNodes();\n    }\n  }\n\n  TreeStore.prototype.filter = function filter(value) {\n    var filterNodeMethod = this.filterNodeMethod;\n    var lazy = this.lazy;\n    var traverse = function traverse(node) {\n      var childNodes = node.root ? node.root.childNodes : node.childNodes;\n\n      childNodes.forEach(function (child) {\n        child.visible = filterNodeMethod.call(child, value, child.data, child);\n\n        traverse(child);\n      });\n\n      if (!node.visible && childNodes.length) {\n        var allHidden = true;\n        allHidden = !childNodes.some(function (child) {\n          return child.visible;\n        });\n\n        if (node.root) {\n          node.root.visible = allHidden === false;\n        } else {\n          node.visible = allHidden === false;\n        }\n      }\n      if (!value) return;\n\n      if (node.visible && !node.isLeaf && !lazy) node.expand();\n    };\n\n    traverse(this);\n  };\n\n  TreeStore.prototype.setData = function setData(newVal) {\n    var instanceChanged = newVal !== this.root.data;\n    if (instanceChanged) {\n      this.root.setData(newVal);\n      this._initDefaultCheckedNodes();\n    } else {\n      this.root.updateChildren();\n    }\n  };\n\n  TreeStore.prototype.getNode = function getNode(data) {\n    if (data instanceof model_node) return data;\n    var key = (typeof data === 'undefined' ? 'undefined' : _typeof(data)) !== 'object' ? data : util_getNodeKey(this.key, data);\n    return this.nodesMap[key] || null;\n  };\n\n  TreeStore.prototype.insertBefore = function insertBefore(data, refData) {\n    var refNode = this.getNode(refData);\n    refNode.parent.insertBefore({ data: data }, refNode);\n  };\n\n  TreeStore.prototype.insertAfter = function insertAfter(data, refData) {\n    var refNode = this.getNode(refData);\n    refNode.parent.insertAfter({ data: data }, refNode);\n  };\n\n  TreeStore.prototype.remove = function remove(data) {\n    var node = this.getNode(data);\n\n    if (node && node.parent) {\n      if (node === this.currentNode) {\n        this.currentNode = null;\n      }\n      node.parent.removeChild(node);\n    }\n  };\n\n  TreeStore.prototype.append = function append(data, parentData) {\n    var parentNode = parentData ? this.getNode(parentData) : this.root;\n\n    if (parentNode) {\n      parentNode.insertChild({ data: data });\n    }\n  };\n\n  TreeStore.prototype._initDefaultCheckedNodes = function _initDefaultCheckedNodes() {\n    var _this2 = this;\n\n    var defaultCheckedKeys = this.defaultCheckedKeys || [];\n    var nodesMap = this.nodesMap;\n\n    defaultCheckedKeys.forEach(function (checkedKey) {\n      var node = nodesMap[checkedKey];\n\n      if (node) {\n        node.setChecked(true, !_this2.checkStrictly);\n      }\n    });\n  };\n\n  TreeStore.prototype._initDefaultCheckedNode = function _initDefaultCheckedNode(node) {\n    var defaultCheckedKeys = this.defaultCheckedKeys || [];\n\n    if (defaultCheckedKeys.indexOf(node.key) !== -1) {\n      node.setChecked(true, !this.checkStrictly);\n    }\n  };\n\n  TreeStore.prototype.setDefaultCheckedKey = function setDefaultCheckedKey(newVal) {\n    if (newVal !== this.defaultCheckedKeys) {\n      this.defaultCheckedKeys = newVal;\n      this._initDefaultCheckedNodes();\n    }\n  };\n\n  TreeStore.prototype.registerNode = function registerNode(node) {\n    var key = this.key;\n    if (!key || !node || !node.data) return;\n\n    var nodeKey = node.key;\n    if (nodeKey !== undefined) this.nodesMap[node.key] = node;\n  };\n\n  TreeStore.prototype.deregisterNode = function deregisterNode(node) {\n    var _this3 = this;\n\n    var key = this.key;\n    if (!key || !node || !node.data) return;\n\n    node.childNodes.forEach(function (child) {\n      _this3.deregisterNode(child);\n    });\n\n    delete this.nodesMap[node.key];\n  };\n\n  TreeStore.prototype.getCheckedNodes = function getCheckedNodes() {\n    var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var includeHalfChecked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var checkedNodes = [];\n    var traverse = function traverse(node) {\n      var childNodes = node.root ? node.root.childNodes : node.childNodes;\n\n      childNodes.forEach(function (child) {\n        if ((child.checked || includeHalfChecked && child.indeterminate) && (!leafOnly || leafOnly && child.isLeaf)) {\n          checkedNodes.push(child.data);\n        }\n\n        traverse(child);\n      });\n    };\n\n    traverse(this);\n\n    return checkedNodes;\n  };\n\n  TreeStore.prototype.getCheckedKeys = function getCheckedKeys() {\n    var _this4 = this;\n\n    var leafOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    return this.getCheckedNodes(leafOnly).map(function (data) {\n      return (data || {})[_this4.key];\n    });\n  };\n\n  TreeStore.prototype.getHalfCheckedNodes = function getHalfCheckedNodes() {\n    var nodes = [];\n    var traverse = function traverse(node) {\n      var childNodes = node.root ? node.root.childNodes : node.childNodes;\n\n      childNodes.forEach(function (child) {\n        if (child.indeterminate) {\n          nodes.push(child.data);\n        }\n\n        traverse(child);\n      });\n    };\n\n    traverse(this);\n\n    return nodes;\n  };\n\n  TreeStore.prototype.getHalfCheckedKeys = function getHalfCheckedKeys() {\n    var _this5 = this;\n\n    return this.getHalfCheckedNodes().map(function (data) {\n      return (data || {})[_this5.key];\n    });\n  };\n\n  TreeStore.prototype._getAllNodes = function _getAllNodes() {\n    var allNodes = [];\n    var nodesMap = this.nodesMap;\n    for (var nodeKey in nodesMap) {\n      if (nodesMap.hasOwnProperty(nodeKey)) {\n        allNodes.push(nodesMap[nodeKey]);\n      }\n    }\n\n    return allNodes;\n  };\n\n  TreeStore.prototype.updateChildren = function updateChildren(key, data) {\n    var node = this.nodesMap[key];\n    if (!node) return;\n    var childNodes = node.childNodes;\n    for (var i = childNodes.length - 1; i >= 0; i--) {\n      var child = childNodes[i];\n      this.remove(child.data);\n    }\n    for (var _i = 0, j = data.length; _i < j; _i++) {\n      var _child = data[_i];\n      this.append(_child, node.data);\n    }\n  };\n\n  TreeStore.prototype._setCheckedKeys = function _setCheckedKeys(key) {\n    var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var checkedKeys = arguments[2];\n\n    var allNodes = this._getAllNodes().sort(function (a, b) {\n      return b.level - a.level;\n    });\n    var cache = Object.create(null);\n    var keys = Object.keys(checkedKeys);\n    allNodes.forEach(function (node) {\n      return node.setChecked(false, false);\n    });\n    for (var i = 0, j = allNodes.length; i < j; i++) {\n      var node = allNodes[i];\n      var nodeKey = node.data[key].toString();\n      var checked = keys.indexOf(nodeKey) > -1;\n      if (!checked) {\n        if (node.checked && !cache[nodeKey]) {\n          node.setChecked(false, false);\n        }\n        continue;\n      }\n\n      var parent = node.parent;\n      while (parent && parent.level > 0) {\n        cache[parent.data[key]] = true;\n        parent = parent.parent;\n      }\n\n      if (node.isLeaf || this.checkStrictly) {\n        node.setChecked(true, false);\n        continue;\n      }\n      node.setChecked(true, true);\n\n      if (leafOnly) {\n        (function () {\n          node.setChecked(false, false);\n          var traverse = function traverse(node) {\n            var childNodes = node.childNodes;\n            childNodes.forEach(function (child) {\n              if (!child.isLeaf) {\n                child.setChecked(false, false);\n              }\n              traverse(child);\n            });\n          };\n          traverse(node);\n        })();\n      }\n    }\n  };\n\n  TreeStore.prototype.setCheckedNodes = function setCheckedNodes(array) {\n    var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var key = this.key;\n    var checkedKeys = {};\n    array.forEach(function (item) {\n      checkedKeys[(item || {})[key]] = true;\n    });\n\n    this._setCheckedKeys(key, leafOnly, checkedKeys);\n  };\n\n  TreeStore.prototype.setCheckedKeys = function setCheckedKeys(keys) {\n    var leafOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    this.defaultCheckedKeys = keys;\n    var key = this.key;\n    var checkedKeys = {};\n    keys.forEach(function (key) {\n      checkedKeys[key] = true;\n    });\n\n    this._setCheckedKeys(key, leafOnly, checkedKeys);\n  };\n\n  TreeStore.prototype.setDefaultExpandedKeys = function setDefaultExpandedKeys(keys) {\n    var _this6 = this;\n\n    keys = keys || [];\n    this.defaultExpandedKeys = keys;\n\n    keys.forEach(function (key) {\n      var node = _this6.getNode(key);\n      if (node) node.expand(null, _this6.autoExpandParent);\n    });\n  };\n\n  TreeStore.prototype.setChecked = function setChecked(data, checked, deep) {\n    var node = this.getNode(data);\n\n    if (node) {\n      node.setChecked(!!checked, deep);\n    }\n  };\n\n  TreeStore.prototype.getCurrentNode = function getCurrentNode() {\n    return this.currentNode;\n  };\n\n  TreeStore.prototype.setCurrentNode = function setCurrentNode(currentNode) {\n    var prevCurrentNode = this.currentNode;\n    if (prevCurrentNode) {\n      prevCurrentNode.isCurrent = false;\n    }\n    this.currentNode = currentNode;\n    this.currentNode.isCurrent = true;\n  };\n\n  TreeStore.prototype.setUserCurrentNode = function setUserCurrentNode(node) {\n    var key = node[this.key];\n    var currNode = this.nodesMap[key];\n    this.setCurrentNode(currNode);\n  };\n\n  TreeStore.prototype.setCurrentNodeKey = function setCurrentNodeKey(key) {\n    if (key === null || key === undefined) {\n      this.currentNode && (this.currentNode.isCurrent = false);\n      this.currentNode = null;\n      return;\n    }\n    var node = this.getNode(key);\n    if (node) {\n      this.setCurrentNode(node);\n    }\n  };\n\n  return TreeStore;\n}();\n\n/* harmony default export */ var tree_store = (tree_store_TreeStore);\n;\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree/src/tree-node.vue?vue&type=template&id=3ba3ef0e&\nvar tree_nodevue_type_template_id_3ba3ef0e_render = function() {\n  var this$1 = this\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      directives: [\n        {\n          name: \"show\",\n          rawName: \"v-show\",\n          value: _vm.node.visible,\n          expression: \"node.visible\"\n        }\n      ],\n      ref: \"node\",\n      staticClass: \"el-tree-node\",\n      class: {\n        \"is-expanded\": _vm.expanded,\n        \"is-current\": _vm.node.isCurrent,\n        \"is-hidden\": !_vm.node.visible,\n        \"is-focusable\": !_vm.node.disabled,\n        \"is-checked\": !_vm.node.disabled && _vm.node.checked\n      },\n      attrs: {\n        role: \"treeitem\",\n        tabindex: \"-1\",\n        \"aria-expanded\": _vm.expanded,\n        \"aria-disabled\": _vm.node.disabled,\n        \"aria-checked\": _vm.node.checked,\n        draggable: _vm.tree.draggable\n      },\n      on: {\n        click: function($event) {\n          $event.stopPropagation()\n          return _vm.handleClick($event)\n        },\n        contextmenu: function($event) {\n          return this$1.handleContextMenu($event)\n        },\n        dragstart: function($event) {\n          $event.stopPropagation()\n          return _vm.handleDragStart($event)\n        },\n        dragover: function($event) {\n          $event.stopPropagation()\n          return _vm.handleDragOver($event)\n        },\n        dragend: function($event) {\n          $event.stopPropagation()\n          return _vm.handleDragEnd($event)\n        },\n        drop: function($event) {\n          $event.stopPropagation()\n          return _vm.handleDrop($event)\n        }\n      }\n    },\n    [\n      _c(\n        \"div\",\n        {\n          staticClass: \"el-tree-node__content\",\n          style: {\n            \"padding-left\": (_vm.node.level - 1) * _vm.tree.indent + \"px\"\n          }\n        },\n        [\n          _c(\"span\", {\n            class: [\n              {\n                \"is-leaf\": _vm.node.isLeaf,\n                expanded: !_vm.node.isLeaf && _vm.expanded\n              },\n              \"el-tree-node__expand-icon\",\n              _vm.tree.iconClass ? _vm.tree.iconClass : \"el-icon-caret-right\"\n            ],\n            on: {\n              click: function($event) {\n                $event.stopPropagation()\n                return _vm.handleExpandIconClick($event)\n              }\n            }\n          }),\n          _vm.showCheckbox\n            ? _c(\"el-checkbox\", {\n                attrs: {\n                  indeterminate: _vm.node.indeterminate,\n                  disabled: !!_vm.node.disabled\n                },\n                on: { change: _vm.handleCheckChange },\n                nativeOn: {\n                  click: function($event) {\n                    $event.stopPropagation()\n                  }\n                },\n                model: {\n                  value: _vm.node.checked,\n                  callback: function($$v) {\n                    _vm.$set(_vm.node, \"checked\", $$v)\n                  },\n                  expression: \"node.checked\"\n                }\n              })\n            : _vm._e(),\n          _vm.node.loading\n            ? _c(\"span\", {\n                staticClass: \"el-tree-node__loading-icon el-icon-loading\"\n              })\n            : _vm._e(),\n          _c(\"node-content\", { attrs: { node: _vm.node } })\n        ],\n        1\n      ),\n      _c(\"el-collapse-transition\", [\n        !_vm.renderAfterExpand || _vm.childNodeRendered\n          ? _c(\n              \"div\",\n              {\n                directives: [\n                  {\n                    name: \"show\",\n                    rawName: \"v-show\",\n                    value: _vm.expanded,\n                    expression: \"expanded\"\n                  }\n                ],\n                staticClass: \"el-tree-node__children\",\n                attrs: { role: \"group\", \"aria-expanded\": _vm.expanded }\n              },\n              _vm._l(_vm.node.childNodes, function(child) {\n                return _c(\"el-tree-node\", {\n                  key: _vm.getNodeKey(child),\n                  attrs: {\n                    \"render-content\": _vm.renderContent,\n                    \"render-after-expand\": _vm.renderAfterExpand,\n                    \"show-checkbox\": _vm.showCheckbox,\n                    node: child\n                  },\n                  on: { \"node-expand\": _vm.handleChildNodeExpand }\n                })\n              }),\n              1\n            )\n          : _vm._e()\n      ])\n    ],\n    1\n  )\n}\nvar tree_nodevue_type_template_id_3ba3ef0e_staticRenderFns = []\ntree_nodevue_type_template_id_3ba3ef0e_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/tree/src/tree-node.vue?vue&type=template&id=3ba3ef0e&\n\n// EXTERNAL MODULE: external \"element-ui/lib/transitions/collapse-transition\"\nvar collapse_transition_ = __webpack_require__(28);\nvar collapse_transition_default = /*#__PURE__*/__webpack_require__.n(collapse_transition_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/checkbox\"\nvar checkbox_ = __webpack_require__(18);\nvar checkbox_default = /*#__PURE__*/__webpack_require__.n(checkbox_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/mixins/emitter\"\nvar emitter_ = __webpack_require__(4);\nvar emitter_default = /*#__PURE__*/__webpack_require__.n(emitter_);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree/src/tree-node.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n/* harmony default export */ var tree_nodevue_type_script_lang_js_ = ({\n  name: 'ElTreeNode',\n\n  componentName: 'ElTreeNode',\n\n  mixins: [emitter_default.a],\n\n  props: {\n    node: {\n      default: function _default() {\n        return {};\n      }\n    },\n    props: {},\n    renderContent: Function,\n    renderAfterExpand: {\n      type: Boolean,\n      default: true\n    },\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  components: {\n    ElCollapseTransition: collapse_transition_default.a,\n    ElCheckbox: checkbox_default.a,\n    NodeContent: {\n      props: {\n        node: {\n          required: true\n        }\n      },\n      render: function render(h) {\n        var parent = this.$parent;\n        var tree = parent.tree;\n        var node = this.node;\n        var data = node.data,\n            store = node.store;\n\n        return parent.renderContent ? parent.renderContent.call(parent._renderProxy, h, { _self: tree.$vnode.context, node: node, data: data, store: store }) : tree.$scopedSlots.default ? tree.$scopedSlots.default({ node: node, data: data }) : h(\n          'span',\n          { 'class': 'el-tree-node__label' },\n          [node.label]\n        );\n      }\n    }\n  },\n\n  data: function data() {\n    return {\n      tree: null,\n      expanded: false,\n      childNodeRendered: false,\n      oldChecked: null,\n      oldIndeterminate: null\n    };\n  },\n\n\n  watch: {\n    'node.indeterminate': function nodeIndeterminate(val) {\n      this.handleSelectChange(this.node.checked, val);\n    },\n    'node.checked': function nodeChecked(val) {\n      this.handleSelectChange(val, this.node.indeterminate);\n    },\n    'node.expanded': function nodeExpanded(val) {\n      var _this = this;\n\n      this.$nextTick(function () {\n        return _this.expanded = val;\n      });\n      if (val) {\n        this.childNodeRendered = true;\n      }\n    }\n  },\n\n  methods: {\n    getNodeKey: function getNodeKey(node) {\n      return util_getNodeKey(this.tree.nodeKey, node.data);\n    },\n    handleSelectChange: function handleSelectChange(checked, indeterminate) {\n      if (this.oldChecked !== checked && this.oldIndeterminate !== indeterminate) {\n        this.tree.$emit('check-change', this.node.data, checked, indeterminate);\n      }\n      this.oldChecked = checked;\n      this.indeterminate = indeterminate;\n    },\n    handleClick: function handleClick() {\n      var store = this.tree.store;\n      store.setCurrentNode(this.node);\n      this.tree.$emit('current-change', store.currentNode ? store.currentNode.data : null, store.currentNode);\n      this.tree.currentNode = this;\n      if (this.tree.expandOnClickNode) {\n        this.handleExpandIconClick();\n      }\n      if (this.tree.checkOnClickNode && !this.node.disabled) {\n        this.handleCheckChange(null, {\n          target: { checked: !this.node.checked }\n        });\n      }\n      this.tree.$emit('node-click', this.node.data, this.node, this);\n    },\n    handleContextMenu: function handleContextMenu(event) {\n      if (this.tree._events['node-contextmenu'] && this.tree._events['node-contextmenu'].length > 0) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n      this.tree.$emit('node-contextmenu', event, this.node.data, this.node, this);\n    },\n    handleExpandIconClick: function handleExpandIconClick() {\n      if (this.node.isLeaf) return;\n      if (this.expanded) {\n        this.tree.$emit('node-collapse', this.node.data, this.node, this);\n        this.node.collapse();\n      } else {\n        this.node.expand();\n        this.$emit('node-expand', this.node.data, this.node, this);\n      }\n    },\n    handleCheckChange: function handleCheckChange(value, ev) {\n      var _this2 = this;\n\n      this.node.setChecked(ev.target.checked, !this.tree.checkStrictly);\n      this.$nextTick(function () {\n        var store = _this2.tree.store;\n        _this2.tree.$emit('check', _this2.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys()\n        });\n      });\n    },\n    handleChildNodeExpand: function handleChildNodeExpand(nodeData, node, instance) {\n      this.broadcast('ElTreeNode', 'tree-node-expand', node);\n      this.tree.$emit('node-expand', nodeData, node, instance);\n    },\n    handleDragStart: function handleDragStart(event) {\n      if (!this.tree.draggable) return;\n      this.tree.$emit('tree-node-drag-start', event, this);\n    },\n    handleDragOver: function handleDragOver(event) {\n      if (!this.tree.draggable) return;\n      this.tree.$emit('tree-node-drag-over', event, this);\n      event.preventDefault();\n    },\n    handleDrop: function handleDrop(event) {\n      event.preventDefault();\n    },\n    handleDragEnd: function handleDragEnd(event) {\n      if (!this.tree.draggable) return;\n      this.tree.$emit('tree-node-drag-end', event, this);\n    }\n  },\n\n  created: function created() {\n    var _this3 = this;\n\n    var parent = this.$parent;\n\n    if (parent.isTree) {\n      this.tree = parent;\n    } else {\n      this.tree = parent.tree;\n    }\n\n    var tree = this.tree;\n    if (!tree) {\n      console.warn('Can not find node\\'s tree.');\n    }\n\n    var props = tree.props || {};\n    var childrenKey = props['children'] || 'children';\n\n    this.$watch('node.data.' + childrenKey, function () {\n      _this3.node.updateChildren();\n    });\n\n    if (this.node.expanded) {\n      this.expanded = true;\n      this.childNodeRendered = true;\n    }\n\n    if (this.tree.accordion) {\n      this.$on('tree-node-expand', function (node) {\n        if (_this3.node !== node) {\n          _this3.node.collapse();\n        }\n      });\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/tree/src/tree-node.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_tree_nodevue_type_script_lang_js_ = (tree_nodevue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./packages/tree/src/tree-node.vue\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  src_tree_nodevue_type_script_lang_js_,\n  tree_nodevue_type_template_id_3ba3ef0e_render,\n  tree_nodevue_type_template_id_3ba3ef0e_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"packages/tree/src/tree-node.vue\"\n/* harmony default export */ var tree_node = (component.exports);\n// EXTERNAL MODULE: external \"element-ui/lib/locale\"\nvar locale_ = __webpack_require__(20);\n\n// EXTERNAL MODULE: external \"element-ui/lib/utils/dom\"\nvar dom_ = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/tree/src/tree.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n/* harmony default export */ var treevue_type_script_lang_js_ = ({\n  name: 'ElTree',\n\n  mixins: [emitter_default.a],\n\n  components: {\n    ElTreeNode: tree_node\n  },\n\n  data: function data() {\n    return {\n      store: null,\n      root: null,\n      currentNode: null,\n      treeItems: null,\n      checkboxItems: [],\n      dragState: {\n        showDropIndicator: false,\n        draggingNode: null,\n        dropNode: null,\n        allowDrop: true\n      }\n    };\n  },\n\n\n  props: {\n    data: {\n      type: Array\n    },\n    emptyText: {\n      type: String,\n      default: function _default() {\n        return Object(locale_[\"t\"])('el.tree.emptyText');\n      }\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true\n    },\n    defaultCheckedKeys: Array,\n    defaultExpandedKeys: Array,\n    currentNodeKey: [String, Number],\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    },\n    draggable: {\n      type: Boolean,\n      default: false\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      default: function _default() {\n        return {\n          children: 'children',\n          label: 'label',\n          disabled: 'disabled'\n        };\n      }\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    highlightCurrent: Boolean,\n    load: Function,\n    filterNodeMethod: Function,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18\n    },\n    iconClass: String\n  },\n\n  computed: {\n    children: {\n      set: function set(value) {\n        this.data = value;\n      },\n      get: function get() {\n        return this.data;\n      }\n    },\n\n    treeItemArray: function treeItemArray() {\n      return Array.prototype.slice.call(this.treeItems);\n    },\n    isEmpty: function isEmpty() {\n      var childNodes = this.root.childNodes;\n\n      return !childNodes || childNodes.length === 0 || childNodes.every(function (_ref) {\n        var visible = _ref.visible;\n        return !visible;\n      });\n    }\n  },\n\n  watch: {\n    defaultCheckedKeys: function defaultCheckedKeys(newVal) {\n      this.store.setDefaultCheckedKey(newVal);\n    },\n    defaultExpandedKeys: function defaultExpandedKeys(newVal) {\n      this.store.defaultExpandedKeys = newVal;\n      this.store.setDefaultExpandedKeys(newVal);\n    },\n    data: function data(newVal) {\n      this.store.setData(newVal);\n    },\n    checkboxItems: function checkboxItems(val) {\n      Array.prototype.forEach.call(val, function (checkbox) {\n        checkbox.setAttribute('tabindex', -1);\n      });\n    },\n    checkStrictly: function checkStrictly(newVal) {\n      this.store.checkStrictly = newVal;\n    }\n  },\n\n  methods: {\n    filter: function filter(value) {\n      if (!this.filterNodeMethod) throw new Error('[Tree] filterNodeMethod is required when filter');\n      this.store.filter(value);\n    },\n    getNodeKey: function getNodeKey(node) {\n      return util_getNodeKey(this.nodeKey, node.data);\n    },\n    getNodePath: function getNodePath(data) {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in getNodePath');\n      var node = this.store.getNode(data);\n      if (!node) return [];\n      var path = [node.data];\n      var parent = node.parent;\n      while (parent && parent !== this.root) {\n        path.push(parent.data);\n        parent = parent.parent;\n      }\n      return path.reverse();\n    },\n    getCheckedNodes: function getCheckedNodes(leafOnly, includeHalfChecked) {\n      return this.store.getCheckedNodes(leafOnly, includeHalfChecked);\n    },\n    getCheckedKeys: function getCheckedKeys(leafOnly) {\n      return this.store.getCheckedKeys(leafOnly);\n    },\n    getCurrentNode: function getCurrentNode() {\n      var currentNode = this.store.getCurrentNode();\n      return currentNode ? currentNode.data : null;\n    },\n    getCurrentKey: function getCurrentKey() {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in getCurrentKey');\n      var currentNode = this.getCurrentNode();\n      return currentNode ? currentNode[this.nodeKey] : null;\n    },\n    setCheckedNodes: function setCheckedNodes(nodes, leafOnly) {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setCheckedNodes');\n      this.store.setCheckedNodes(nodes, leafOnly);\n    },\n    setCheckedKeys: function setCheckedKeys(keys, leafOnly) {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setCheckedKeys');\n      this.store.setCheckedKeys(keys, leafOnly);\n    },\n    setChecked: function setChecked(data, checked, deep) {\n      this.store.setChecked(data, checked, deep);\n    },\n    getHalfCheckedNodes: function getHalfCheckedNodes() {\n      return this.store.getHalfCheckedNodes();\n    },\n    getHalfCheckedKeys: function getHalfCheckedKeys() {\n      return this.store.getHalfCheckedKeys();\n    },\n    setCurrentNode: function setCurrentNode(node) {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setCurrentNode');\n      this.store.setUserCurrentNode(node);\n    },\n    setCurrentKey: function setCurrentKey(key) {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in setCurrentKey');\n      this.store.setCurrentNodeKey(key);\n    },\n    getNode: function getNode(data) {\n      return this.store.getNode(data);\n    },\n    remove: function remove(data) {\n      this.store.remove(data);\n    },\n    append: function append(data, parentNode) {\n      this.store.append(data, parentNode);\n    },\n    insertBefore: function insertBefore(data, refNode) {\n      this.store.insertBefore(data, refNode);\n    },\n    insertAfter: function insertAfter(data, refNode) {\n      this.store.insertAfter(data, refNode);\n    },\n    handleNodeExpand: function handleNodeExpand(nodeData, node, instance) {\n      this.broadcast('ElTreeNode', 'tree-node-expand', node);\n      this.$emit('node-expand', nodeData, node, instance);\n    },\n    updateKeyChildren: function updateKeyChildren(key, data) {\n      if (!this.nodeKey) throw new Error('[Tree] nodeKey is required in updateKeyChild');\n      this.store.updateChildren(key, data);\n    },\n    initTabIndex: function initTabIndex() {\n      this.treeItems = this.$el.querySelectorAll('.is-focusable[role=treeitem]');\n      this.checkboxItems = this.$el.querySelectorAll('input[type=checkbox]');\n      var checkedItem = this.$el.querySelectorAll('.is-checked[role=treeitem]');\n      if (checkedItem.length) {\n        checkedItem[0].setAttribute('tabindex', 0);\n        return;\n      }\n      this.treeItems[0] && this.treeItems[0].setAttribute('tabindex', 0);\n    },\n    handleKeydown: function handleKeydown(ev) {\n      var currentItem = ev.target;\n      if (currentItem.className.indexOf('el-tree-node') === -1) return;\n      var keyCode = ev.keyCode;\n      this.treeItems = this.$el.querySelectorAll('.is-focusable[role=treeitem]');\n      var currentIndex = this.treeItemArray.indexOf(currentItem);\n      var nextIndex = void 0;\n      if ([38, 40].indexOf(keyCode) > -1) {\n        // up、down\n        ev.preventDefault();\n        if (keyCode === 38) {\n          // up\n          nextIndex = currentIndex !== 0 ? currentIndex - 1 : 0;\n        } else {\n          nextIndex = currentIndex < this.treeItemArray.length - 1 ? currentIndex + 1 : 0;\n        }\n        this.treeItemArray[nextIndex].focus(); // 选中\n      }\n      if ([37, 39].indexOf(keyCode) > -1) {\n        // left、right 展开\n        ev.preventDefault();\n        currentItem.click(); // 选中\n      }\n      var hasInput = currentItem.querySelector('[type=\"checkbox\"]');\n      if ([13, 32].indexOf(keyCode) > -1 && hasInput) {\n        // space enter选中checkbox\n        ev.preventDefault();\n        hasInput.click();\n      }\n    }\n  },\n\n  created: function created() {\n    var _this = this;\n\n    this.isTree = true;\n\n    this.store = new tree_store({\n      key: this.nodeKey,\n      data: this.data,\n      lazy: this.lazy,\n      props: this.props,\n      load: this.load,\n      currentNodeKey: this.currentNodeKey,\n      checkStrictly: this.checkStrictly,\n      checkDescendants: this.checkDescendants,\n      defaultCheckedKeys: this.defaultCheckedKeys,\n      defaultExpandedKeys: this.defaultExpandedKeys,\n      autoExpandParent: this.autoExpandParent,\n      defaultExpandAll: this.defaultExpandAll,\n      filterNodeMethod: this.filterNodeMethod\n    });\n\n    this.root = this.store.root;\n\n    var dragState = this.dragState;\n    this.$on('tree-node-drag-start', function (event, treeNode) {\n      if (typeof _this.allowDrag === 'function' && !_this.allowDrag(treeNode.node)) {\n        event.preventDefault();\n        return false;\n      }\n      event.dataTransfer.effectAllowed = 'move';\n\n      // wrap in try catch to address IE's error when first param is 'text/plain'\n      try {\n        // setData is required for draggable to work in FireFox\n        // the content has to be '' so dragging a node out of the tree won't open a new tab in FireFox\n        event.dataTransfer.setData('text/plain', '');\n      } catch (e) {}\n      dragState.draggingNode = treeNode;\n      _this.$emit('node-drag-start', treeNode.node, event);\n    });\n\n    this.$on('tree-node-drag-over', function (event, treeNode) {\n      var dropNode = findNearestComponent(event.target, 'ElTreeNode');\n      var oldDropNode = dragState.dropNode;\n      if (oldDropNode && oldDropNode !== dropNode) {\n        Object(dom_[\"removeClass\"])(oldDropNode.$el, 'is-drop-inner');\n      }\n      var draggingNode = dragState.draggingNode;\n      if (!draggingNode || !dropNode) return;\n\n      var dropPrev = true;\n      var dropInner = true;\n      var dropNext = true;\n      var userAllowDropInner = true;\n      if (typeof _this.allowDrop === 'function') {\n        dropPrev = _this.allowDrop(draggingNode.node, dropNode.node, 'prev');\n        userAllowDropInner = dropInner = _this.allowDrop(draggingNode.node, dropNode.node, 'inner');\n        dropNext = _this.allowDrop(draggingNode.node, dropNode.node, 'next');\n      }\n      event.dataTransfer.dropEffect = dropInner ? 'move' : 'none';\n      if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {\n        if (oldDropNode) {\n          _this.$emit('node-drag-leave', draggingNode.node, oldDropNode.node, event);\n        }\n        _this.$emit('node-drag-enter', draggingNode.node, dropNode.node, event);\n      }\n\n      if (dropPrev || dropInner || dropNext) {\n        dragState.dropNode = dropNode;\n      }\n\n      if (dropNode.node.nextSibling === draggingNode.node) {\n        dropNext = false;\n      }\n      if (dropNode.node.previousSibling === draggingNode.node) {\n        dropPrev = false;\n      }\n      if (dropNode.node.contains(draggingNode.node, false)) {\n        dropInner = false;\n      }\n      if (draggingNode.node === dropNode.node || draggingNode.node.contains(dropNode.node)) {\n        dropPrev = false;\n        dropInner = false;\n        dropNext = false;\n      }\n\n      var targetPosition = dropNode.$el.getBoundingClientRect();\n      var treePosition = _this.$el.getBoundingClientRect();\n\n      var dropType = void 0;\n      var prevPercent = dropPrev ? dropInner ? 0.25 : dropNext ? 0.45 : 1 : -1;\n      var nextPercent = dropNext ? dropInner ? 0.75 : dropPrev ? 0.55 : 0 : 1;\n\n      var indicatorTop = -9999;\n      var distance = event.clientY - targetPosition.top;\n      if (distance < targetPosition.height * prevPercent) {\n        dropType = 'before';\n      } else if (distance > targetPosition.height * nextPercent) {\n        dropType = 'after';\n      } else if (dropInner) {\n        dropType = 'inner';\n      } else {\n        dropType = 'none';\n      }\n\n      var iconPosition = dropNode.$el.querySelector('.el-tree-node__expand-icon').getBoundingClientRect();\n      var dropIndicator = _this.$refs.dropIndicator;\n      if (dropType === 'before') {\n        indicatorTop = iconPosition.top - treePosition.top;\n      } else if (dropType === 'after') {\n        indicatorTop = iconPosition.bottom - treePosition.top;\n      }\n      dropIndicator.style.top = indicatorTop + 'px';\n      dropIndicator.style.left = iconPosition.right - treePosition.left + 'px';\n\n      if (dropType === 'inner') {\n        Object(dom_[\"addClass\"])(dropNode.$el, 'is-drop-inner');\n      } else {\n        Object(dom_[\"removeClass\"])(dropNode.$el, 'is-drop-inner');\n      }\n\n      dragState.showDropIndicator = dropType === 'before' || dropType === 'after';\n      dragState.allowDrop = dragState.showDropIndicator || userAllowDropInner;\n      dragState.dropType = dropType;\n      _this.$emit('node-drag-over', draggingNode.node, dropNode.node, event);\n    });\n\n    this.$on('tree-node-drag-end', function (event) {\n      var draggingNode = dragState.draggingNode,\n          dropType = dragState.dropType,\n          dropNode = dragState.dropNode;\n\n      event.preventDefault();\n      event.dataTransfer.dropEffect = 'move';\n\n      if (draggingNode && dropNode) {\n        var draggingNodeCopy = { data: draggingNode.node.data };\n        if (dropType !== 'none') {\n          draggingNode.node.remove();\n        }\n        if (dropType === 'before') {\n          dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node);\n        } else if (dropType === 'after') {\n          dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node);\n        } else if (dropType === 'inner') {\n          dropNode.node.insertChild(draggingNodeCopy);\n        }\n        if (dropType !== 'none') {\n          _this.store.registerNode(draggingNodeCopy);\n        }\n\n        Object(dom_[\"removeClass\"])(dropNode.$el, 'is-drop-inner');\n\n        _this.$emit('node-drag-end', draggingNode.node, dropNode.node, dropType, event);\n        if (dropType !== 'none') {\n          _this.$emit('node-drop', draggingNode.node, dropNode.node, dropType, event);\n        }\n      }\n      if (draggingNode && !dropNode) {\n        _this.$emit('node-drag-end', draggingNode.node, null, dropType, event);\n      }\n\n      dragState.showDropIndicator = false;\n      dragState.draggingNode = null;\n      dragState.dropNode = null;\n      dragState.allowDrop = true;\n    });\n  },\n  mounted: function mounted() {\n    this.initTabIndex();\n    this.$el.addEventListener('keydown', this.handleKeydown);\n  },\n  updated: function updated() {\n    this.treeItems = this.$el.querySelectorAll('[role=treeitem]');\n    this.checkboxItems = this.$el.querySelectorAll('input[type=checkbox]');\n  }\n});\n// CONCATENATED MODULE: ./packages/tree/src/tree.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_treevue_type_script_lang_js_ = (treevue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/tree/src/tree.vue\n\n\n\n\n\n/* normalize component */\n\nvar tree_component = Object(componentNormalizer[\"a\" /* default */])(\n  src_treevue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var tree_api; }\ntree_component.options.__file = \"packages/tree/src/tree.vue\"\n/* harmony default export */ var tree = (tree_component.exports);\n// CONCATENATED MODULE: ./packages/tree/index.js\n\n\n/* istanbul ignore next */\ntree.install = function (Vue) {\n  Vue.component(tree.name, tree);\n};\n\n/* harmony default export */ var packages_tree = __webpack_exports__[\"default\"] = (tree);\n\n/***/ }),\n\n/***/ 9:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/utils/merge */ \"./node_modules/element-ui/lib/utils/merge.js\");\n\n/***/ })\n\n/******/ });\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/element-ui/lib/tree.js\n")}}]);