(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{214:function(module,exports,__webpack_require__){eval("module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist/\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 57);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n/***/ }),\n\n/***/ 11:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(52);\n\n/***/ }),\n\n/***/ 26:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(59);\n\n/***/ }),\n\n/***/ 42:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(84);\n\n/***/ }),\n\n/***/ 57:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-list.vue?vue&type=template&id=173fedf5&\nvar upload_listvue_type_template_id_173fedf5_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"transition-group\",\n    {\n      class: [\n        \"el-upload-list\",\n        \"el-upload-list--\" + _vm.listType,\n        { \"is-disabled\": _vm.disabled }\n      ],\n      attrs: { tag: \"ul\", name: \"el-list\" }\n    },\n    _vm._l(_vm.files, function(file) {\n      return _c(\n        \"li\",\n        {\n          key: file.uid,\n          class: [\n            \"el-upload-list__item\",\n            \"is-\" + file.status,\n            _vm.focusing ? \"focusing\" : \"\"\n          ],\n          attrs: { tabindex: \"0\" },\n          on: {\n            keydown: function($event) {\n              if (\n                !(\"button\" in $event) &&\n                _vm._k($event.keyCode, \"delete\", [8, 46], $event.key, [\n                  \"Backspace\",\n                  \"Delete\",\n                  \"Del\"\n                ])\n              ) {\n                return null\n              }\n              !_vm.disabled && _vm.$emit(\"remove\", file)\n            },\n            focus: function($event) {\n              _vm.focusing = true\n            },\n            blur: function($event) {\n              _vm.focusing = false\n            },\n            click: function($event) {\n              _vm.focusing = false\n            }\n          }\n        },\n        [\n          _vm._t(\n            \"default\",\n            [\n              file.status !== \"uploading\" &&\n              [\"picture-card\", \"picture\"].indexOf(_vm.listType) > -1\n                ? _c(\"img\", {\n                    staticClass: \"el-upload-list__item-thumbnail\",\n                    attrs: { src: file.url, alt: \"\" }\n                  })\n                : _vm._e(),\n              _c(\n                \"a\",\n                {\n                  staticClass: \"el-upload-list__item-name\",\n                  on: {\n                    click: function($event) {\n                      _vm.handleClick(file)\n                    }\n                  }\n                },\n                [\n                  _c(\"i\", { staticClass: \"el-icon-document\" }),\n                  _vm._v(_vm._s(file.name) + \"\\n      \")\n                ]\n              ),\n              _c(\n                \"label\",\n                { staticClass: \"el-upload-list__item-status-label\" },\n                [\n                  _c(\"i\", {\n                    class: {\n                      \"el-icon-upload-success\": true,\n                      \"el-icon-circle-check\": _vm.listType === \"text\",\n                      \"el-icon-check\":\n                        [\"picture-card\", \"picture\"].indexOf(_vm.listType) > -1\n                    }\n                  })\n                ]\n              ),\n              !_vm.disabled\n                ? _c(\"i\", {\n                    staticClass: \"el-icon-close\",\n                    on: {\n                      click: function($event) {\n                        _vm.$emit(\"remove\", file)\n                      }\n                    }\n                  })\n                : _vm._e(),\n              !_vm.disabled\n                ? _c(\"i\", { staticClass: \"el-icon-close-tip\" }, [\n                    _vm._v(_vm._s(_vm.t(\"el.upload.deleteTip\")))\n                  ])\n                : _vm._e(),\n              file.status === \"uploading\"\n                ? _c(\"el-progress\", {\n                    attrs: {\n                      type: _vm.listType === \"picture-card\" ? \"circle\" : \"line\",\n                      \"stroke-width\": _vm.listType === \"picture-card\" ? 6 : 2,\n                      percentage: _vm.parsePercentage(file.percentage)\n                    }\n                  })\n                : _vm._e(),\n              _vm.listType === \"picture-card\"\n                ? _c(\"span\", { staticClass: \"el-upload-list__item-actions\" }, [\n                    _vm.handlePreview && _vm.listType === \"picture-card\"\n                      ? _c(\n                          \"span\",\n                          {\n                            staticClass: \"el-upload-list__item-preview\",\n                            on: {\n                              click: function($event) {\n                                _vm.handlePreview(file)\n                              }\n                            }\n                          },\n                          [_c(\"i\", { staticClass: \"el-icon-zoom-in\" })]\n                        )\n                      : _vm._e(),\n                    !_vm.disabled\n                      ? _c(\n                          \"span\",\n                          {\n                            staticClass: \"el-upload-list__item-delete\",\n                            on: {\n                              click: function($event) {\n                                _vm.$emit(\"remove\", file)\n                              }\n                            }\n                          },\n                          [_c(\"i\", { staticClass: \"el-icon-delete\" })]\n                        )\n                      : _vm._e()\n                  ])\n                : _vm._e()\n            ],\n            { file: file }\n          )\n        ],\n        2\n      )\n    }),\n    0\n  )\n}\nvar staticRenderFns = []\nupload_listvue_type_template_id_173fedf5_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/upload/src/upload-list.vue?vue&type=template&id=173fedf5&\n\n// EXTERNAL MODULE: external \"element-ui/lib/mixins/locale\"\nvar locale_ = __webpack_require__(6);\nvar locale_default = /*#__PURE__*/__webpack_require__.n(locale_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/progress\"\nvar progress_ = __webpack_require__(42);\nvar progress_default = /*#__PURE__*/__webpack_require__.n(progress_);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-list.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* harmony default export */ var upload_listvue_type_script_lang_js_ = ({\n\n  name: 'ElUploadList',\n\n  mixins: [locale_default.a],\n\n  data: function data() {\n    return {\n      focusing: false\n    };\n  },\n\n  components: { ElProgress: progress_default.a },\n\n  props: {\n    files: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    handlePreview: Function,\n    listType: String\n  },\n  methods: {\n    parsePercentage: function parsePercentage(val) {\n      return parseInt(val, 10);\n    },\n    handleClick: function handleClick(file) {\n      this.handlePreview && this.handlePreview(file);\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/upload/src/upload-list.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_upload_listvue_type_script_lang_js_ = (upload_listvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./packages/upload/src/upload-list.vue\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  src_upload_listvue_type_script_lang_js_,\n  upload_listvue_type_template_id_173fedf5_render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"packages/upload/src/upload-list.vue\"\n/* harmony default export */ var upload_list = (component.exports);\n// EXTERNAL MODULE: external \"babel-helper-vue-jsx-merge-props\"\nvar external_babel_helper_vue_jsx_merge_props_ = __webpack_require__(26);\nvar external_babel_helper_vue_jsx_merge_props_default = /*#__PURE__*/__webpack_require__.n(external_babel_helper_vue_jsx_merge_props_);\n\n// CONCATENATED MODULE: ./packages/upload/src/ajax.js\nfunction getError(action, option, xhr) {\n  var msg = void 0;\n  if (xhr.response) {\n    msg = '' + (xhr.response.error || xhr.response);\n  } else if (xhr.responseText) {\n    msg = '' + xhr.responseText;\n  } else {\n    msg = 'fail to post ' + action + ' ' + xhr.status;\n  }\n\n  var err = new Error(msg);\n  err.status = xhr.status;\n  err.method = 'post';\n  err.url = action;\n  return err;\n}\n\nfunction getBody(xhr) {\n  var text = xhr.responseText || xhr.response;\n  if (!text) {\n    return text;\n  }\n\n  try {\n    return JSON.parse(text);\n  } catch (e) {\n    return text;\n  }\n}\n\nfunction upload(option) {\n  if (typeof XMLHttpRequest === 'undefined') {\n    return;\n  }\n\n  var xhr = new XMLHttpRequest();\n  var action = option.action;\n\n  if (xhr.upload) {\n    xhr.upload.onprogress = function progress(e) {\n      if (e.total > 0) {\n        e.percent = e.loaded / e.total * 100;\n      }\n      option.onProgress(e);\n    };\n  }\n\n  var formData = new FormData();\n\n  if (option.data) {\n    Object.keys(option.data).forEach(function (key) {\n      formData.append(key, option.data[key]);\n    });\n  }\n\n  formData.append(option.filename, option.file, option.file.name);\n\n  xhr.onerror = function error(e) {\n    option.onError(e);\n  };\n\n  xhr.onload = function onload() {\n    if (xhr.status < 200 || xhr.status >= 300) {\n      return option.onError(getError(action, option, xhr));\n    }\n\n    option.onSuccess(getBody(xhr));\n  };\n\n  xhr.open('post', action, true);\n\n  if (option.withCredentials && 'withCredentials' in xhr) {\n    xhr.withCredentials = true;\n  }\n\n  var headers = option.headers || {};\n\n  for (var item in headers) {\n    if (headers.hasOwnProperty(item) && headers[item] !== null) {\n      xhr.setRequestHeader(item, headers[item]);\n    }\n  }\n  xhr.send(formData);\n  return xhr;\n}\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-dragger.vue?vue&type=template&id=7ebbf219&\nvar upload_draggervue_type_template_id_7ebbf219_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"el-upload-dragger\",\n      class: {\n        \"is-dragover\": _vm.dragover\n      },\n      on: {\n        drop: function($event) {\n          $event.preventDefault()\n          return _vm.onDrop($event)\n        },\n        dragover: function($event) {\n          $event.preventDefault()\n          return _vm.onDragover($event)\n        },\n        dragleave: function($event) {\n          $event.preventDefault()\n          _vm.dragover = false\n        }\n      }\n    },\n    [_vm._t(\"default\")],\n    2\n  )\n}\nvar upload_draggervue_type_template_id_7ebbf219_staticRenderFns = []\nupload_draggervue_type_template_id_7ebbf219_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/upload/src/upload-dragger.vue?vue&type=template&id=7ebbf219&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload-dragger.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var upload_draggervue_type_script_lang_js_ = ({\n  name: 'ElUploadDrag',\n  props: {\n    disabled: Boolean\n  },\n  inject: {\n    uploader: {\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      dragover: false\n    };\n  },\n\n  methods: {\n    onDragover: function onDragover() {\n      if (!this.disabled) {\n        this.dragover = true;\n      }\n    },\n    onDrop: function onDrop(e) {\n      if (this.disabled || !this.uploader) return;\n      var accept = this.uploader.accept;\n      this.dragover = false;\n      if (!accept) {\n        this.$emit('file', e.dataTransfer.files);\n        return;\n      }\n      this.$emit('file', [].slice.call(e.dataTransfer.files).filter(function (file) {\n        var type = file.type,\n            name = file.name;\n\n        var extension = name.indexOf('.') > -1 ? '.' + name.split('.').pop() : '';\n        var baseType = type.replace(/\\/.*$/, '');\n        return accept.split(',').map(function (type) {\n          return type.trim();\n        }).filter(function (type) {\n          return type;\n        }).some(function (acceptedType) {\n          if (/\\..+$/.test(acceptedType)) {\n            return extension === acceptedType;\n          }\n          if (/\\/\\*$/.test(acceptedType)) {\n            return baseType === acceptedType.replace(/\\/\\*$/, '');\n          }\n          if (/^[^\\/]+\\/[^\\/]+$/.test(acceptedType)) {\n            return type === acceptedType;\n          }\n          return false;\n        });\n      }));\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/upload/src/upload-dragger.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_upload_draggervue_type_script_lang_js_ = (upload_draggervue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/upload/src/upload-dragger.vue\n\n\n\n\n\n/* normalize component */\n\nvar upload_dragger_component = Object(componentNormalizer[\"a\" /* default */])(\n  src_upload_draggervue_type_script_lang_js_,\n  upload_draggervue_type_template_id_7ebbf219_render,\n  upload_draggervue_type_template_id_7ebbf219_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var upload_dragger_api; }\nupload_dragger_component.options.__file = \"packages/upload/src/upload-dragger.vue\"\n/* harmony default export */ var upload_dragger = (upload_dragger_component.exports);\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/upload.vue?vue&type=script&lang=js&\n\n\n\n\n\n/* harmony default export */ var uploadvue_type_script_lang_js_ = ({\n  inject: ['uploader'],\n  components: {\n    UploadDragger: upload_dragger\n  },\n  props: {\n    type: String,\n    action: {\n      type: String,\n      required: true\n    },\n    name: {\n      type: String,\n      default: 'file'\n    },\n    data: Object,\n    headers: Object,\n    withCredentials: Boolean,\n    multiple: Boolean,\n    accept: String,\n    onStart: Function,\n    onProgress: Function,\n    onSuccess: Function,\n    onError: Function,\n    beforeUpload: Function,\n    drag: Boolean,\n    onPreview: {\n      type: Function,\n      default: function _default() {}\n    },\n    onRemove: {\n      type: Function,\n      default: function _default() {}\n    },\n    fileList: Array,\n    autoUpload: Boolean,\n    listType: String,\n    httpRequest: {\n      type: Function,\n      default: upload\n    },\n    disabled: Boolean,\n    limit: Number,\n    onExceed: Function\n  },\n\n  data: function data() {\n    return {\n      mouseover: false,\n      reqs: {}\n    };\n  },\n\n\n  methods: {\n    isImage: function isImage(str) {\n      return str.indexOf('image') !== -1;\n    },\n    handleChange: function handleChange(ev) {\n      var files = ev.target.files;\n\n      if (!files) return;\n      this.uploadFiles(files);\n    },\n    uploadFiles: function uploadFiles(files) {\n      var _this = this;\n\n      if (this.limit && this.fileList.length + files.length > this.limit) {\n        this.onExceed && this.onExceed(files, this.fileList);\n        return;\n      }\n\n      var postFiles = Array.prototype.slice.call(files);\n      if (!this.multiple) {\n        postFiles = postFiles.slice(0, 1);\n      }\n\n      if (postFiles.length === 0) {\n        return;\n      }\n\n      postFiles.forEach(function (rawFile) {\n        _this.onStart(rawFile);\n        if (_this.autoUpload) _this.upload(rawFile);\n      });\n    },\n    upload: function upload(rawFile) {\n      var _this2 = this;\n\n      this.$refs.input.value = null;\n\n      if (!this.beforeUpload) {\n        return this.post(rawFile);\n      }\n\n      var before = this.beforeUpload(rawFile);\n      if (before && before.then) {\n        before.then(function (processedFile) {\n          var fileType = Object.prototype.toString.call(processedFile);\n\n          if (fileType === '[object File]' || fileType === '[object Blob]') {\n            if (fileType === '[object Blob]') {\n              processedFile = new File([processedFile], rawFile.name, {\n                type: rawFile.type\n              });\n            }\n            for (var p in rawFile) {\n              if (rawFile.hasOwnProperty(p)) {\n                processedFile[p] = rawFile[p];\n              }\n            }\n            _this2.post(processedFile);\n          } else {\n            _this2.post(rawFile);\n          }\n        }, function () {\n          _this2.onRemove(null, rawFile);\n        });\n      } else if (before !== false) {\n        this.post(rawFile);\n      } else {\n        this.onRemove(null, rawFile);\n      }\n    },\n    abort: function abort(file) {\n      var reqs = this.reqs;\n\n      if (file) {\n        var uid = file;\n        if (file.uid) uid = file.uid;\n        if (reqs[uid]) {\n          reqs[uid].abort();\n        }\n      } else {\n        Object.keys(reqs).forEach(function (uid) {\n          if (reqs[uid]) reqs[uid].abort();\n          delete reqs[uid];\n        });\n      }\n    },\n    post: function post(rawFile) {\n      var _this3 = this;\n\n      var uid = rawFile.uid;\n\n      var options = {\n        headers: this.headers,\n        withCredentials: this.withCredentials,\n        file: rawFile,\n        data: this.data,\n        filename: this.name,\n        action: this.action,\n        onProgress: function onProgress(e) {\n          _this3.onProgress(e, rawFile);\n        },\n        onSuccess: function onSuccess(res) {\n          _this3.onSuccess(res, rawFile);\n          delete _this3.reqs[uid];\n        },\n        onError: function onError(err) {\n          _this3.onError(err, rawFile);\n          delete _this3.reqs[uid];\n        }\n      };\n      var req = this.httpRequest(options);\n      this.reqs[uid] = req;\n      if (req && req.then) {\n        req.then(options.onSuccess, options.onError);\n      }\n    },\n    handleClick: function handleClick() {\n      if (!this.disabled) {\n        this.$refs.input.value = null;\n        this.$refs.input.click();\n      }\n    },\n    handleKeydown: function handleKeydown(e) {\n      if (e.target !== e.currentTarget) return;\n      if (e.keyCode === 13 || e.keyCode === 32) {\n        this.handleClick();\n      }\n    }\n  },\n\n  render: function render(h) {\n    var handleClick = this.handleClick,\n        drag = this.drag,\n        name = this.name,\n        handleChange = this.handleChange,\n        multiple = this.multiple,\n        accept = this.accept,\n        listType = this.listType,\n        uploadFiles = this.uploadFiles,\n        disabled = this.disabled,\n        handleKeydown = this.handleKeydown;\n\n    var data = {\n      class: {\n        'el-upload': true\n      },\n      on: {\n        click: handleClick,\n        keydown: handleKeydown\n      }\n    };\n    data.class['el-upload--' + listType] = true;\n    return h(\n      'div',\n      external_babel_helper_vue_jsx_merge_props_default()([data, {\n        attrs: { tabindex: '0' }\n      }]),\n      [drag ? h(\n        'upload-dragger',\n        {\n          attrs: { disabled: disabled },\n          on: {\n            'file': uploadFiles\n          }\n        },\n        [this.$slots.default]\n      ) : this.$slots.default, h('input', { 'class': 'el-upload__input', attrs: { type: 'file', name: name, multiple: multiple, accept: accept },\n        ref: 'input', on: {\n          'change': handleChange\n        }\n      })]\n    );\n  }\n});\n// CONCATENATED MODULE: ./packages/upload/src/upload.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_uploadvue_type_script_lang_js_ = (uploadvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/upload/src/upload.vue\nvar upload_render, upload_staticRenderFns\n\n\n\n\n/* normalize component */\n\nvar upload_component = Object(componentNormalizer[\"a\" /* default */])(\n  src_uploadvue_type_script_lang_js_,\n  upload_render,\n  upload_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var upload_api; }\nupload_component.options.__file = \"packages/upload/src/upload.vue\"\n/* harmony default export */ var src_upload = (upload_component.exports);\n// EXTERNAL MODULE: external \"element-ui/lib/mixins/migrating\"\nvar migrating_ = __webpack_require__(11);\nvar migrating_default = /*#__PURE__*/__webpack_require__.n(migrating_);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/upload/src/index.vue?vue&type=script&lang=js&\n\n\n\n\n\n\nfunction noop() {}\n\n/* harmony default export */ var srcvue_type_script_lang_js_ = ({\n  name: 'ElUpload',\n\n  mixins: [migrating_default.a],\n\n  components: {\n    ElProgress: progress_default.a,\n    UploadList: upload_list,\n    Upload: src_upload\n  },\n\n  provide: function provide() {\n    return {\n      uploader: this\n    };\n  },\n\n\n  inject: {\n    elForm: {\n      default: ''\n    }\n  },\n\n  props: {\n    action: {\n      type: String,\n      required: true\n    },\n    headers: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    data: Object,\n    multiple: Boolean,\n    name: {\n      type: String,\n      default: 'file'\n    },\n    drag: Boolean,\n    dragger: Boolean,\n    withCredentials: Boolean,\n    showFileList: {\n      type: Boolean,\n      default: true\n    },\n    accept: String,\n    type: {\n      type: String,\n      default: 'select'\n    },\n    beforeUpload: Function,\n    beforeRemove: Function,\n    onRemove: {\n      type: Function,\n      default: noop\n    },\n    onChange: {\n      type: Function,\n      default: noop\n    },\n    onPreview: {\n      type: Function\n    },\n    onSuccess: {\n      type: Function,\n      default: noop\n    },\n    onProgress: {\n      type: Function,\n      default: noop\n    },\n    onError: {\n      type: Function,\n      default: noop\n    },\n    fileList: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    autoUpload: {\n      type: Boolean,\n      default: true\n    },\n    listType: {\n      type: String,\n      default: 'text' // text,picture,picture-card\n    },\n    httpRequest: Function,\n    disabled: Boolean,\n    limit: Number,\n    onExceed: {\n      type: Function,\n      default: noop\n    }\n  },\n\n  data: function data() {\n    return {\n      uploadFiles: [],\n      dragOver: false,\n      draging: false,\n      tempIndex: 1\n    };\n  },\n\n\n  computed: {\n    uploadDisabled: function uploadDisabled() {\n      return this.disabled || (this.elForm || {}).disabled;\n    }\n  },\n\n  watch: {\n    listType: function listType(type) {\n      if (type === 'picture-card' || type === 'picture') {\n        this.uploadFiles = this.uploadFiles.map(function (file) {\n          if (!file.url && file.raw) {\n            try {\n              file.url = URL.createObjectURL(file.raw);\n            } catch (err) {\n              console.error('[Element Error][Upload]', err);\n            }\n          }\n          return file;\n        });\n      }\n    },\n\n    fileList: {\n      immediate: true,\n      handler: function handler(fileList) {\n        var _this = this;\n\n        this.uploadFiles = fileList.map(function (item) {\n          item.uid = item.uid || Date.now() + _this.tempIndex++;\n          item.status = item.status || 'success';\n          return item;\n        });\n      }\n    }\n  },\n\n  methods: {\n    handleStart: function handleStart(rawFile) {\n      rawFile.uid = Date.now() + this.tempIndex++;\n      var file = {\n        status: 'ready',\n        name: rawFile.name,\n        size: rawFile.size,\n        percentage: 0,\n        uid: rawFile.uid,\n        raw: rawFile\n      };\n\n      if (this.listType === 'picture-card' || this.listType === 'picture') {\n        try {\n          file.url = URL.createObjectURL(rawFile);\n        } catch (err) {\n          console.error('[Element Error][Upload]', err);\n          return;\n        }\n      }\n\n      this.uploadFiles.push(file);\n      this.onChange(file, this.uploadFiles);\n    },\n    handleProgress: function handleProgress(ev, rawFile) {\n      var file = this.getFile(rawFile);\n      this.onProgress(ev, file, this.uploadFiles);\n      file.status = 'uploading';\n      file.percentage = ev.percent || 0;\n    },\n    handleSuccess: function handleSuccess(res, rawFile) {\n      var file = this.getFile(rawFile);\n\n      if (file) {\n        file.status = 'success';\n        file.response = res;\n\n        this.onSuccess(res, file, this.uploadFiles);\n        this.onChange(file, this.uploadFiles);\n      }\n    },\n    handleError: function handleError(err, rawFile) {\n      var file = this.getFile(rawFile);\n      var fileList = this.uploadFiles;\n\n      file.status = 'fail';\n\n      fileList.splice(fileList.indexOf(file), 1);\n\n      this.onError(err, file, this.uploadFiles);\n      this.onChange(file, this.uploadFiles);\n    },\n    handleRemove: function handleRemove(file, raw) {\n      var _this2 = this;\n\n      if (raw) {\n        file = this.getFile(raw);\n      }\n      var doRemove = function doRemove() {\n        _this2.abort(file);\n        var fileList = _this2.uploadFiles;\n        fileList.splice(fileList.indexOf(file), 1);\n        _this2.onRemove(file, fileList);\n      };\n\n      if (!this.beforeRemove) {\n        doRemove();\n      } else if (typeof this.beforeRemove === 'function') {\n        var before = this.beforeRemove(file, this.uploadFiles);\n        if (before && before.then) {\n          before.then(function () {\n            doRemove();\n          }, noop);\n        } else if (before !== false) {\n          doRemove();\n        }\n      }\n    },\n    getFile: function getFile(rawFile) {\n      var fileList = this.uploadFiles;\n      var target = void 0;\n      fileList.every(function (item) {\n        target = rawFile.uid === item.uid ? item : null;\n        return !target;\n      });\n      return target;\n    },\n    abort: function abort(file) {\n      this.$refs['upload-inner'].abort(file);\n    },\n    clearFiles: function clearFiles() {\n      this.uploadFiles = [];\n    },\n    submit: function submit() {\n      var _this3 = this;\n\n      this.uploadFiles.filter(function (file) {\n        return file.status === 'ready';\n      }).forEach(function (file) {\n        _this3.$refs['upload-inner'].upload(file.raw);\n      });\n    },\n    getMigratingConfig: function getMigratingConfig() {\n      return {\n        props: {\n          'default-file-list': 'default-file-list is renamed to file-list.',\n          'show-upload-list': 'show-upload-list is renamed to show-file-list.',\n          'thumbnail-mode': 'thumbnail-mode has been deprecated, you can implement the same effect according to this case: http://element.eleme.io/#/zh-CN/component/upload#yong-hu-tou-xiang-shang-chuan'\n        }\n      };\n    }\n  },\n\n  beforeDestroy: function beforeDestroy() {\n    this.uploadFiles.forEach(function (file) {\n      if (file.url && file.url.indexOf('blob:') === 0) {\n        URL.revokeObjectURL(file.url);\n      }\n    });\n  },\n  render: function render(h) {\n    var _this4 = this;\n\n    var uploadList = void 0;\n\n    if (this.showFileList) {\n      uploadList = h(\n        upload_list,\n        {\n          attrs: {\n            disabled: this.uploadDisabled,\n            listType: this.listType,\n            files: this.uploadFiles,\n\n            handlePreview: this.onPreview },\n          on: {\n            'remove': this.handleRemove\n          }\n        },\n        [function (props) {\n          if (_this4.$scopedSlots.file) {\n            return _this4.$scopedSlots.file({\n              file: props.file\n            });\n          }\n        }]\n      );\n    }\n\n    var uploadData = {\n      props: {\n        type: this.type,\n        drag: this.drag,\n        action: this.action,\n        multiple: this.multiple,\n        'before-upload': this.beforeUpload,\n        'with-credentials': this.withCredentials,\n        headers: this.headers,\n        name: this.name,\n        data: this.data,\n        accept: this.accept,\n        fileList: this.uploadFiles,\n        autoUpload: this.autoUpload,\n        listType: this.listType,\n        disabled: this.uploadDisabled,\n        limit: this.limit,\n        'on-exceed': this.onExceed,\n        'on-start': this.handleStart,\n        'on-progress': this.handleProgress,\n        'on-success': this.handleSuccess,\n        'on-error': this.handleError,\n        'on-preview': this.onPreview,\n        'on-remove': this.handleRemove,\n        'http-request': this.httpRequest\n      },\n      ref: 'upload-inner'\n    };\n\n    var trigger = this.$slots.trigger || this.$slots.default;\n    var uploadComponent = h(\n      'upload',\n      uploadData,\n      [trigger]\n    );\n\n    return h('div', [this.listType === 'picture-card' ? uploadList : '', this.$slots.trigger ? [uploadComponent, this.$slots.default] : uploadComponent, this.$slots.tip, this.listType !== 'picture-card' ? uploadList : '']);\n  }\n});\n// CONCATENATED MODULE: ./packages/upload/src/index.vue?vue&type=script&lang=js&\n /* harmony default export */ var upload_srcvue_type_script_lang_js_ = (srcvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/upload/src/index.vue\nvar src_render, src_staticRenderFns\n\n\n\n\n/* normalize component */\n\nvar src_component = Object(componentNormalizer[\"a\" /* default */])(\n  upload_srcvue_type_script_lang_js_,\n  src_render,\n  src_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var src_api; }\nsrc_component.options.__file = \"packages/upload/src/index.vue\"\n/* harmony default export */ var src = (src_component.exports);\n// CONCATENATED MODULE: ./packages/upload/index.js\n\n\n/* istanbul ignore next */\nsrc.install = function (Vue) {\n  Vue.component(src.name, src);\n};\n\n/* harmony default export */ var packages_upload = __webpack_exports__[\"default\"] = (src);\n\n/***/ }),\n\n/***/ 6:\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(30);\n\n/***/ })\n\n/******/ });\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///214\n")}}]);