(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{"./node_modules/element-ui/lib/table.js":
/*!**********************************************!*\
  !*** ./node_modules/element-ui/lib/table.js ***!
  \**********************************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval("module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/dist/\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 56);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n\n\n/***/ }),\n/* 1 */,\n/* 2 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/utils/dom */ \"./node_modules/element-ui/lib/utils/dom.js\");\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/utils/util */ \"./node_modules/element-ui/lib/utils/util.js\");\n\n/***/ }),\n/* 4 */,\n/* 5 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/utils/vue-popper */ \"./node_modules/element-ui/lib/utils/vue-popper.js\");\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/mixins/locale */ \"./node_modules/element-ui/lib/mixins/locale.js\");\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm.js\");\n\n/***/ }),\n/* 8 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return getCell; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return orderBy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return getColumnById; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return getColumnByKey; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return getColumnByCell; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return getRowIdentity; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return getKeysMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return mergeOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return parseWidth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return parseMinWidth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return parseHeight; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return compose; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return toggleRowStatus; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return walkTreeNode; });\n/* harmony import */ var element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);\n/* harmony import */ var element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0__);\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n\n\nvar getCell = function getCell(event) {\n  var cell = event.target;\n\n  while (cell && cell.tagName.toUpperCase() !== 'HTML') {\n    if (cell.tagName.toUpperCase() === 'TD') {\n      return cell;\n    }\n    cell = cell.parentNode;\n  }\n\n  return null;\n};\n\nvar isObject = function isObject(obj) {\n  return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';\n};\n\nvar orderBy = function orderBy(array, sortKey, reverse, sortMethod, sortBy) {\n  if (!sortKey && !sortMethod && (!sortBy || Array.isArray(sortBy) && !sortBy.length)) {\n    return array;\n  }\n  if (typeof reverse === 'string') {\n    reverse = reverse === 'descending' ? -1 : 1;\n  } else {\n    reverse = reverse && reverse < 0 ? -1 : 1;\n  }\n  var getKey = sortMethod ? null : function (value, index) {\n    if (sortBy) {\n      if (!Array.isArray(sortBy)) {\n        sortBy = [sortBy];\n      }\n      return sortBy.map(function (by) {\n        if (typeof by === 'string') {\n          return Object(element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0__[\"getValueByPath\"])(value, by);\n        } else {\n          return by(value, index, array);\n        }\n      });\n    }\n    if (sortKey !== '$key') {\n      if (isObject(value) && '$value' in value) value = value.$value;\n    }\n    return [isObject(value) ? Object(element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_0__[\"getValueByPath\"])(value, sortKey) : value];\n  };\n  var compare = function compare(a, b) {\n    if (sortMethod) {\n      return sortMethod(a.value, b.value);\n    }\n    for (var i = 0, len = a.key.length; i < len; i++) {\n      if (a.key[i] < b.key[i]) {\n        return -1;\n      }\n      if (a.key[i] > b.key[i]) {\n        return 1;\n      }\n    }\n    return 0;\n  };\n  return array.map(function (value, index) {\n    return {\n      value: value,\n      index: index,\n      key: getKey ? getKey(value, index) : null\n    };\n  }).sort(function (a, b) {\n    var order = compare(a, b);\n    if (!order) {\n      // make stable https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n      order = a.index - b.index;\n    }\n    return order * reverse;\n  }).map(function (item) {\n    return item.value;\n  });\n};\n\nvar getColumnById = function getColumnById(table, columnId) {\n  var column = null;\n  table.columns.forEach(function (item) {\n    if (item.id === columnId) {\n      column = item;\n    }\n  });\n  return column;\n};\n\nvar getColumnByKey = function getColumnByKey(table, columnKey) {\n  var column = null;\n  for (var i = 0; i < table.columns.length; i++) {\n    var item = table.columns[i];\n    if (item.columnKey === columnKey) {\n      column = item;\n      break;\n    }\n  }\n  return column;\n};\n\nvar getColumnByCell = function getColumnByCell(table, cell) {\n  var matches = (cell.className || '').match(/el-table_[^\\s]+/gm);\n  if (matches) {\n    return getColumnById(table, matches[0]);\n  }\n  return null;\n};\n\nvar getRowIdentity = function getRowIdentity(row, rowKey) {\n  if (!row) throw new Error('row is required when get row identity');\n  if (typeof rowKey === 'string') {\n    if (rowKey.indexOf('.') < 0) {\n      return row[rowKey];\n    }\n    var key = rowKey.split('.');\n    var current = row;\n    for (var i = 0; i < key.length; i++) {\n      current = current[key[i]];\n    }\n    return current;\n  } else if (typeof rowKey === 'function') {\n    return rowKey.call(null, row);\n  }\n};\n\nvar getKeysMap = function getKeysMap(array, rowKey) {\n  var arrayMap = {};\n  (array || []).forEach(function (row, index) {\n    arrayMap[getRowIdentity(row, rowKey)] = { row: row, index: index };\n  });\n  return arrayMap;\n};\n\nfunction hasOwn(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction mergeOptions(defaults, config) {\n  var options = {};\n  var key = void 0;\n  for (key in defaults) {\n    options[key] = defaults[key];\n  }\n  for (key in config) {\n    if (hasOwn(config, key)) {\n      var value = config[key];\n      if (typeof value !== 'undefined') {\n        options[key] = value;\n      }\n    }\n  }\n  return options;\n}\n\nfunction parseWidth(width) {\n  if (width !== undefined) {\n    width = parseInt(width, 10);\n    if (isNaN(width)) {\n      width = null;\n    }\n  }\n  return width;\n}\n\nfunction parseMinWidth(minWidth) {\n  if (typeof minWidth !== 'undefined') {\n    minWidth = parseWidth(minWidth);\n    if (isNaN(minWidth)) {\n      minWidth = 80;\n    }\n  }\n  return minWidth;\n};\n\nfunction parseHeight(height) {\n  if (typeof height === 'number') {\n    return height;\n  }\n  if (typeof height === 'string') {\n    if (/^\\d+(?:px)?$/.test(height)) {\n      return parseInt(height, 10);\n    } else {\n      return height;\n    }\n  }\n  return null;\n}\n\n// https://github.com/reduxjs/redux/blob/master/src/compose.js\nfunction compose() {\n  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {\n    funcs[_key] = arguments[_key];\n  }\n\n  if (funcs.length === 0) {\n    return function (arg) {\n      return arg;\n    };\n  }\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n  return funcs.reduce(function (a, b) {\n    return function () {\n      return a(b.apply(undefined, arguments));\n    };\n  });\n}\n\nfunction toggleRowStatus(statusArr, row, newVal) {\n  var changed = false;\n  var index = statusArr.indexOf(row);\n  var included = index !== -1;\n\n  var addRow = function addRow() {\n    statusArr.push(row);\n    changed = true;\n  };\n  var removeRow = function removeRow() {\n    statusArr.splice(index, 1);\n    changed = true;\n  };\n\n  if (typeof newVal === 'boolean') {\n    if (newVal && !included) {\n      addRow();\n    } else if (!newVal && included) {\n      removeRow();\n    }\n  } else {\n    if (included) {\n      removeRow();\n    } else {\n      addRow();\n    }\n  }\n  return changed;\n}\n\nfunction walkTreeNode(root, cb) {\n  var childrenKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'children';\n  var lazyKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'hasChildren';\n\n  var isNil = function isNil(array) {\n    return !(Array.isArray(array) && array.length);\n  };\n\n  function _walker(parent, children, level) {\n    cb(parent, children, level);\n    children.forEach(function (item) {\n      if (item[lazyKey]) {\n        cb(item, null, level + 1);\n        return;\n      }\n      var children = item[childrenKey];\n      if (!isNil(children)) {\n        _walker(item, children, level + 1);\n      }\n    });\n  }\n\n  root.forEach(function (item) {\n    if (item[lazyKey]) {\n      cb(item, null, 0);\n      return;\n    }\n    var children = item[childrenKey];\n    if (!isNil(children)) {\n      _walker(item, children, 0);\n    }\n  });\n}\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/utils/merge */ \"./node_modules/element-ui/lib/utils/merge.js\");\n\n/***/ }),\n/* 10 */,\n/* 11 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/mixins/migrating */ \"./node_modules/element-ui/lib/mixins/migrating.js\");\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/utils/clickoutside */ \"./node_modules/element-ui/lib/utils/clickoutside.js\");\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/utils/popup */ \"./node_modules/element-ui/lib/utils/popup/index.js\");\n\n/***/ }),\n/* 14 */,\n/* 15 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/scrollbar */ \"./node_modules/element-ui/lib/scrollbar.js\");\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/utils/resize-event */ \"./node_modules/element-ui/lib/utils/resize-event.js\");\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! throttle-debounce/debounce */ \"./node_modules/throttle-debounce/debounce.js\");\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/checkbox */ \"./node_modules/element-ui/lib/checkbox.js\");\n\n/***/ }),\n/* 19 */,\n/* 20 */,\n/* 21 */,\n/* 22 */,\n/* 23 */,\n/* 24 */,\n/* 25 */,\n/* 26 */,\n/* 27 */,\n/* 28 */,\n/* 29 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/tooltip */ \"./node_modules/element-ui/lib/tooltip.js\");\n\n/***/ }),\n/* 30 */,\n/* 31 */,\n/* 32 */,\n/* 33 */,\n/* 34 */,\n/* 35 */,\n/* 36 */,\n/* 37 */,\n/* 38 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/utils/scrollbar-width */ \"./node_modules/element-ui/lib/utils/scrollbar-width.js\");\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! element-ui/lib/checkbox-group */ \"./node_modules/element-ui/lib/checkbox-group.js\");\n\n/***/ }),\n/* 40 */,\n/* 41 */,\n/* 42 */,\n/* 43 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! throttle-debounce */ \"./node_modules/throttle-debounce/index.js\");\n\n/***/ }),\n/* 44 */,\n/* 45 */,\n/* 46 */\n/***/ (function(module, exports) {\n\nmodule.exports = __webpack_require__(/*! normalize-wheel */ \"./node_modules/normalize-wheel/index.js\");\n\n/***/ }),\n/* 47 */,\n/* 48 */,\n/* 49 */,\n/* 50 */,\n/* 51 */,\n/* 52 */,\n/* 53 */,\n/* 54 */,\n/* 55 */,\n/* 56 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/table/src/table.vue?vue&type=template&id=493fe34e&\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    {\n      staticClass: \"el-table\",\n      class: [\n        {\n          \"el-table--fit\": _vm.fit,\n          \"el-table--striped\": _vm.stripe,\n          \"el-table--border\": _vm.border || _vm.isGroup,\n          \"el-table--hidden\": _vm.isHidden,\n          \"el-table--group\": _vm.isGroup,\n          \"el-table--fluid-height\": _vm.maxHeight,\n          \"el-table--scrollable-x\": _vm.layout.scrollX,\n          \"el-table--scrollable-y\": _vm.layout.scrollY,\n          \"el-table--enable-row-hover\": !_vm.store.states.isComplex,\n          \"el-table--enable-row-transition\":\n            (_vm.store.states.data || []).length !== 0 &&\n            (_vm.store.states.data || []).length < 100\n        },\n        _vm.tableSize ? \"el-table--\" + _vm.tableSize : \"\"\n      ],\n      on: {\n        mouseleave: function($event) {\n          _vm.handleMouseLeave($event)\n        }\n      }\n    },\n    [\n      _c(\n        \"div\",\n        { ref: \"hiddenColumns\", staticClass: \"hidden-columns\" },\n        [_vm._t(\"default\")],\n        2\n      ),\n      _vm.showHeader\n        ? _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"mousewheel\",\n                  rawName: \"v-mousewheel\",\n                  value: _vm.handleHeaderFooterMousewheel,\n                  expression: \"handleHeaderFooterMousewheel\"\n                }\n              ],\n              ref: \"headerWrapper\",\n              staticClass: \"el-table__header-wrapper\"\n            },\n            [\n              _c(\"table-header\", {\n                ref: \"tableHeader\",\n                style: {\n                  width: _vm.layout.bodyWidth ? _vm.layout.bodyWidth + \"px\" : \"\"\n                },\n                attrs: {\n                  store: _vm.store,\n                  border: _vm.border,\n                  \"default-sort\": _vm.defaultSort\n                }\n              })\n            ],\n            1\n          )\n        : _vm._e(),\n      _c(\n        \"div\",\n        {\n          ref: \"bodyWrapper\",\n          staticClass: \"el-table__body-wrapper\",\n          class: [\n            _vm.layout.scrollX\n              ? \"is-scrolling-\" + _vm.scrollPosition\n              : \"is-scrolling-none\"\n          ],\n          style: [_vm.bodyHeight]\n        },\n        [\n          _c(\"table-body\", {\n            style: {\n              width: _vm.bodyWidth\n            },\n            attrs: {\n              context: _vm.context,\n              store: _vm.store,\n              stripe: _vm.stripe,\n              \"row-class-name\": _vm.rowClassName,\n              \"row-style\": _vm.rowStyle,\n              highlight: _vm.highlightCurrentRow\n            }\n          }),\n          !_vm.data || _vm.data.length === 0\n            ? _c(\n                \"div\",\n                {\n                  ref: \"emptyBlock\",\n                  staticClass: \"el-table__empty-block\",\n                  style: _vm.emptyBlockStyle\n                },\n                [\n                  _c(\n                    \"span\",\n                    { staticClass: \"el-table__empty-text\" },\n                    [\n                      _vm._t(\"empty\", [\n                        _vm._v(\n                          _vm._s(_vm.emptyText || _vm.t(\"el.table.emptyText\"))\n                        )\n                      ])\n                    ],\n                    2\n                  )\n                ]\n              )\n            : _vm._e(),\n          _vm.$slots.append\n            ? _c(\n                \"div\",\n                {\n                  ref: \"appendWrapper\",\n                  staticClass: \"el-table__append-wrapper\"\n                },\n                [_vm._t(\"append\")],\n                2\n              )\n            : _vm._e()\n        ],\n        1\n      ),\n      _vm.showSummary\n        ? _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.data && _vm.data.length > 0,\n                  expression: \"data && data.length > 0\"\n                },\n                {\n                  name: \"mousewheel\",\n                  rawName: \"v-mousewheel\",\n                  value: _vm.handleHeaderFooterMousewheel,\n                  expression: \"handleHeaderFooterMousewheel\"\n                }\n              ],\n              ref: \"footerWrapper\",\n              staticClass: \"el-table__footer-wrapper\"\n            },\n            [\n              _c(\"table-footer\", {\n                style: {\n                  width: _vm.layout.bodyWidth ? _vm.layout.bodyWidth + \"px\" : \"\"\n                },\n                attrs: {\n                  store: _vm.store,\n                  border: _vm.border,\n                  \"sum-text\": _vm.sumText || _vm.t(\"el.table.sumText\"),\n                  \"summary-method\": _vm.summaryMethod,\n                  \"default-sort\": _vm.defaultSort\n                }\n              })\n            ],\n            1\n          )\n        : _vm._e(),\n      _vm.fixedColumns.length > 0\n        ? _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"mousewheel\",\n                  rawName: \"v-mousewheel\",\n                  value: _vm.handleFixedMousewheel,\n                  expression: \"handleFixedMousewheel\"\n                }\n              ],\n              ref: \"fixedWrapper\",\n              staticClass: \"el-table__fixed\",\n              style: [\n                {\n                  width: _vm.layout.fixedWidth\n                    ? _vm.layout.fixedWidth + \"px\"\n                    : \"\"\n                },\n                _vm.fixedHeight\n              ]\n            },\n            [\n              _vm.showHeader\n                ? _c(\n                    \"div\",\n                    {\n                      ref: \"fixedHeaderWrapper\",\n                      staticClass: \"el-table__fixed-header-wrapper\"\n                    },\n                    [\n                      _c(\"table-header\", {\n                        ref: \"fixedTableHeader\",\n                        style: {\n                          width: _vm.bodyWidth\n                        },\n                        attrs: {\n                          fixed: \"left\",\n                          border: _vm.border,\n                          store: _vm.store\n                        }\n                      })\n                    ],\n                    1\n                  )\n                : _vm._e(),\n              _c(\n                \"div\",\n                {\n                  ref: \"fixedBodyWrapper\",\n                  staticClass: \"el-table__fixed-body-wrapper\",\n                  style: [\n                    {\n                      top: _vm.layout.headerHeight + \"px\"\n                    },\n                    _vm.fixedBodyHeight\n                  ]\n                },\n                [\n                  _c(\"table-body\", {\n                    style: {\n                      width: _vm.bodyWidth\n                    },\n                    attrs: {\n                      fixed: \"left\",\n                      store: _vm.store,\n                      stripe: _vm.stripe,\n                      highlight: _vm.highlightCurrentRow,\n                      \"row-class-name\": _vm.rowClassName,\n                      \"row-style\": _vm.rowStyle\n                    }\n                  }),\n                  _vm.$slots.append\n                    ? _c(\"div\", {\n                        staticClass: \"el-table__append-gutter\",\n                        style: { height: _vm.layout.appendHeight + \"px\" }\n                      })\n                    : _vm._e()\n                ],\n                1\n              ),\n              _vm.showSummary\n                ? _c(\n                    \"div\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.data && _vm.data.length > 0,\n                          expression: \"data && data.length > 0\"\n                        }\n                      ],\n                      ref: \"fixedFooterWrapper\",\n                      staticClass: \"el-table__fixed-footer-wrapper\"\n                    },\n                    [\n                      _c(\"table-footer\", {\n                        style: {\n                          width: _vm.bodyWidth\n                        },\n                        attrs: {\n                          fixed: \"left\",\n                          border: _vm.border,\n                          \"sum-text\": _vm.sumText || _vm.t(\"el.table.sumText\"),\n                          \"summary-method\": _vm.summaryMethod,\n                          store: _vm.store\n                        }\n                      })\n                    ],\n                    1\n                  )\n                : _vm._e()\n            ]\n          )\n        : _vm._e(),\n      _vm.rightFixedColumns.length > 0\n        ? _c(\n            \"div\",\n            {\n              directives: [\n                {\n                  name: \"mousewheel\",\n                  rawName: \"v-mousewheel\",\n                  value: _vm.handleFixedMousewheel,\n                  expression: \"handleFixedMousewheel\"\n                }\n              ],\n              ref: \"rightFixedWrapper\",\n              staticClass: \"el-table__fixed-right\",\n              style: [\n                {\n                  width: _vm.layout.rightFixedWidth\n                    ? _vm.layout.rightFixedWidth + \"px\"\n                    : \"\",\n                  right: _vm.layout.scrollY\n                    ? (_vm.border\n                        ? _vm.layout.gutterWidth\n                        : _vm.layout.gutterWidth || 0) + \"px\"\n                    : \"\"\n                },\n                _vm.fixedHeight\n              ]\n            },\n            [\n              _vm.showHeader\n                ? _c(\n                    \"div\",\n                    {\n                      ref: \"rightFixedHeaderWrapper\",\n                      staticClass: \"el-table__fixed-header-wrapper\"\n                    },\n                    [\n                      _c(\"table-header\", {\n                        ref: \"rightFixedTableHeader\",\n                        style: {\n                          width: _vm.bodyWidth\n                        },\n                        attrs: {\n                          fixed: \"right\",\n                          border: _vm.border,\n                          store: _vm.store\n                        }\n                      })\n                    ],\n                    1\n                  )\n                : _vm._e(),\n              _c(\n                \"div\",\n                {\n                  ref: \"rightFixedBodyWrapper\",\n                  staticClass: \"el-table__fixed-body-wrapper\",\n                  style: [\n                    {\n                      top: _vm.layout.headerHeight + \"px\"\n                    },\n                    _vm.fixedBodyHeight\n                  ]\n                },\n                [\n                  _c(\"table-body\", {\n                    style: {\n                      width: _vm.bodyWidth\n                    },\n                    attrs: {\n                      fixed: \"right\",\n                      store: _vm.store,\n                      stripe: _vm.stripe,\n                      \"row-class-name\": _vm.rowClassName,\n                      \"row-style\": _vm.rowStyle,\n                      highlight: _vm.highlightCurrentRow\n                    }\n                  }),\n                  _vm.$slots.append\n                    ? _c(\"div\", {\n                        staticClass: \"el-table__append-gutter\",\n                        style: { height: _vm.layout.appendHeight + \"px\" }\n                      })\n                    : _vm._e()\n                ],\n                1\n              ),\n              _vm.showSummary\n                ? _c(\n                    \"div\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.data && _vm.data.length > 0,\n                          expression: \"data && data.length > 0\"\n                        }\n                      ],\n                      ref: \"rightFixedFooterWrapper\",\n                      staticClass: \"el-table__fixed-footer-wrapper\"\n                    },\n                    [\n                      _c(\"table-footer\", {\n                        style: {\n                          width: _vm.bodyWidth\n                        },\n                        attrs: {\n                          fixed: \"right\",\n                          border: _vm.border,\n                          \"sum-text\": _vm.sumText || _vm.t(\"el.table.sumText\"),\n                          \"summary-method\": _vm.summaryMethod,\n                          store: _vm.store\n                        }\n                      })\n                    ],\n                    1\n                  )\n                : _vm._e()\n            ]\n          )\n        : _vm._e(),\n      _vm.rightFixedColumns.length > 0\n        ? _c(\"div\", {\n            ref: \"rightFixedPatch\",\n            staticClass: \"el-table__fixed-right-patch\",\n            style: {\n              width: _vm.layout.scrollY ? _vm.layout.gutterWidth + \"px\" : \"0\",\n              height: _vm.layout.headerHeight + \"px\"\n            }\n          })\n        : _vm._e(),\n      _c(\"div\", {\n        directives: [\n          {\n            name: \"show\",\n            rawName: \"v-show\",\n            value: _vm.resizeProxyVisible,\n            expression: \"resizeProxyVisible\"\n          }\n        ],\n        ref: \"resizeProxy\",\n        staticClass: \"el-table__column-resize-proxy\"\n      })\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/table/src/table.vue?vue&type=template&id=493fe34e&\n\n// EXTERNAL MODULE: external \"element-ui/lib/checkbox\"\nvar checkbox_ = __webpack_require__(18);\nvar checkbox_default = /*#__PURE__*/__webpack_require__.n(checkbox_);\n\n// EXTERNAL MODULE: external \"throttle-debounce\"\nvar external_throttle_debounce_ = __webpack_require__(43);\n\n// EXTERNAL MODULE: external \"element-ui/lib/utils/resize-event\"\nvar resize_event_ = __webpack_require__(16);\n\n// EXTERNAL MODULE: external \"normalize-wheel\"\nvar external_normalize_wheel_ = __webpack_require__(46);\nvar external_normalize_wheel_default = /*#__PURE__*/__webpack_require__.n(external_normalize_wheel_);\n\n// CONCATENATED MODULE: ./src/directives/mousewheel.js\n\n\nvar isFirefox = typeof navigator !== 'undefined' && navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n\nvar mousewheel_mousewheel = function mousewheel(element, callback) {\n  if (element && element.addEventListener) {\n    element.addEventListener(isFirefox ? 'DOMMouseScroll' : 'mousewheel', function (event) {\n      var normalized = external_normalize_wheel_default()(event);\n      callback && callback.apply(this, [event, normalized]);\n    });\n  }\n};\n\n/* harmony default export */ var directives_mousewheel = ({\n  bind: function bind(el, binding) {\n    mousewheel_mousewheel(el, binding.value);\n  }\n});\n// EXTERNAL MODULE: external \"element-ui/lib/mixins/locale\"\nvar locale_ = __webpack_require__(6);\nvar locale_default = /*#__PURE__*/__webpack_require__.n(locale_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/mixins/migrating\"\nvar migrating_ = __webpack_require__(11);\nvar migrating_default = /*#__PURE__*/__webpack_require__.n(migrating_);\n\n// EXTERNAL MODULE: external \"vue\"\nvar external_vue_ = __webpack_require__(7);\nvar external_vue_default = /*#__PURE__*/__webpack_require__.n(external_vue_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/utils/merge\"\nvar merge_ = __webpack_require__(9);\nvar merge_default = /*#__PURE__*/__webpack_require__.n(merge_);\n\n// EXTERNAL MODULE: ./packages/table/src/util.js\nvar util = __webpack_require__(8);\n\n// CONCATENATED MODULE: ./packages/table/src/store/expand.js\n\n\n/* harmony default export */ var expand = ({\n  data: function data() {\n    return {\n      states: {\n        defaultExpandAll: false,\n        expandRows: []\n      }\n    };\n  },\n\n\n  methods: {\n    updateExpandRows: function updateExpandRows() {\n      var _states = this.states,\n          _states$data = _states.data,\n          data = _states$data === undefined ? [] : _states$data,\n          rowKey = _states.rowKey,\n          defaultExpandAll = _states.defaultExpandAll,\n          expandRows = _states.expandRows;\n\n      if (defaultExpandAll) {\n        this.states.expandRows = data.slice();\n      } else if (rowKey) {\n        // TODO：这里的代码可以优化\n        var expandRowsMap = Object(util[\"f\" /* getKeysMap */])(expandRows, rowKey);\n        this.states.expandRows = data.reduce(function (prev, row) {\n          var rowId = Object(util[\"g\" /* getRowIdentity */])(row, rowKey);\n          var rowInfo = expandRowsMap[rowId];\n          if (rowInfo) {\n            prev.push(row);\n          }\n          return prev;\n        }, []);\n      } else {\n        this.states.expandRows = [];\n      }\n    },\n    toggleRowExpansion: function toggleRowExpansion(row, expanded) {\n      var changed = Object(util[\"m\" /* toggleRowStatus */])(this.states.expandRows, row, expanded);\n      if (changed) {\n        this.table.$emit('expand-change', row, this.states.expandRows.slice());\n        this.scheduleLayout();\n      }\n    },\n    setExpandRowKeys: function setExpandRowKeys(rowKeys) {\n      this.assertRowKey();\n      // TODO：这里的代码可以优化\n      var _states2 = this.states,\n          data = _states2.data,\n          rowKey = _states2.rowKey;\n\n      var keysMap = Object(util[\"f\" /* getKeysMap */])(data, rowKey);\n      this.states.expandRows = rowKeys.reduce(function (prev, cur) {\n        var info = keysMap[cur];\n        if (info) {\n          prev.push(info.row);\n        }\n        return prev;\n      }, []);\n    },\n    isRowExpanded: function isRowExpanded(row) {\n      var _states3 = this.states,\n          _states3$expandRows = _states3.expandRows,\n          expandRows = _states3$expandRows === undefined ? [] : _states3$expandRows,\n          rowKey = _states3.rowKey;\n\n      if (rowKey) {\n        var expandMap = Object(util[\"f\" /* getKeysMap */])(expandRows, rowKey);\n        return !!expandMap[Object(util[\"g\" /* getRowIdentity */])(row, rowKey)];\n      }\n      return expandRows.indexOf(row) !== -1;\n    }\n  }\n});\n// EXTERNAL MODULE: external \"element-ui/lib/utils/util\"\nvar util_ = __webpack_require__(3);\n\n// CONCATENATED MODULE: ./packages/table/src/store/current.js\n\n\n\n/* harmony default export */ var current = ({\n  data: function data() {\n    return {\n      states: {\n        // 不可响应的，设置 currentRowKey 时，data 不一定存在，也许无法算出正确的 currentRow\n        // 把该值缓存一下，当用户点击修改 currentRow 时，把该值重置为 null\n        _currentRowKey: null,\n        currentRow: null\n      }\n    };\n  },\n\n\n  methods: {\n    setCurrentRowKey: function setCurrentRowKey(key) {\n      this.assertRowKey();\n      this.states._currentRowKey = key;\n      this.setCurrentRowByKey(key);\n    },\n    restoreCurrentRowKey: function restoreCurrentRowKey() {\n      this.states._currentRowKey = null;\n    },\n    setCurrentRowByKey: function setCurrentRowByKey(key) {\n      var states = this.states;\n      var _states$data = states.data,\n          data = _states$data === undefined ? [] : _states$data,\n          rowKey = states.rowKey;\n\n      var currentRow = null;\n      if (rowKey) {\n        currentRow = Object(util_[\"arrayFind\"])(data, function (item) {\n          return Object(util[\"g\" /* getRowIdentity */])(item, rowKey) === key;\n        });\n      }\n      states.currentRow = currentRow;\n    },\n    updateCurrentRow: function updateCurrentRow(currentRow) {\n      var states = this.states,\n          table = this.table;\n\n      var oldCurrentRow = states.currentRow;\n      if (currentRow && currentRow !== oldCurrentRow) {\n        states.currentRow = currentRow;\n        table.$emit('current-change', currentRow, oldCurrentRow);\n        return;\n      }\n      if (!currentRow && oldCurrentRow) {\n        states.currentRow = null;\n        table.$emit('current-change', null, oldCurrentRow);\n      }\n    },\n    updateCurrentRowData: function updateCurrentRowData() {\n      var states = this.states,\n          table = this.table;\n      var rowKey = states.rowKey,\n          _currentRowKey = states._currentRowKey;\n      // data 为 null 时，解构时的默认值会被忽略\n\n      var data = states.data || [];\n      var oldCurrentRow = states.currentRow;\n\n      // 当 currentRow 不在 data 中时尝试更新数据\n      if (data.indexOf(oldCurrentRow) === -1 && oldCurrentRow) {\n        if (rowKey) {\n          var currentRowKey = Object(util[\"g\" /* getRowIdentity */])(oldCurrentRow, rowKey);\n          this.setCurrentRowByKey(currentRowKey);\n        } else {\n          states.currentRow = null;\n        }\n        if (states.currentRow === null) {\n          table.$emit('current-change', null, oldCurrentRow);\n        }\n      } else if (_currentRowKey) {\n        // 把初始时下设置的 rowKey 转化成 rowData\n        this.setCurrentRowByKey(_currentRowKey);\n        this.restoreCurrentRowKey();\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/table/src/store/tree.js\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n/* harmony default export */ var tree = ({\n  data: function data() {\n    return {\n      states: {\n        // defaultExpandAll 存在于 expand.js 中，这里不重复添加\n        // 在展开行中，expandRowKeys 会被转化成 expandRows，expandRowKeys 这个属性只是记录了 TreeTable 行的展开\n        // TODO: 拆分为独立的 TreeTable，统一用法\n        expandRowKeys: [],\n        treeData: {},\n        indent: 16,\n        lazy: false,\n        lazyTreeNodeMap: {},\n        lazyColumnIdentifier: 'hasChildren',\n        childrenColumnName: 'children'\n      }\n    };\n  },\n\n\n  computed: {\n    // 嵌入型的数据，watch 无法是检测到变化 https://github.com/ElemeFE/element/issues/14998\n    // TODO: 使用 computed 解决该问题，是否会造成性能问题？\n    // @return { id: { level, children } }\n    normalizedData: function normalizedData() {\n      if (!this.states.rowKey) return {};\n      var data = this.states.data || [];\n      return this.normalize(data);\n    },\n\n    // @return { id: { children } }\n    // 针对懒加载的情形，不处理嵌套数据\n    normalizedLazyNode: function normalizedLazyNode() {\n      var _states = this.states,\n          rowKey = _states.rowKey,\n          lazyTreeNodeMap = _states.lazyTreeNodeMap,\n          lazyColumnIdentifier = _states.lazyColumnIdentifier;\n\n      var keys = Object.keys(lazyTreeNodeMap);\n      var res = {};\n      if (!keys.length) return res;\n      keys.forEach(function (key) {\n        if (lazyTreeNodeMap[key].length) {\n          var item = { children: [] };\n          lazyTreeNodeMap[key].forEach(function (row) {\n            var currentRowKey = Object(util[\"g\" /* getRowIdentity */])(row, rowKey);\n            item.children.push(currentRowKey);\n            if (row[lazyColumnIdentifier] && !res[currentRowKey]) {\n              res[currentRowKey] = { children: [] };\n            }\n          });\n          res[key] = item;\n        }\n      });\n      return res;\n    }\n  },\n\n  watch: {\n    normalizedData: 'updateTreeData',\n    normalizedLazyNode: 'updateTreeData'\n  },\n\n  methods: {\n    normalize: function normalize(data) {\n      var _states2 = this.states,\n          childrenColumnName = _states2.childrenColumnName,\n          lazyColumnIdentifier = _states2.lazyColumnIdentifier,\n          rowKey = _states2.rowKey,\n          lazy = _states2.lazy;\n\n      var res = {};\n      Object(util[\"n\" /* walkTreeNode */])(data, function (parent, children, level) {\n        var parentId = Object(util[\"g\" /* getRowIdentity */])(parent, rowKey);\n        if (Array.isArray(children)) {\n          res[parentId] = {\n            children: children.map(function (row) {\n              return Object(util[\"g\" /* getRowIdentity */])(row, rowKey);\n            }),\n            level: level\n          };\n        } else if (lazy) {\n          // 当 children 不存在且 lazy 为 true，该节点即为懒加载的节点\n          res[parentId] = {\n            children: [],\n            lazy: true,\n            level: level\n          };\n        }\n      }, childrenColumnName, lazyColumnIdentifier);\n      return res;\n    },\n    updateTreeData: function updateTreeData() {\n      var nested = this.normalizedData;\n      var normalizedLazyNode = this.normalizedLazyNode;\n      var keys = Object.keys(nested);\n      var newTreeData = {};\n      if (keys.length) {\n        var _states3 = this.states,\n            oldTreeData = _states3.treeData,\n            defaultExpandAll = _states3.defaultExpandAll,\n            expandRowKeys = _states3.expandRowKeys,\n            lazy = _states3.lazy;\n\n        var rootLazyRowKeys = [];\n        var getExpanded = function getExpanded(oldValue, key) {\n          var included = defaultExpandAll || expandRowKeys && expandRowKeys.indexOf(key) !== -1;\n          return !!(oldValue && oldValue.expanded || included);\n        };\n        // 合并 expanded 与 display，确保数据刷新后，状态不变\n        keys.forEach(function (key) {\n          var oldValue = oldTreeData[key];\n          var newValue = _extends({}, nested[key]);\n          newValue.expanded = getExpanded(oldValue, key);\n          if (newValue.lazy) {\n            var _ref = oldValue || {},\n                _ref$loaded = _ref.loaded,\n                loaded = _ref$loaded === undefined ? false : _ref$loaded,\n                _ref$loading = _ref.loading,\n                loading = _ref$loading === undefined ? false : _ref$loading;\n\n            newValue.loaded = !!loaded;\n            newValue.loading = !!loading;\n            rootLazyRowKeys.push(key);\n          }\n          newTreeData[key] = newValue;\n        });\n        // 根据懒加载数据更新 treeData\n        var lazyKeys = Object.keys(normalizedLazyNode);\n        if (lazy && lazyKeys.length && rootLazyRowKeys.length) {\n          lazyKeys.forEach(function (key) {\n            var oldValue = oldTreeData[key];\n            var lazyNodeChildren = normalizedLazyNode[key].children;\n            if (rootLazyRowKeys.indexOf(key) !== -1) {\n              // 懒加载的 root 节点，更新一下原有的数据，原来的 children 一定是空数组\n              if (newTreeData[key].children.length !== 0) {\n                throw new Error('[ElTable]children must be an empty array.');\n              }\n              newTreeData[key].children = lazyNodeChildren;\n            } else {\n              var _ref2 = oldValue || {},\n                  _ref2$loaded = _ref2.loaded,\n                  loaded = _ref2$loaded === undefined ? false : _ref2$loaded,\n                  _ref2$loading = _ref2.loading,\n                  loading = _ref2$loading === undefined ? false : _ref2$loading;\n\n              newTreeData[key] = {\n                lazy: true,\n                loaded: !!loaded,\n                loading: !!loading,\n                expanded: getExpanded(oldValue, key),\n                children: lazyNodeChildren,\n                level: ''\n              };\n            }\n          });\n        }\n      }\n      this.states.treeData = newTreeData;\n      this.updateTableScrollY();\n    },\n    updateTreeExpandKeys: function updateTreeExpandKeys(value) {\n      this.states.expandRowKeys = value;\n      this.updateTreeData();\n    },\n    toggleTreeExpansion: function toggleTreeExpansion(row, expanded) {\n      this.assertRowKey();\n\n      var _states4 = this.states,\n          rowKey = _states4.rowKey,\n          treeData = _states4.treeData;\n\n      var id = Object(util[\"g\" /* getRowIdentity */])(row, rowKey);\n      var data = id && treeData[id];\n      if (id && data && 'expanded' in data) {\n        var oldExpanded = data.expanded;\n        expanded = typeof expanded === 'undefined' ? !data.expanded : expanded;\n        treeData[id].expanded = expanded;\n        if (oldExpanded !== expanded) {\n          this.table.$emit('expand-change', row, expanded);\n        }\n        this.updateTableScrollY();\n      }\n    },\n    loadOrToggle: function loadOrToggle(row) {\n      this.assertRowKey();\n      var _states5 = this.states,\n          lazy = _states5.lazy,\n          treeData = _states5.treeData,\n          rowKey = _states5.rowKey;\n\n      var id = Object(util[\"g\" /* getRowIdentity */])(row, rowKey);\n      var data = treeData[id];\n      if (lazy && data && 'loaded' in data && !data.loaded) {\n        this.loadData(row, id, data);\n      } else {\n        this.toggleTreeExpansion(row);\n      }\n    },\n    loadData: function loadData(row, key, treeNode) {\n      var _this = this;\n\n      var load = this.table.load;\n      var _states6 = this.states,\n          lazyTreeNodeMap = _states6.lazyTreeNodeMap,\n          treeData = _states6.treeData;\n\n      if (load && !treeData[key].loaded) {\n        treeData[key].loading = true;\n        load(row, treeNode, function (data) {\n          if (!Array.isArray(data)) {\n            throw new Error('[ElTable] data must be an array');\n          }\n          treeData[key].loading = false;\n          treeData[key].loaded = true;\n          treeData[key].expanded = true;\n          if (data.length) {\n            _this.$set(lazyTreeNodeMap, key, data);\n          }\n          _this.table.$emit('expand-change', row, true);\n        });\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/table/src/store/watcher.js\n\n\n\n\n\n\n\nvar watcher_sortData = function sortData(data, states) {\n  var sortingColumn = states.sortingColumn;\n  if (!sortingColumn || typeof sortingColumn.sortable === 'string') {\n    return data;\n  }\n  return Object(util[\"i\" /* orderBy */])(data, states.sortProp, states.sortOrder, sortingColumn.sortMethod, sortingColumn.sortBy);\n};\n\nvar doFlattenColumns = function doFlattenColumns(columns) {\n  var result = [];\n  columns.forEach(function (column) {\n    if (column.children) {\n      result.push.apply(result, doFlattenColumns(column.children));\n    } else {\n      result.push(column);\n    }\n  });\n  return result;\n};\n\n/* harmony default export */ var watcher = (external_vue_default.a.extend({\n  data: function data() {\n    return {\n      states: {\n        // 3.0 版本后要求必须设置该属性\n        rowKey: null,\n\n        // 渲染的数据来源，是对 table 中的 data 过滤排序后的结果\n        data: [],\n\n        // 是否包含固定列\n        isComplex: false,\n\n        // 列\n        _columns: [], // 不可响应的\n        originColumns: [],\n        columns: [],\n        fixedColumns: [],\n        rightFixedColumns: [],\n        leafColumns: [],\n        fixedLeafColumns: [],\n        rightFixedLeafColumns: [],\n        leafColumnsLength: 0,\n        fixedLeafColumnsLength: 0,\n        rightFixedLeafColumnsLength: 0,\n\n        // 选择\n        isAllSelected: false,\n        selection: [],\n        reserveSelection: false,\n        selectOnIndeterminate: false,\n        selectable: null,\n\n        // 过滤\n        filters: {}, // 不可响应的\n        filteredData: null,\n\n        // 排序\n        sortingColumn: null,\n        sortProp: null,\n        sortOrder: null,\n\n        hoverRow: null\n      }\n    };\n  },\n\n\n  mixins: [expand, current, tree],\n\n  methods: {\n    // 检查 rowKey 是否存在\n    assertRowKey: function assertRowKey() {\n      var rowKey = this.states.rowKey;\n      if (!rowKey) throw new Error('[ElTable] prop row-key is required');\n    },\n\n\n    // 更新列\n    updateColumns: function updateColumns() {\n      var states = this.states;\n      var _columns = states._columns || [];\n      states.fixedColumns = _columns.filter(function (column) {\n        return column.fixed === true || column.fixed === 'left';\n      });\n      states.rightFixedColumns = _columns.filter(function (column) {\n        return column.fixed === 'right';\n      });\n\n      if (states.fixedColumns.length > 0 && _columns[0] && _columns[0].type === 'selection' && !_columns[0].fixed) {\n        _columns[0].fixed = true;\n        states.fixedColumns.unshift(_columns[0]);\n      }\n\n      var notFixedColumns = _columns.filter(function (column) {\n        return !column.fixed;\n      });\n      states.originColumns = [].concat(states.fixedColumns).concat(notFixedColumns).concat(states.rightFixedColumns);\n\n      var leafColumns = doFlattenColumns(notFixedColumns);\n      var fixedLeafColumns = doFlattenColumns(states.fixedColumns);\n      var rightFixedLeafColumns = doFlattenColumns(states.rightFixedColumns);\n\n      states.leafColumnsLength = leafColumns.length;\n      states.fixedLeafColumnsLength = fixedLeafColumns.length;\n      states.rightFixedLeafColumnsLength = rightFixedLeafColumns.length;\n\n      states.columns = [].concat(fixedLeafColumns).concat(leafColumns).concat(rightFixedLeafColumns);\n      states.isComplex = states.fixedColumns.length > 0 || states.rightFixedColumns.length > 0;\n    },\n\n\n    // 更新 DOM\n    scheduleLayout: function scheduleLayout(needUpdateColumns) {\n      if (needUpdateColumns) {\n        this.updateColumns();\n      }\n      this.table.debouncedUpdateLayout();\n    },\n\n\n    // 选择\n    isSelected: function isSelected(row) {\n      var _states$selection = this.states.selection,\n          selection = _states$selection === undefined ? [] : _states$selection;\n\n      return selection.indexOf(row) > -1;\n    },\n    clearSelection: function clearSelection() {\n      var states = this.states;\n      states.isAllSelected = false;\n      var oldSelection = states.selection;\n      if (oldSelection.length) {\n        states.selection = [];\n        this.table.$emit('selection-change', []);\n      }\n    },\n    cleanSelection: function cleanSelection() {\n      var states = this.states;\n      var data = states.data,\n          rowKey = states.rowKey,\n          selection = states.selection;\n\n      var deleted = void 0;\n      if (rowKey) {\n        deleted = [];\n        var selectedMap = Object(util[\"f\" /* getKeysMap */])(selection, rowKey);\n        var dataMap = Object(util[\"f\" /* getKeysMap */])(data, rowKey);\n        for (var key in selectedMap) {\n          if (selectedMap.hasOwnProperty(key) && !dataMap[key]) {\n            deleted.push(selectedMap[key].row);\n          }\n        }\n      } else {\n        deleted = selection.filter(function (item) {\n          return data.indexOf(item) === -1;\n        });\n      }\n      if (deleted.length) {\n        var newSelection = selection.filter(function (item) {\n          return deleted.indexOf(item) === -1;\n        });\n        states.selection = newSelection;\n        this.table.$emit('selection-change', newSelection.slice());\n      }\n    },\n    toggleRowSelection: function toggleRowSelection(row, selected) {\n      var emitChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n      var changed = Object(util[\"m\" /* toggleRowStatus */])(this.states.selection, row, selected);\n      if (changed) {\n        var newSelection = (this.states.selection || []).slice();\n        // 调用 API 修改选中值，不触发 select 事件\n        if (emitChange) {\n          this.table.$emit('select', newSelection, row);\n        }\n        this.table.$emit('selection-change', newSelection);\n      }\n    },\n    _toggleAllSelection: function _toggleAllSelection() {\n      var states = this.states;\n      var _states$data = states.data,\n          data = _states$data === undefined ? [] : _states$data,\n          selection = states.selection;\n      // when only some rows are selected (but not all), select or deselect all of them\n      // depending on the value of selectOnIndeterminate\n\n      var value = states.selectOnIndeterminate ? !states.isAllSelected : !(states.isAllSelected || selection.length);\n      states.isAllSelected = value;\n\n      var selectionChanged = false;\n      data.forEach(function (row, index) {\n        if (states.selectable) {\n          if (states.selectable.call(null, row, index) && Object(util[\"m\" /* toggleRowStatus */])(selection, row, value)) {\n            selectionChanged = true;\n          }\n        } else {\n          if (Object(util[\"m\" /* toggleRowStatus */])(selection, row, value)) {\n            selectionChanged = true;\n          }\n        }\n      });\n\n      if (selectionChanged) {\n        this.table.$emit('selection-change', selection ? selection.slice() : []);\n      }\n      this.table.$emit('select-all', selection);\n    },\n    updateSelectionByRowKey: function updateSelectionByRowKey() {\n      var states = this.states;\n      var selection = states.selection,\n          rowKey = states.rowKey,\n          data = states.data;\n\n      var selectedMap = Object(util[\"f\" /* getKeysMap */])(selection, rowKey);\n      data.forEach(function (row) {\n        var rowId = Object(util[\"g\" /* getRowIdentity */])(row, rowKey);\n        var rowInfo = selectedMap[rowId];\n        if (rowInfo) {\n          selection[rowInfo.index] = row;\n        }\n      });\n    },\n    updateAllSelected: function updateAllSelected() {\n      var states = this.states;\n      var selection = states.selection,\n          rowKey = states.rowKey,\n          selectable = states.selectable;\n      // data 为 null 时，解构时的默认值会被忽略\n\n      var data = states.data || [];\n      if (data.length === 0) {\n        states.isAllSelected = false;\n        return;\n      }\n\n      var selectedMap = void 0;\n      if (rowKey) {\n        selectedMap = Object(util[\"f\" /* getKeysMap */])(selection, rowKey);\n      }\n      var isSelected = function isSelected(row) {\n        if (selectedMap) {\n          return !!selectedMap[Object(util[\"g\" /* getRowIdentity */])(row, rowKey)];\n        } else {\n          return selection.indexOf(row) !== -1;\n        }\n      };\n      var isAllSelected = true;\n      var selectedCount = 0;\n      for (var i = 0, j = data.length; i < j; i++) {\n        var item = data[i];\n        var isRowSelectable = selectable && selectable.call(null, item, i);\n        if (!isSelected(item)) {\n          if (!selectable || isRowSelectable) {\n            isAllSelected = false;\n            break;\n          }\n        } else {\n          selectedCount++;\n        }\n      }\n\n      if (selectedCount === 0) isAllSelected = false;\n      states.isAllSelected = isAllSelected;\n    },\n\n\n    // 过滤与排序\n    updateFilters: function updateFilters(columns, values) {\n      if (!Array.isArray(columns)) {\n        columns = [columns];\n      }\n      var states = this.states;\n      var filters = {};\n      columns.forEach(function (col) {\n        states.filters[col.id] = values;\n        filters[col.columnKey || col.id] = values;\n      });\n\n      return filters;\n    },\n    updateSort: function updateSort(column, prop, order) {\n      if (this.states.sortingColumn && this.states.sortingColumn !== column) {\n        this.states.sortingColumn.order = null;\n      }\n      this.states.sortingColumn = column;\n      this.states.sortProp = prop;\n      this.states.sortOrder = order;\n    },\n    execFilter: function execFilter() {\n      var _this = this;\n\n      var states = this.states;\n      var _data = states._data,\n          filters = states.filters;\n\n      var data = _data;\n\n      Object.keys(filters).forEach(function (columnId) {\n        var values = states.filters[columnId];\n        if (!values || values.length === 0) return;\n        var column = Object(util[\"d\" /* getColumnById */])(_this.states, columnId);\n        if (column && column.filterMethod) {\n          data = data.filter(function (row) {\n            return values.some(function (value) {\n              return column.filterMethod.call(null, value, row, column);\n            });\n          });\n        }\n      });\n\n      states.filteredData = data;\n    },\n    execSort: function execSort() {\n      var states = this.states;\n      states.data = watcher_sortData(states.filteredData, states);\n    },\n\n\n    // 根据 filters 与 sort 去过滤 data\n    execQuery: function execQuery(ignore) {\n      if (!(ignore && ignore.filter)) {\n        this.execFilter();\n      }\n      this.execSort();\n    },\n    clearFilter: function clearFilter(columnKeys) {\n      var states = this.states;\n      var _table$$refs = this.table.$refs,\n          tableHeader = _table$$refs.tableHeader,\n          fixedTableHeader = _table$$refs.fixedTableHeader,\n          rightFixedTableHeader = _table$$refs.rightFixedTableHeader;\n\n\n      var panels = {};\n      if (tableHeader) panels = merge_default()(panels, tableHeader.filterPanels);\n      if (fixedTableHeader) panels = merge_default()(panels, fixedTableHeader.filterPanels);\n      if (rightFixedTableHeader) panels = merge_default()(panels, rightFixedTableHeader.filterPanels);\n\n      var keys = Object.keys(panels);\n      if (!keys.length) return;\n\n      if (typeof columnKeys === 'string') {\n        columnKeys = [columnKeys];\n      }\n\n      if (Array.isArray(columnKeys)) {\n        var columns = columnKeys.map(function (key) {\n          return Object(util[\"e\" /* getColumnByKey */])(states, key);\n        });\n        keys.forEach(function (key) {\n          var column = columns.find(function (col) {\n            return col.id === key;\n          });\n          if (column) {\n            // TODO: 优化这里的代码\n            panels[key].filteredValue = [];\n          }\n        });\n        this.commit('filterChange', {\n          column: columns,\n          values: [],\n          silent: true,\n          multi: true\n        });\n      } else {\n        keys.forEach(function (key) {\n          // TODO: 优化这里的代码\n          panels[key].filteredValue = [];\n        });\n\n        states.filters = {};\n        this.commit('filterChange', {\n          column: {},\n          values: [],\n          silent: true\n        });\n      }\n    },\n    clearSort: function clearSort() {\n      var states = this.states;\n      if (!states.sortingColumn) return;\n\n      this.updateSort(null, null, null);\n      this.commit('changeSortCondition', {\n        silent: true\n      });\n    },\n\n\n    // 适配层，expand-row-keys 在 Expand 与 TreeTable 中都有使用\n    setExpandRowKeysAdapter: function setExpandRowKeysAdapter(val) {\n      // 这里会触发额外的计算，但为了兼容性，暂时这么做\n      this.setExpandRowKeys(val);\n      this.updateTreeExpandKeys(val);\n    },\n\n\n    // 展开行与 TreeTable 都要使用\n    toggleRowExpansionAdapter: function toggleRowExpansionAdapter(row, expanded) {\n      var hasExpandColumn = this.states.columns.some(function (_ref) {\n        var type = _ref.type;\n        return type === 'expand';\n      });\n      if (hasExpandColumn) {\n        this.toggleRowExpansion(row, expanded);\n      } else {\n        this.toggleTreeExpansion(row, expanded);\n      }\n    }\n  }\n}));\n// CONCATENATED MODULE: ./packages/table/src/store/index.js\n\n\n\n\nwatcher.prototype.mutations = {\n  setData: function setData(states, data) {\n    var dataInstanceChanged = states._data !== data;\n    states._data = data;\n\n    this.execQuery();\n    // 数据变化，更新部分数据。\n    // 没有使用 computed，而是手动更新部分数据 https://github.com/vuejs/vue/issues/6660#issuecomment-331417140\n    this.updateCurrentRowData();\n    this.updateExpandRows();\n    if (states.reserveSelection) {\n      this.assertRowKey();\n      this.updateSelectionByRowKey();\n    } else {\n      if (dataInstanceChanged) {\n        this.clearSelection();\n      } else {\n        this.cleanSelection();\n      }\n    }\n    this.updateAllSelected();\n\n    this.updateTableScrollY();\n  },\n  insertColumn: function insertColumn(states, column, index, parent) {\n    var array = states._columns;\n    if (parent) {\n      array = parent.children;\n      if (!array) array = parent.children = [];\n    }\n\n    if (typeof index !== 'undefined') {\n      array.splice(index, 0, column);\n    } else {\n      array.push(column);\n    }\n\n    if (column.type === 'selection') {\n      states.selectable = column.selectable;\n      states.reserveSelection = column.reserveSelection;\n    }\n\n    if (this.table.$ready) {\n      this.updateColumns(); // hack for dynamics insert column\n      this.scheduleLayout();\n    }\n  },\n  removeColumn: function removeColumn(states, column, parent) {\n    var array = states._columns;\n    if (parent) {\n      array = parent.children;\n      if (!array) array = parent.children = [];\n    }\n    if (array) {\n      array.splice(array.indexOf(column), 1);\n    }\n\n    if (this.table.$ready) {\n      this.updateColumns(); // hack for dynamics remove column\n      this.scheduleLayout();\n    }\n  },\n  sort: function sort(states, options) {\n    var prop = options.prop,\n        order = options.order,\n        init = options.init;\n\n    if (prop) {\n      var column = Object(util_[\"arrayFind\"])(states.columns, function (column) {\n        return column.property === prop;\n      });\n      if (column) {\n        column.order = order;\n        this.updateSort(column, prop, order);\n        this.commit('changeSortCondition', { init: init });\n      }\n    }\n  },\n  changeSortCondition: function changeSortCondition(states, options) {\n    // 修复 pr https://github.com/ElemeFE/element/pull/15012 导致的 bug\n    var column = states.sortingColumn,\n        prop = states.sortProp,\n        order = states.sortOrder;\n\n    if (order === null) {\n      states.sortingColumn = null;\n      states.sortProp = null;\n    }\n    var ingore = { filter: true };\n    this.execQuery(ingore);\n\n    if (!options || !(options.silent || options.init)) {\n      this.table.$emit('sort-change', {\n        column: column,\n        prop: prop,\n        order: order\n      });\n    }\n\n    this.updateTableScrollY();\n  },\n  filterChange: function filterChange(states, options) {\n    var column = options.column,\n        values = options.values,\n        silent = options.silent;\n\n    var newFilters = this.updateFilters(column, values);\n\n    this.execQuery();\n\n    if (!silent) {\n      this.table.$emit('filter-change', newFilters);\n    }\n\n    this.updateTableScrollY();\n  },\n  toggleAllSelection: function toggleAllSelection() {\n    this.toggleAllSelection();\n  },\n  rowSelectedChanged: function rowSelectedChanged(states, row) {\n    this.toggleRowSelection(row);\n    this.updateAllSelected();\n  },\n  setHoverRow: function setHoverRow(states, row) {\n    states.hoverRow = row;\n  },\n  setCurrentRow: function setCurrentRow(states, row) {\n    this.updateCurrentRow(row);\n  }\n};\n\nwatcher.prototype.commit = function (name) {\n  var mutations = this.mutations;\n  if (mutations[name]) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    mutations[name].apply(this, [this.states].concat(args));\n  } else {\n    throw new Error('Action not found: ' + name);\n  }\n};\n\nwatcher.prototype.updateTableScrollY = function () {\n  external_vue_default.a.nextTick(this.table.updateScrollY);\n};\n\n/* harmony default export */ var src_store = (watcher);\n// EXTERNAL MODULE: external \"throttle-debounce/debounce\"\nvar debounce_ = __webpack_require__(17);\nvar debounce_default = /*#__PURE__*/__webpack_require__.n(debounce_);\n\n// CONCATENATED MODULE: ./packages/table/src/store/helper.js\n\n\n\nfunction createStore(table) {\n  var initialState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!table) {\n    throw new Error('Table is required.');\n  }\n\n  var store = new src_store();\n  store.table = table;\n  // fix https://github.com/ElemeFE/element/issues/14075\n  // related pr https://github.com/ElemeFE/element/pull/14146\n  store.toggleAllSelection = debounce_default()(10, store._toggleAllSelection);\n  Object.keys(initialState).forEach(function (key) {\n    store.states[key] = initialState[key];\n  });\n  return store;\n}\n\nfunction mapStates(mapper) {\n  var res = {};\n  Object.keys(mapper).forEach(function (key) {\n    var value = mapper[key];\n    var fn = void 0;\n    if (typeof value === 'string') {\n      fn = function fn() {\n        return this.store.states[value];\n      };\n    } else if (typeof value === 'function') {\n      fn = function fn() {\n        return value.call(this, this.store.states);\n      };\n    } else {\n      console.error('invalid value type');\n    }\n    if (fn) {\n      res[key] = fn;\n    }\n  });\n  return res;\n};\n// EXTERNAL MODULE: external \"element-ui/lib/utils/scrollbar-width\"\nvar scrollbar_width_ = __webpack_require__(38);\nvar scrollbar_width_default = /*#__PURE__*/__webpack_require__.n(scrollbar_width_);\n\n// CONCATENATED MODULE: ./packages/table/src/table-layout.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n\n\n\n\nvar table_layout_TableLayout = function () {\n  function TableLayout(options) {\n    _classCallCheck(this, TableLayout);\n\n    this.observers = [];\n    this.table = null;\n    this.store = null;\n    this.columns = null;\n    this.fit = true;\n    this.showHeader = true;\n\n    this.height = null;\n    this.scrollX = false;\n    this.scrollY = false;\n    this.bodyWidth = null;\n    this.fixedWidth = null;\n    this.rightFixedWidth = null;\n    this.tableHeight = null;\n    this.headerHeight = 44; // Table Header Height\n    this.appendHeight = 0; // Append Slot Height\n    this.footerHeight = 44; // Table Footer Height\n    this.viewportHeight = null; // Table Height - Scroll Bar Height\n    this.bodyHeight = null; // Table Height - Table Header Height\n    this.fixedBodyHeight = null; // Table Height - Table Header Height - Scroll Bar Height\n    this.gutterWidth = scrollbar_width_default()();\n\n    for (var name in options) {\n      if (options.hasOwnProperty(name)) {\n        this[name] = options[name];\n      }\n    }\n\n    if (!this.table) {\n      throw new Error('table is required for Table Layout');\n    }\n    if (!this.store) {\n      throw new Error('store is required for Table Layout');\n    }\n  }\n\n  TableLayout.prototype.updateScrollY = function updateScrollY() {\n    var height = this.height;\n    if (height === null) return false;\n    var bodyWrapper = this.table.bodyWrapper;\n    if (this.table.$el && bodyWrapper) {\n      var body = bodyWrapper.querySelector('.el-table__body');\n      var prevScrollY = this.scrollY;\n      var scrollY = body.offsetHeight > this.bodyHeight;\n      this.scrollY = scrollY;\n      return prevScrollY !== scrollY;\n    }\n    return false;\n  };\n\n  TableLayout.prototype.setHeight = function setHeight(value) {\n    var _this = this;\n\n    var prop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'height';\n\n    if (external_vue_default.a.prototype.$isServer) return;\n    var el = this.table.$el;\n    value = Object(util[\"j\" /* parseHeight */])(value);\n    this.height = value;\n\n    if (!el && (value || value === 0)) return external_vue_default.a.nextTick(function () {\n      return _this.setHeight(value, prop);\n    });\n\n    if (typeof value === 'number') {\n      el.style[prop] = value + 'px';\n      this.updateElsHeight();\n    } else if (typeof value === 'string') {\n      el.style[prop] = value;\n      this.updateElsHeight();\n    }\n  };\n\n  TableLayout.prototype.setMaxHeight = function setMaxHeight(value) {\n    this.setHeight(value, 'max-height');\n  };\n\n  TableLayout.prototype.getFlattenColumns = function getFlattenColumns() {\n    var flattenColumns = [];\n    var columns = this.table.columns;\n    columns.forEach(function (column) {\n      if (column.isColumnGroup) {\n        flattenColumns.push.apply(flattenColumns, column.columns);\n      } else {\n        flattenColumns.push(column);\n      }\n    });\n\n    return flattenColumns;\n  };\n\n  TableLayout.prototype.updateElsHeight = function updateElsHeight() {\n    var _this2 = this;\n\n    if (!this.table.$ready) return external_vue_default.a.nextTick(function () {\n      return _this2.updateElsHeight();\n    });\n    var _table$$refs = this.table.$refs,\n        headerWrapper = _table$$refs.headerWrapper,\n        appendWrapper = _table$$refs.appendWrapper,\n        footerWrapper = _table$$refs.footerWrapper;\n\n    this.appendHeight = appendWrapper ? appendWrapper.offsetHeight : 0;\n\n    if (this.showHeader && !headerWrapper) return;\n\n    // fix issue (https://github.com/ElemeFE/element/pull/16956)\n    var headerTrElm = headerWrapper ? headerWrapper.querySelector('.el-table__header tr') : null;\n    var noneHeader = this.headerDisplayNone(headerTrElm);\n\n    var headerHeight = this.headerHeight = !this.showHeader ? 0 : headerWrapper.offsetHeight;\n    if (this.showHeader && !noneHeader && headerWrapper.offsetWidth > 0 && (this.table.columns || []).length > 0 && headerHeight < 2) {\n      return external_vue_default.a.nextTick(function () {\n        return _this2.updateElsHeight();\n      });\n    }\n    var tableHeight = this.tableHeight = this.table.$el.clientHeight;\n    var footerHeight = this.footerHeight = footerWrapper ? footerWrapper.offsetHeight : 0;\n    if (this.height !== null) {\n      this.bodyHeight = tableHeight - headerHeight - footerHeight + (footerWrapper ? 1 : 0);\n    }\n    this.fixedBodyHeight = this.scrollX ? this.bodyHeight - this.gutterWidth : this.bodyHeight;\n\n    var noData = !(this.store.states.data && this.store.states.data.length);\n    this.viewportHeight = this.scrollX ? tableHeight - (noData ? 0 : this.gutterWidth) : tableHeight;\n\n    this.updateScrollY();\n    this.notifyObservers('scrollable');\n  };\n\n  TableLayout.prototype.headerDisplayNone = function headerDisplayNone(elm) {\n    if (!elm) return true;\n    var headerChild = elm;\n    while (headerChild.tagName !== 'DIV') {\n      if (getComputedStyle(headerChild).display === 'none') {\n        return true;\n      }\n      headerChild = headerChild.parentElement;\n    }\n    return false;\n  };\n\n  TableLayout.prototype.updateColumnsWidth = function updateColumnsWidth() {\n    if (external_vue_default.a.prototype.$isServer) return;\n    var fit = this.fit;\n    var bodyWidth = this.table.$el.clientWidth;\n    var bodyMinWidth = 0;\n\n    var flattenColumns = this.getFlattenColumns();\n    var flexColumns = flattenColumns.filter(function (column) {\n      return typeof column.width !== 'number';\n    });\n\n    flattenColumns.forEach(function (column) {\n      // Clean those columns whose width changed from flex to unflex\n      if (typeof column.width === 'number' && column.realWidth) column.realWidth = null;\n    });\n\n    if (flexColumns.length > 0 && fit) {\n      flattenColumns.forEach(function (column) {\n        bodyMinWidth += column.width || column.minWidth || 80;\n      });\n\n      var scrollYWidth = this.scrollY ? this.gutterWidth : 0;\n\n      if (bodyMinWidth <= bodyWidth - scrollYWidth) {\n        // DON'T HAVE SCROLL BAR\n        this.scrollX = false;\n\n        var totalFlexWidth = bodyWidth - scrollYWidth - bodyMinWidth;\n\n        if (flexColumns.length === 1) {\n          flexColumns[0].realWidth = (flexColumns[0].minWidth || 80) + totalFlexWidth;\n        } else {\n          var allColumnsWidth = flexColumns.reduce(function (prev, column) {\n            return prev + (column.minWidth || 80);\n          }, 0);\n          var flexWidthPerPixel = totalFlexWidth / allColumnsWidth;\n          var noneFirstWidth = 0;\n\n          flexColumns.forEach(function (column, index) {\n            if (index === 0) return;\n            var flexWidth = Math.floor((column.minWidth || 80) * flexWidthPerPixel);\n            noneFirstWidth += flexWidth;\n            column.realWidth = (column.minWidth || 80) + flexWidth;\n          });\n\n          flexColumns[0].realWidth = (flexColumns[0].minWidth || 80) + totalFlexWidth - noneFirstWidth;\n        }\n      } else {\n        // HAVE HORIZONTAL SCROLL BAR\n        this.scrollX = true;\n        flexColumns.forEach(function (column) {\n          column.realWidth = column.minWidth;\n        });\n      }\n\n      this.bodyWidth = Math.max(bodyMinWidth, bodyWidth);\n      this.table.resizeState.width = this.bodyWidth;\n    } else {\n      flattenColumns.forEach(function (column) {\n        if (!column.width && !column.minWidth) {\n          column.realWidth = 80;\n        } else {\n          column.realWidth = column.width || column.minWidth;\n        }\n\n        bodyMinWidth += column.realWidth;\n      });\n      this.scrollX = bodyMinWidth > bodyWidth;\n\n      this.bodyWidth = bodyMinWidth;\n    }\n\n    var fixedColumns = this.store.states.fixedColumns;\n\n    if (fixedColumns.length > 0) {\n      var fixedWidth = 0;\n      fixedColumns.forEach(function (column) {\n        fixedWidth += column.realWidth || column.width;\n      });\n\n      this.fixedWidth = fixedWidth;\n    }\n\n    var rightFixedColumns = this.store.states.rightFixedColumns;\n    if (rightFixedColumns.length > 0) {\n      var rightFixedWidth = 0;\n      rightFixedColumns.forEach(function (column) {\n        rightFixedWidth += column.realWidth || column.width;\n      });\n\n      this.rightFixedWidth = rightFixedWidth;\n    }\n\n    this.notifyObservers('columns');\n  };\n\n  TableLayout.prototype.addObserver = function addObserver(observer) {\n    this.observers.push(observer);\n  };\n\n  TableLayout.prototype.removeObserver = function removeObserver(observer) {\n    var index = this.observers.indexOf(observer);\n    if (index !== -1) {\n      this.observers.splice(index, 1);\n    }\n  };\n\n  TableLayout.prototype.notifyObservers = function notifyObservers(event) {\n    var _this3 = this;\n\n    var observers = this.observers;\n    observers.forEach(function (observer) {\n      switch (event) {\n        case 'columns':\n          observer.onColumnsChange(_this3);\n          break;\n        case 'scrollable':\n          observer.onScrollableChange(_this3);\n          break;\n        default:\n          throw new Error('Table Layout don\\'t have event ' + event + '.');\n      }\n    });\n  };\n\n  return TableLayout;\n}();\n\n/* harmony default export */ var table_layout = (table_layout_TableLayout);\n// EXTERNAL MODULE: external \"element-ui/lib/utils/dom\"\nvar dom_ = __webpack_require__(2);\n\n// EXTERNAL MODULE: external \"element-ui/lib/tooltip\"\nvar tooltip_ = __webpack_require__(29);\nvar tooltip_default = /*#__PURE__*/__webpack_require__.n(tooltip_);\n\n// CONCATENATED MODULE: ./packages/table/src/layout-observer.js\n/* harmony default export */ var layout_observer = ({\n  created: function created() {\n    this.tableLayout.addObserver(this);\n  },\n  destroyed: function destroyed() {\n    this.tableLayout.removeObserver(this);\n  },\n\n\n  computed: {\n    tableLayout: function tableLayout() {\n      var layout = this.layout;\n      if (!layout && this.table) {\n        layout = this.table.layout;\n      }\n      if (!layout) {\n        throw new Error('Can not find table layout.');\n      }\n      return layout;\n    }\n  },\n\n  mounted: function mounted() {\n    this.onColumnsChange(this.tableLayout);\n    this.onScrollableChange(this.tableLayout);\n  },\n  updated: function updated() {\n    if (this.__updated__) return;\n    this.onColumnsChange(this.tableLayout);\n    this.onScrollableChange(this.tableLayout);\n    this.__updated__ = true;\n  },\n\n\n  methods: {\n    onColumnsChange: function onColumnsChange(layout) {\n      var cols = this.$el.querySelectorAll('colgroup > col');\n      if (!cols.length) return;\n      var flattenColumns = layout.getFlattenColumns();\n      var columnsMap = {};\n      flattenColumns.forEach(function (column) {\n        columnsMap[column.id] = column;\n      });\n      for (var i = 0, j = cols.length; i < j; i++) {\n        var col = cols[i];\n        var name = col.getAttribute('name');\n        var column = columnsMap[name];\n        if (column) {\n          col.setAttribute('width', column.realWidth || column.width);\n        }\n      }\n    },\n    onScrollableChange: function onScrollableChange(layout) {\n      var cols = this.$el.querySelectorAll('colgroup > col[name=gutter]');\n      for (var i = 0, j = cols.length; i < j; i++) {\n        var col = cols[i];\n        col.setAttribute('width', layout.scrollY ? layout.gutterWidth : '0');\n      }\n      var ths = this.$el.querySelectorAll('th.gutter');\n      for (var _i = 0, _j = ths.length; _i < _j; _i++) {\n        var th = ths[_i];\n        th.style.width = layout.scrollY ? layout.gutterWidth + 'px' : '0';\n        th.style.display = layout.scrollY ? '' : 'none';\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/table/src/table-body.js\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar table_body_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var table_body = ({\n  name: 'ElTableBody',\n\n  mixins: [layout_observer],\n\n  components: {\n    ElCheckbox: checkbox_default.a,\n    ElTooltip: tooltip_default.a\n  },\n\n  props: {\n    store: {\n      required: true\n    },\n    stripe: Boolean,\n    context: {},\n    rowClassName: [String, Function],\n    rowStyle: [Object, Function],\n    fixed: String,\n    highlight: Boolean\n  },\n\n  render: function render(h) {\n    var _this = this;\n\n    var data = this.data || [];\n    return h(\n      'table',\n      {\n        'class': 'el-table__body',\n        attrs: { cellspacing: '0',\n          cellpadding: '0',\n          border: '0' }\n      },\n      [h('colgroup', [this.columns.map(function (column) {\n        return h('col', {\n          attrs: { name: column.id },\n          key: column.id });\n      })]), h('tbody', [data.reduce(function (acc, row) {\n        return acc.concat(_this.wrappedRowRender(row, acc.length));\n      }, []), h('el-tooltip', {\n        attrs: { effect: this.table.tooltipEffect, placement: 'top', content: this.tooltipContent },\n        ref: 'tooltip' })])]\n    );\n  },\n\n\n  computed: table_body_extends({\n    table: function table() {\n      return this.$parent;\n    }\n  }, mapStates({\n    data: 'data',\n    columns: 'columns',\n    treeIndent: 'indent',\n    leftFixedLeafCount: 'fixedLeafColumnsLength',\n    rightFixedLeafCount: 'rightFixedLeafColumnsLength',\n    columnsCount: function columnsCount(states) {\n      return states.columns.length;\n    },\n    leftFixedCount: function leftFixedCount(states) {\n      return states.fixedColumns.length;\n    },\n    rightFixedCount: function rightFixedCount(states) {\n      return states.rightFixedColumns.length;\n    },\n    hasExpandColumn: function hasExpandColumn(states) {\n      return states.columns.some(function (_ref) {\n        var type = _ref.type;\n        return type === 'expand';\n      });\n    }\n  }), {\n    firstDefaultColumnIndex: function firstDefaultColumnIndex() {\n      return Object(util_[\"arrayFindIndex\"])(this.columns, function (_ref2) {\n        var type = _ref2.type;\n        return type === 'default';\n      });\n    }\n  }),\n\n  watch: {\n    // don't trigger getter of currentRow in getCellClass. see https://jsfiddle.net/oe2b4hqt/\n    // update DOM manually. see https://github.com/ElemeFE/element/pull/13954/files#diff-9b450c00d0a9dec0ffad5a3176972e40\n    'store.states.hoverRow': function storeStatesHoverRow(newVal, oldVal) {\n      var _this2 = this;\n\n      if (!this.store.states.isComplex || this.$isServer) return;\n      var raf = window.requestAnimationFrame;\n      if (!raf) {\n        raf = function raf(fn) {\n          return setTimeout(fn, 16);\n        };\n      }\n      raf(function () {\n        var rows = _this2.$el.querySelectorAll('.el-table__row');\n        var oldRow = rows[oldVal];\n        var newRow = rows[newVal];\n        if (oldRow) {\n          Object(dom_[\"removeClass\"])(oldRow, 'hover-row');\n        }\n        if (newRow) {\n          Object(dom_[\"addClass\"])(newRow, 'hover-row');\n        }\n      });\n    }\n  },\n\n  data: function data() {\n    return {\n      tooltipContent: ''\n    };\n  },\n  created: function created() {\n    this.activateTooltip = debounce_default()(50, function (tooltip) {\n      return tooltip.handleShowPopper();\n    });\n  },\n\n\n  methods: {\n    getKeyOfRow: function getKeyOfRow(row, index) {\n      var rowKey = this.table.rowKey;\n      if (rowKey) {\n        return Object(util[\"g\" /* getRowIdentity */])(row, rowKey);\n      }\n      return index;\n    },\n    isColumnHidden: function isColumnHidden(index) {\n      if (this.fixed === true || this.fixed === 'left') {\n        return index >= this.leftFixedLeafCount;\n      } else if (this.fixed === 'right') {\n        return index < this.columnsCount - this.rightFixedLeafCount;\n      } else {\n        return index < this.leftFixedLeafCount || index >= this.columnsCount - this.rightFixedLeafCount;\n      }\n    },\n    getSpan: function getSpan(row, column, rowIndex, columnIndex) {\n      var rowspan = 1;\n      var colspan = 1;\n      var fn = this.table.spanMethod;\n      if (typeof fn === 'function') {\n        var result = fn({\n          row: row,\n          column: column,\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n        if (Array.isArray(result)) {\n          rowspan = result[0];\n          colspan = result[1];\n        } else if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object') {\n          rowspan = result.rowspan;\n          colspan = result.colspan;\n        }\n      }\n      return { rowspan: rowspan, colspan: colspan };\n    },\n    getRowStyle: function getRowStyle(row, rowIndex) {\n      var rowStyle = this.table.rowStyle;\n      if (typeof rowStyle === 'function') {\n        return rowStyle.call(null, {\n          row: row,\n          rowIndex: rowIndex\n        });\n      }\n      return rowStyle || null;\n    },\n    getRowClass: function getRowClass(row, rowIndex) {\n      var classes = ['el-table__row'];\n      if (this.table.highlightCurrentRow && row === this.store.states.currentRow) {\n        classes.push('current-row');\n      }\n\n      if (this.stripe && rowIndex % 2 === 1) {\n        classes.push('el-table__row--striped');\n      }\n      var rowClassName = this.table.rowClassName;\n      if (typeof rowClassName === 'string') {\n        classes.push(rowClassName);\n      } else if (typeof rowClassName === 'function') {\n        classes.push(rowClassName.call(null, {\n          row: row,\n          rowIndex: rowIndex\n        }));\n      }\n\n      if (this.store.states.expandRows.indexOf(row) > -1) {\n        classes.push('expanded');\n      }\n\n      return classes;\n    },\n    getCellStyle: function getCellStyle(rowIndex, columnIndex, row, column) {\n      var cellStyle = this.table.cellStyle;\n      if (typeof cellStyle === 'function') {\n        return cellStyle.call(null, {\n          rowIndex: rowIndex,\n          columnIndex: columnIndex,\n          row: row,\n          column: column\n        });\n      }\n      return cellStyle;\n    },\n    getCellClass: function getCellClass(rowIndex, columnIndex, row, column) {\n      var classes = [column.id, column.align, column.className];\n\n      if (this.isColumnHidden(columnIndex)) {\n        classes.push('is-hidden');\n      }\n\n      var cellClassName = this.table.cellClassName;\n      if (typeof cellClassName === 'string') {\n        classes.push(cellClassName);\n      } else if (typeof cellClassName === 'function') {\n        classes.push(cellClassName.call(null, {\n          rowIndex: rowIndex,\n          columnIndex: columnIndex,\n          row: row,\n          column: column\n        }));\n      }\n\n      return classes.join(' ');\n    },\n    getColspanRealWidth: function getColspanRealWidth(columns, colspan, index) {\n      if (colspan < 1) {\n        return columns[index].realWidth;\n      }\n      var widthArr = columns.map(function (_ref3) {\n        var realWidth = _ref3.realWidth;\n        return realWidth;\n      }).slice(index, index + colspan);\n      return widthArr.reduce(function (acc, width) {\n        return acc + width;\n      }, -1);\n    },\n    handleCellMouseEnter: function handleCellMouseEnter(event, row) {\n      var table = this.table;\n      var cell = Object(util[\"b\" /* getCell */])(event);\n\n      if (cell) {\n        var column = Object(util[\"c\" /* getColumnByCell */])(table, cell);\n        var hoverState = table.hoverState = { cell: cell, column: column, row: row };\n        table.$emit('cell-mouse-enter', hoverState.row, hoverState.column, hoverState.cell, event);\n      }\n\n      // 判断是否text-overflow, 如果是就显示tooltip\n      var cellChild = event.target.querySelector('.cell');\n      if (!(Object(dom_[\"hasClass\"])(cellChild, 'el-tooltip') && cellChild.childNodes.length)) {\n        return;\n      }\n      // use range width instead of scrollWidth to determine whether the text is overflowing\n      // to address a potential FireFox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1074543#c3\n      var range = document.createRange();\n      range.setStart(cellChild, 0);\n      range.setEnd(cellChild, cellChild.childNodes.length);\n      var rangeWidth = range.getBoundingClientRect().width;\n      var padding = (parseInt(Object(dom_[\"getStyle\"])(cellChild, 'paddingLeft'), 10) || 0) + (parseInt(Object(dom_[\"getStyle\"])(cellChild, 'paddingRight'), 10) || 0);\n      if ((rangeWidth + padding > cellChild.offsetWidth || cellChild.scrollWidth > cellChild.offsetWidth) && this.$refs.tooltip) {\n        var tooltip = this.$refs.tooltip;\n        // TODO 会引起整个 Table 的重新渲染，需要优化\n        this.tooltipContent = cell.innerText || cell.textContent;\n        tooltip.referenceElm = cell;\n        tooltip.$refs.popper && (tooltip.$refs.popper.style.display = 'none');\n        tooltip.doDestroy();\n        tooltip.setExpectedState(true);\n        this.activateTooltip(tooltip);\n      }\n    },\n    handleCellMouseLeave: function handleCellMouseLeave(event) {\n      var tooltip = this.$refs.tooltip;\n      if (tooltip) {\n        tooltip.setExpectedState(false);\n        tooltip.handleClosePopper();\n      }\n      var cell = Object(util[\"b\" /* getCell */])(event);\n      if (!cell) return;\n\n      var oldHoverState = this.table.hoverState || {};\n      this.table.$emit('cell-mouse-leave', oldHoverState.row, oldHoverState.column, oldHoverState.cell, event);\n    },\n\n\n    handleMouseEnter: debounce_default()(30, function (index) {\n      this.store.commit('setHoverRow', index);\n    }),\n\n    handleMouseLeave: debounce_default()(30, function () {\n      this.store.commit('setHoverRow', null);\n    }),\n\n    handleContextMenu: function handleContextMenu(event, row) {\n      this.handleEvent(event, row, 'contextmenu');\n    },\n    handleDoubleClick: function handleDoubleClick(event, row) {\n      this.handleEvent(event, row, 'dblclick');\n    },\n    handleClick: function handleClick(event, row) {\n      this.store.commit('setCurrentRow', row);\n      this.handleEvent(event, row, 'click');\n    },\n    handleEvent: function handleEvent(event, row, name) {\n      var table = this.table;\n      var cell = Object(util[\"b\" /* getCell */])(event);\n      var column = void 0;\n      if (cell) {\n        column = Object(util[\"c\" /* getColumnByCell */])(table, cell);\n        if (column) {\n          table.$emit('cell-' + name, row, column, cell, event);\n        }\n      }\n      table.$emit('row-' + name, row, column, event);\n    },\n    rowRender: function rowRender(row, $index, treeRowData) {\n      var _this3 = this;\n\n      var h = this.$createElement;\n      var treeIndent = this.treeIndent,\n          columns = this.columns,\n          firstDefaultColumnIndex = this.firstDefaultColumnIndex;\n\n      var columnsHidden = columns.map(function (column, index) {\n        return _this3.isColumnHidden(index);\n      });\n      var rowClasses = this.getRowClass(row, $index);\n      var display = true;\n      if (treeRowData) {\n        rowClasses.push('el-table__row--level-' + treeRowData.level);\n        display = treeRowData.display;\n      }\n      // 指令 v-show 会覆盖 row-style 中 display\n      // 使用 :style 代替 v-show https://github.com/ElemeFE/element/issues/16995\n      var displayStyle = display ? null : {\n        display: 'none'\n      };\n      return h(\n        'tr',\n        {\n          style: [displayStyle, this.getRowStyle(row, $index)],\n          'class': rowClasses,\n          key: this.getKeyOfRow(row, $index),\n          on: {\n            'dblclick': function dblclick($event) {\n              return _this3.handleDoubleClick($event, row);\n            },\n            'click': function click($event) {\n              return _this3.handleClick($event, row);\n            },\n            'contextmenu': function contextmenu($event) {\n              return _this3.handleContextMenu($event, row);\n            },\n            'mouseenter': function mouseenter(_) {\n              return _this3.handleMouseEnter($index);\n            },\n            'mouseleave': this.handleMouseLeave\n          }\n        },\n        [columns.map(function (column, cellIndex) {\n          var _getSpan = _this3.getSpan(row, column, $index, cellIndex),\n              rowspan = _getSpan.rowspan,\n              colspan = _getSpan.colspan;\n\n          if (!rowspan || !colspan) {\n            return null;\n          }\n          var columnData = table_body_extends({}, column);\n          columnData.realWidth = _this3.getColspanRealWidth(columns, colspan, cellIndex);\n          var data = {\n            store: _this3.store,\n            _self: _this3.context || _this3.table.$vnode.context,\n            column: columnData,\n            row: row,\n            $index: $index\n          };\n          if (cellIndex === firstDefaultColumnIndex && treeRowData) {\n            data.treeNode = {\n              indent: treeRowData.level * treeIndent,\n              level: treeRowData.level\n            };\n            if (typeof treeRowData.expanded === 'boolean') {\n              data.treeNode.expanded = treeRowData.expanded;\n              // 表明是懒加载\n              if ('loading' in treeRowData) {\n                data.treeNode.loading = treeRowData.loading;\n              }\n              if ('noLazyChildren' in treeRowData) {\n                data.treeNode.noLazyChildren = treeRowData.noLazyChildren;\n              }\n            }\n          }\n          return h(\n            'td',\n            {\n              style: _this3.getCellStyle($index, cellIndex, row, column),\n              'class': _this3.getCellClass($index, cellIndex, row, column),\n              attrs: { rowspan: rowspan,\n                colspan: colspan\n              },\n              on: {\n                'mouseenter': function mouseenter($event) {\n                  return _this3.handleCellMouseEnter($event, row);\n                },\n                'mouseleave': _this3.handleCellMouseLeave\n              }\n            },\n            [column.renderCell.call(_this3._renderProxy, _this3.$createElement, data, columnsHidden[cellIndex])]\n          );\n        })]\n      );\n    },\n    wrappedRowRender: function wrappedRowRender(row, $index) {\n      var _this4 = this;\n\n      var h = this.$createElement;\n\n      var store = this.store;\n      var isRowExpanded = store.isRowExpanded,\n          assertRowKey = store.assertRowKey;\n      var _store$states = store.states,\n          treeData = _store$states.treeData,\n          lazyTreeNodeMap = _store$states.lazyTreeNodeMap,\n          childrenColumnName = _store$states.childrenColumnName,\n          rowKey = _store$states.rowKey;\n\n      if (this.hasExpandColumn && isRowExpanded(row)) {\n        var renderExpanded = this.table.renderExpanded;\n        var tr = this.rowRender(row, $index);\n        if (!renderExpanded) {\n          console.error('[Element Error]renderExpanded is required.');\n          return tr;\n        }\n        // 使用二维数组，避免修改 $index\n        return [[tr, h(\n          'tr',\n          { key: 'expanded-row__' + tr.key },\n          [h(\n            'td',\n            {\n              attrs: { colspan: this.columnsCount },\n              'class': 'el-table__expanded-cell' },\n            [renderExpanded(this.$createElement, { row: row, $index: $index, store: this.store })]\n          )]\n        )]];\n      } else if (Object.keys(treeData).length) {\n        assertRowKey();\n        // TreeTable 时，rowKey 必须由用户设定，不使用 getKeyOfRow 计算\n        // 在调用 rowRender 函数时，仍然会计算 rowKey，不太好的操作\n        var key = Object(util[\"g\" /* getRowIdentity */])(row, rowKey);\n        var cur = treeData[key];\n        var treeRowData = null;\n        if (cur) {\n          treeRowData = {\n            expanded: cur.expanded,\n            level: cur.level,\n            display: true\n          };\n          if (typeof cur.lazy === 'boolean') {\n            if (typeof cur.loaded === 'boolean' && cur.loaded) {\n              treeRowData.noLazyChildren = !(cur.children && cur.children.length);\n            }\n            treeRowData.loading = cur.loading;\n          }\n        }\n        var tmp = [this.rowRender(row, $index, treeRowData)];\n        // 渲染嵌套数据\n        if (cur) {\n          // currentRow 记录的是 index，所以还需主动增加 TreeTable 的 index\n          var i = 0;\n          var traverse = function traverse(children, parent) {\n            if (!(children && children.length && parent)) return;\n            children.forEach(function (node) {\n              // 父节点的 display 状态影响子节点的显示状态\n              var innerTreeRowData = {\n                display: parent.display && parent.expanded,\n                level: parent.level + 1\n              };\n              var childKey = Object(util[\"g\" /* getRowIdentity */])(node, rowKey);\n              if (childKey === undefined || childKey === null) {\n                throw new Error('for nested data item, row-key is required.');\n              }\n              cur = table_body_extends({}, treeData[childKey]);\n              // 对于当前节点，分成有无子节点两种情况。\n              // 如果包含子节点的，设置 expanded 属性。\n              // 对于它子节点的 display 属性由它本身的 expanded 与 display 共同决定。\n              if (cur) {\n                innerTreeRowData.expanded = cur.expanded;\n                // 懒加载的某些节点，level 未知\n                cur.level = cur.level || innerTreeRowData.level;\n                cur.display = !!(cur.expanded && innerTreeRowData.display);\n                if (typeof cur.lazy === 'boolean') {\n                  if (typeof cur.loaded === 'boolean' && cur.loaded) {\n                    innerTreeRowData.noLazyChildren = !(cur.children && cur.children.length);\n                  }\n                  innerTreeRowData.loading = cur.loading;\n                }\n              }\n              i++;\n              tmp.push(_this4.rowRender(node, $index + i, innerTreeRowData));\n              if (cur) {\n                var _nodes = lazyTreeNodeMap[childKey] || node[childrenColumnName];\n                traverse(_nodes, cur);\n              }\n            });\n          };\n          // 对于 root 节点，display 一定为 true\n          cur.display = true;\n          var nodes = lazyTreeNodeMap[key] || row[childrenColumnName];\n          traverse(nodes, cur);\n        }\n        return tmp;\n      } else {\n        return this.rowRender(row, $index);\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./packages/table/src/filter-panel.vue?vue&type=template&id=7f2c919f&\nvar filter_panelvue_type_template_id_7f2c919f_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"transition\", { attrs: { name: \"el-zoom-in-top\" } }, [\n    _vm.multiple\n      ? _c(\n          \"div\",\n          {\n            directives: [\n              {\n                name: \"clickoutside\",\n                rawName: \"v-clickoutside\",\n                value: _vm.handleOutsideClick,\n                expression: \"handleOutsideClick\"\n              },\n              {\n                name: \"show\",\n                rawName: \"v-show\",\n                value: _vm.showPopper,\n                expression: \"showPopper\"\n              }\n            ],\n            staticClass: \"el-table-filter\"\n          },\n          [\n            _c(\n              \"div\",\n              { staticClass: \"el-table-filter__content\" },\n              [\n                _c(\n                  \"el-scrollbar\",\n                  { attrs: { \"wrap-class\": \"el-table-filter__wrap\" } },\n                  [\n                    _c(\n                      \"el-checkbox-group\",\n                      {\n                        staticClass: \"el-table-filter__checkbox-group\",\n                        model: {\n                          value: _vm.filteredValue,\n                          callback: function($$v) {\n                            _vm.filteredValue = $$v\n                          },\n                          expression: \"filteredValue\"\n                        }\n                      },\n                      _vm._l(_vm.filters, function(filter) {\n                        return _c(\n                          \"el-checkbox\",\n                          { key: filter.value, attrs: { label: filter.value } },\n                          [_vm._v(_vm._s(filter.text))]\n                        )\n                      }),\n                      1\n                    )\n                  ],\n                  1\n                )\n              ],\n              1\n            ),\n            _c(\"div\", { staticClass: \"el-table-filter__bottom\" }, [\n              _c(\n                \"button\",\n                {\n                  class: { \"is-disabled\": _vm.filteredValue.length === 0 },\n                  attrs: { disabled: _vm.filteredValue.length === 0 },\n                  on: { click: _vm.handleConfirm }\n                },\n                [_vm._v(_vm._s(_vm.t(\"el.table.confirmFilter\")))]\n              ),\n              _c(\"button\", { on: { click: _vm.handleReset } }, [\n                _vm._v(_vm._s(_vm.t(\"el.table.resetFilter\")))\n              ])\n            ])\n          ]\n        )\n      : _c(\n          \"div\",\n          {\n            directives: [\n              {\n                name: \"clickoutside\",\n                rawName: \"v-clickoutside\",\n                value: _vm.handleOutsideClick,\n                expression: \"handleOutsideClick\"\n              },\n              {\n                name: \"show\",\n                rawName: \"v-show\",\n                value: _vm.showPopper,\n                expression: \"showPopper\"\n              }\n            ],\n            staticClass: \"el-table-filter\"\n          },\n          [\n            _c(\n              \"ul\",\n              { staticClass: \"el-table-filter__list\" },\n              [\n                _c(\n                  \"li\",\n                  {\n                    staticClass: \"el-table-filter__list-item\",\n                    class: {\n                      \"is-active\":\n                        _vm.filterValue === undefined ||\n                        _vm.filterValue === null\n                    },\n                    on: {\n                      click: function($event) {\n                        _vm.handleSelect(null)\n                      }\n                    }\n                  },\n                  [_vm._v(_vm._s(_vm.t(\"el.table.clearFilter\")))]\n                ),\n                _vm._l(_vm.filters, function(filter) {\n                  return _c(\n                    \"li\",\n                    {\n                      key: filter.value,\n                      staticClass: \"el-table-filter__list-item\",\n                      class: { \"is-active\": _vm.isActive(filter) },\n                      attrs: { label: filter.value },\n                      on: {\n                        click: function($event) {\n                          _vm.handleSelect(filter.value)\n                        }\n                      }\n                    },\n                    [_vm._v(_vm._s(filter.text))]\n                  )\n                })\n              ],\n              2\n            )\n          ]\n        )\n  ])\n}\nvar filter_panelvue_type_template_id_7f2c919f_staticRenderFns = []\nfilter_panelvue_type_template_id_7f2c919f_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./packages/table/src/filter-panel.vue?vue&type=template&id=7f2c919f&\n\n// EXTERNAL MODULE: external \"element-ui/lib/utils/vue-popper\"\nvar vue_popper_ = __webpack_require__(5);\nvar vue_popper_default = /*#__PURE__*/__webpack_require__.n(vue_popper_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/utils/popup\"\nvar popup_ = __webpack_require__(13);\n\n// EXTERNAL MODULE: external \"element-ui/lib/utils/clickoutside\"\nvar clickoutside_ = __webpack_require__(12);\nvar clickoutside_default = /*#__PURE__*/__webpack_require__.n(clickoutside_);\n\n// CONCATENATED MODULE: ./packages/table/src/dropdown.js\n\nvar dropdowns = [];\n\n!external_vue_default.a.prototype.$isServer && document.addEventListener('click', function (event) {\n  dropdowns.forEach(function (dropdown) {\n    var target = event.target;\n    if (!dropdown || !dropdown.$el) return;\n    if (target === dropdown.$el || dropdown.$el.contains(target)) {\n      return;\n    }\n    dropdown.handleOutsideClick && dropdown.handleOutsideClick(event);\n  });\n});\n\n/* harmony default export */ var dropdown = ({\n  open: function open(instance) {\n    if (instance) {\n      dropdowns.push(instance);\n    }\n  },\n  close: function close(instance) {\n    var index = dropdowns.indexOf(instance);\n    if (index !== -1) {\n      dropdowns.splice(instance, 1);\n    }\n  }\n});\n// EXTERNAL MODULE: external \"element-ui/lib/checkbox-group\"\nvar checkbox_group_ = __webpack_require__(39);\nvar checkbox_group_default = /*#__PURE__*/__webpack_require__.n(checkbox_group_);\n\n// EXTERNAL MODULE: external \"element-ui/lib/scrollbar\"\nvar scrollbar_ = __webpack_require__(15);\nvar scrollbar_default = /*#__PURE__*/__webpack_require__.n(scrollbar_);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/table/src/filter-panel.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var filter_panelvue_type_script_lang_js_ = ({\n  name: 'ElTableFilterPanel',\n\n  mixins: [vue_popper_default.a, locale_default.a],\n\n  directives: {\n    Clickoutside: clickoutside_default.a\n  },\n\n  components: {\n    ElCheckbox: checkbox_default.a,\n    ElCheckboxGroup: checkbox_group_default.a,\n    ElScrollbar: scrollbar_default.a\n  },\n\n  props: {\n    placement: {\n      type: String,\n      default: 'bottom-end'\n    }\n  },\n\n  methods: {\n    isActive: function isActive(filter) {\n      return filter.value === this.filterValue;\n    },\n    handleOutsideClick: function handleOutsideClick() {\n      var _this = this;\n\n      setTimeout(function () {\n        _this.showPopper = false;\n      }, 16);\n    },\n    handleConfirm: function handleConfirm() {\n      this.confirmFilter(this.filteredValue);\n      this.handleOutsideClick();\n    },\n    handleReset: function handleReset() {\n      this.filteredValue = [];\n      this.confirmFilter(this.filteredValue);\n      this.handleOutsideClick();\n    },\n    handleSelect: function handleSelect(filterValue) {\n      this.filterValue = filterValue;\n\n      if (typeof filterValue !== 'undefined' && filterValue !== null) {\n        this.confirmFilter(this.filteredValue);\n      } else {\n        this.confirmFilter([]);\n      }\n\n      this.handleOutsideClick();\n    },\n    confirmFilter: function confirmFilter(filteredValue) {\n      this.table.store.commit('filterChange', {\n        column: this.column,\n        values: filteredValue\n      });\n      this.table.store.updateAllSelected();\n    }\n  },\n\n  data: function data() {\n    return {\n      table: null,\n      cell: null,\n      column: null\n    };\n  },\n\n\n  computed: {\n    filters: function filters() {\n      return this.column && this.column.filters;\n    },\n\n\n    filterValue: {\n      get: function get() {\n        return (this.column.filteredValue || [])[0];\n      },\n      set: function set(value) {\n        if (this.filteredValue) {\n          if (typeof value !== 'undefined' && value !== null) {\n            this.filteredValue.splice(0, 1, value);\n          } else {\n            this.filteredValue.splice(0, 1);\n          }\n        }\n      }\n    },\n\n    filteredValue: {\n      get: function get() {\n        if (this.column) {\n          return this.column.filteredValue || [];\n        }\n        return [];\n      },\n      set: function set(value) {\n        if (this.column) {\n          this.column.filteredValue = value;\n        }\n      }\n    },\n\n    multiple: function multiple() {\n      if (this.column) {\n        return this.column.filterMultiple;\n      }\n      return true;\n    }\n  },\n\n  mounted: function mounted() {\n    var _this2 = this;\n\n    this.popperElm = this.$el;\n    this.referenceElm = this.cell;\n    this.table.bodyWrapper.addEventListener('scroll', function () {\n      _this2.updatePopper();\n    });\n\n    this.$watch('showPopper', function (value) {\n      if (_this2.column) _this2.column.filterOpened = value;\n      if (value) {\n        dropdown.open(_this2);\n      } else {\n        dropdown.close(_this2);\n      }\n    });\n  },\n\n  watch: {\n    showPopper: function showPopper(val) {\n      if (val === true && parseInt(this.popperJS._popper.style.zIndex, 10) < popup_[\"PopupManager\"].zIndex) {\n        this.popperJS._popper.style.zIndex = popup_[\"PopupManager\"].nextZIndex();\n      }\n    }\n  }\n});\n// CONCATENATED MODULE: ./packages/table/src/filter-panel.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_filter_panelvue_type_script_lang_js_ = (filter_panelvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./packages/table/src/filter-panel.vue\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer[\"a\" /* default */])(\n  src_filter_panelvue_type_script_lang_js_,\n  filter_panelvue_type_template_id_7f2c919f_render,\n  filter_panelvue_type_template_id_7f2c919f_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = \"packages/table/src/filter-panel.vue\"\n/* harmony default export */ var filter_panel = (component.exports);\n// CONCATENATED MODULE: ./packages/table/src/table-header.js\nvar table_header_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n\n\n\n\n\nvar getAllColumns = function getAllColumns(columns) {\n  var result = [];\n  columns.forEach(function (column) {\n    if (column.children) {\n      result.push(column);\n      result.push.apply(result, getAllColumns(column.children));\n    } else {\n      result.push(column);\n    }\n  });\n  return result;\n};\n\nvar convertToRows = function convertToRows(originColumns) {\n  var maxLevel = 1;\n  var traverse = function traverse(column, parent) {\n    if (parent) {\n      column.level = parent.level + 1;\n      if (maxLevel < column.level) {\n        maxLevel = column.level;\n      }\n    }\n    if (column.children) {\n      var colSpan = 0;\n      column.children.forEach(function (subColumn) {\n        traverse(subColumn, column);\n        colSpan += subColumn.colSpan;\n      });\n      column.colSpan = colSpan;\n    } else {\n      column.colSpan = 1;\n    }\n  };\n\n  originColumns.forEach(function (column) {\n    column.level = 1;\n    traverse(column);\n  });\n\n  var rows = [];\n  for (var i = 0; i < maxLevel; i++) {\n    rows.push([]);\n  }\n\n  var allColumns = getAllColumns(originColumns);\n\n  allColumns.forEach(function (column) {\n    if (!column.children) {\n      column.rowSpan = maxLevel - column.level + 1;\n    } else {\n      column.rowSpan = 1;\n    }\n    rows[column.level - 1].push(column);\n  });\n\n  return rows;\n};\n\n/* harmony default export */ var table_header = ({\n  name: 'ElTableHeader',\n\n  mixins: [layout_observer],\n\n  render: function render(h) {\n    var _this = this;\n\n    var originColumns = this.store.states.originColumns;\n    var columnRows = convertToRows(originColumns, this.columns);\n    // 是否拥有多级表头\n    var isGroup = columnRows.length > 1;\n    if (isGroup) this.$parent.isGroup = true;\n    return h(\n      'table',\n      {\n        'class': 'el-table__header',\n        attrs: { cellspacing: '0',\n          cellpadding: '0',\n          border: '0' }\n      },\n      [h('colgroup', [this.columns.map(function (column) {\n        return h('col', {\n          attrs: { name: column.id },\n          key: column.id });\n      }), this.hasGutter ? h('col', {\n        attrs: { name: 'gutter' }\n      }) : '']), h(\n        'thead',\n        { 'class': [{ 'is-group': isGroup, 'has-gutter': this.hasGutter }] },\n        [this._l(columnRows, function (columns, rowIndex) {\n          return h(\n            'tr',\n            {\n              style: _this.getHeaderRowStyle(rowIndex),\n              'class': _this.getHeaderRowClass(rowIndex)\n            },\n            [columns.map(function (column, cellIndex) {\n              return h(\n                'th',\n                {\n                  attrs: {\n                    colspan: column.colSpan,\n                    rowspan: column.rowSpan\n                  },\n                  on: {\n                    'mousemove': function mousemove($event) {\n                      return _this.handleMouseMove($event, column);\n                    },\n                    'mouseout': _this.handleMouseOut,\n                    'mousedown': function mousedown($event) {\n                      return _this.handleMouseDown($event, column);\n                    },\n                    'click': function click($event) {\n                      return _this.handleHeaderClick($event, column);\n                    },\n                    'contextmenu': function contextmenu($event) {\n                      return _this.handleHeaderContextMenu($event, column);\n                    }\n                  },\n\n                  style: _this.getHeaderCellStyle(rowIndex, cellIndex, columns, column),\n                  'class': _this.getHeaderCellClass(rowIndex, cellIndex, columns, column),\n                  key: column.id },\n                [h(\n                  'div',\n                  { 'class': ['cell', column.filteredValue && column.filteredValue.length > 0 ? 'highlight' : '', column.labelClassName] },\n                  [column.renderHeader ? column.renderHeader.call(_this._renderProxy, h, { column: column, $index: cellIndex, store: _this.store, _self: _this.$parent.$vnode.context }) : column.label, column.sortable ? h(\n                    'span',\n                    {\n                      'class': 'caret-wrapper',\n                      on: {\n                        'click': function click($event) {\n                          return _this.handleSortClick($event, column);\n                        }\n                      }\n                    },\n                    [h('i', { 'class': 'sort-caret ascending',\n                      on: {\n                        'click': function click($event) {\n                          return _this.handleSortClick($event, column, 'ascending');\n                        }\n                      }\n                    }), h('i', { 'class': 'sort-caret descending',\n                      on: {\n                        'click': function click($event) {\n                          return _this.handleSortClick($event, column, 'descending');\n                        }\n                      }\n                    })]\n                  ) : '', column.filterable ? h(\n                    'span',\n                    {\n                      'class': 'el-table__column-filter-trigger',\n                      on: {\n                        'click': function click($event) {\n                          return _this.handleFilterClick($event, column);\n                        }\n                      }\n                    },\n                    [h('i', { 'class': ['el-icon-arrow-down', column.filterOpened ? 'el-icon-arrow-up' : ''] })]\n                  ) : '']\n                )]\n              );\n            }), _this.hasGutter ? h('th', { 'class': 'gutter' }) : '']\n          );\n        })]\n      )]\n    );\n  },\n\n\n  props: {\n    fixed: String,\n    store: {\n      required: true\n    },\n    border: Boolean,\n    defaultSort: {\n      type: Object,\n      default: function _default() {\n        return {\n          prop: '',\n          order: ''\n        };\n      }\n    }\n  },\n\n  components: {\n    ElCheckbox: checkbox_default.a\n  },\n\n  computed: table_header_extends({\n    table: function table() {\n      return this.$parent;\n    },\n    hasGutter: function hasGutter() {\n      return !this.fixed && this.tableLayout.gutterWidth;\n    }\n  }, mapStates({\n    columns: 'columns',\n    isAllSelected: 'isAllSelected',\n    leftFixedLeafCount: 'fixedLeafColumnsLength',\n    rightFixedLeafCount: 'rightFixedLeafColumnsLength',\n    columnsCount: function columnsCount(states) {\n      return states.columns.length;\n    },\n    leftFixedCount: function leftFixedCount(states) {\n      return states.fixedColumns.length;\n    },\n    rightFixedCount: function rightFixedCount(states) {\n      return states.rightFixedColumns.length;\n    }\n  })),\n\n  created: function created() {\n    this.filterPanels = {};\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    // nextTick 是有必要的 https://github.com/ElemeFE/element/pull/11311\n    this.$nextTick(function () {\n      var _defaultSort = _this2.defaultSort,\n          prop = _defaultSort.prop,\n          order = _defaultSort.order;\n\n      var init = true;\n      _this2.store.commit('sort', { prop: prop, order: order, init: init });\n    });\n  },\n  beforeDestroy: function beforeDestroy() {\n    var panels = this.filterPanels;\n    for (var prop in panels) {\n      if (panels.hasOwnProperty(prop) && panels[prop]) {\n        panels[prop].$destroy(true);\n      }\n    }\n  },\n\n\n  methods: {\n    isCellHidden: function isCellHidden(index, columns) {\n      var start = 0;\n      for (var i = 0; i < index; i++) {\n        start += columns[i].colSpan;\n      }\n      var after = start + columns[index].colSpan - 1;\n      if (this.fixed === true || this.fixed === 'left') {\n        return after >= this.leftFixedLeafCount;\n      } else if (this.fixed === 'right') {\n        return start < this.columnsCount - this.rightFixedLeafCount;\n      } else {\n        return after < this.leftFixedLeafCount || start >= this.columnsCount - this.rightFixedLeafCount;\n      }\n    },\n    getHeaderRowStyle: function getHeaderRowStyle(rowIndex) {\n      var headerRowStyle = this.table.headerRowStyle;\n      if (typeof headerRowStyle === 'function') {\n        return headerRowStyle.call(null, { rowIndex: rowIndex });\n      }\n      return headerRowStyle;\n    },\n    getHeaderRowClass: function getHeaderRowClass(rowIndex) {\n      var classes = [];\n\n      var headerRowClassName = this.table.headerRowClassName;\n      if (typeof headerRowClassName === 'string') {\n        classes.push(headerRowClassName);\n      } else if (typeof headerRowClassName === 'function') {\n        classes.push(headerRowClassName.call(null, { rowIndex: rowIndex }));\n      }\n\n      return classes.join(' ');\n    },\n    getHeaderCellStyle: function getHeaderCellStyle(rowIndex, columnIndex, row, column) {\n      var headerCellStyle = this.table.headerCellStyle;\n      if (typeof headerCellStyle === 'function') {\n        return headerCellStyle.call(null, {\n          rowIndex: rowIndex,\n          columnIndex: columnIndex,\n          row: row,\n          column: column\n        });\n      }\n      return headerCellStyle;\n    },\n    getHeaderCellClass: function getHeaderCellClass(rowIndex, columnIndex, row, column) {\n      var classes = [column.id, column.order, column.headerAlign, column.className, column.labelClassName];\n\n      if (rowIndex === 0 && this.isCellHidden(columnIndex, row)) {\n        classes.push('is-hidden');\n      }\n\n      if (!column.children) {\n        classes.push('is-leaf');\n      }\n\n      if (column.sortable) {\n        classes.push('is-sortable');\n      }\n\n      var headerCellClassName = this.table.headerCellClassName;\n      if (typeof headerCellClassName === 'string') {\n        classes.push(headerCellClassName);\n      } else if (typeof headerCellClassName === 'function') {\n        classes.push(headerCellClassName.call(null, {\n          rowIndex: rowIndex,\n          columnIndex: columnIndex,\n          row: row,\n          column: column\n        }));\n      }\n\n      return classes.join(' ');\n    },\n    toggleAllSelection: function toggleAllSelection(event) {\n      event.stopPropagation();\n      this.store.commit('toggleAllSelection');\n    },\n    handleFilterClick: function handleFilterClick(event, column) {\n      event.stopPropagation();\n      var target = event.target;\n      var cell = target.tagName === 'TH' ? target : target.parentNode;\n      if (Object(dom_[\"hasClass\"])(cell, 'noclick')) return;\n      cell = cell.querySelector('.el-table__column-filter-trigger') || cell;\n      var table = this.$parent;\n\n      var filterPanel = this.filterPanels[column.id];\n\n      if (filterPanel && column.filterOpened) {\n        filterPanel.showPopper = false;\n        return;\n      }\n\n      if (!filterPanel) {\n        filterPanel = new external_vue_default.a(filter_panel);\n        this.filterPanels[column.id] = filterPanel;\n        if (column.filterPlacement) {\n          filterPanel.placement = column.filterPlacement;\n        }\n        filterPanel.table = table;\n        filterPanel.cell = cell;\n        filterPanel.column = column;\n        !this.$isServer && filterPanel.$mount(document.createElement('div'));\n      }\n\n      setTimeout(function () {\n        filterPanel.showPopper = true;\n      }, 16);\n    },\n    handleHeaderClick: function handleHeaderClick(event, column) {\n      if (!column.filters && column.sortable) {\n        this.handleSortClick(event, column);\n      } else if (column.filterable && !column.sortable) {\n        this.handleFilterClick(event, column);\n      }\n\n      this.$parent.$emit('header-click', column, event);\n    },\n    handleHeaderContextMenu: function handleHeaderContextMenu(event, column) {\n      this.$parent.$emit('header-contextmenu', column, event);\n    },\n    handleMouseDown: function handleMouseDown(event, column) {\n      var _this3 = this;\n\n      if (this.$isServer) return;\n      if (column.children && column.children.length > 0) return;\n      /* istanbul ignore if */\n      if (this.draggingColumn && this.border) {\n        this.dragging = true;\n\n        this.$parent.resizeProxyVisible = true;\n\n        var table = this.$parent;\n        var tableEl = table.$el;\n        var tableLeft = tableEl.getBoundingClientRect().left;\n        var columnEl = this.$el.querySelector('th.' + column.id);\n        var columnRect = columnEl.getBoundingClientRect();\n        var minLeft = columnRect.left - tableLeft + 30;\n\n        Object(dom_[\"addClass\"])(columnEl, 'noclick');\n\n        this.dragState = {\n          startMouseLeft: event.clientX,\n          startLeft: columnRect.right - tableLeft,\n          startColumnLeft: columnRect.left - tableLeft,\n          tableLeft: tableLeft\n        };\n\n        var resizeProxy = table.$refs.resizeProxy;\n        resizeProxy.style.left = this.dragState.startLeft + 'px';\n\n        document.onselectstart = function () {\n          return false;\n        };\n        document.ondragstart = function () {\n          return false;\n        };\n\n        var handleMouseMove = function handleMouseMove(event) {\n          var deltaLeft = event.clientX - _this3.dragState.startMouseLeft;\n          var proxyLeft = _this3.dragState.startLeft + deltaLeft;\n\n          resizeProxy.style.left = Math.max(minLeft, proxyLeft) + 'px';\n        };\n\n        var handleMouseUp = function handleMouseUp() {\n          if (_this3.dragging) {\n            var _dragState = _this3.dragState,\n                startColumnLeft = _dragState.startColumnLeft,\n                startLeft = _dragState.startLeft;\n\n            var finalLeft = parseInt(resizeProxy.style.left, 10);\n            var columnWidth = finalLeft - startColumnLeft;\n            column.width = column.realWidth = columnWidth;\n            table.$emit('header-dragend', column.width, startLeft - startColumnLeft, column, event);\n\n            _this3.store.scheduleLayout();\n\n            document.body.style.cursor = '';\n            _this3.dragging = false;\n            _this3.draggingColumn = null;\n            _this3.dragState = {};\n\n            table.resizeProxyVisible = false;\n          }\n\n          document.removeEventListener('mousemove', handleMouseMove);\n          document.removeEventListener('mouseup', handleMouseUp);\n          document.onselectstart = null;\n          document.ondragstart = null;\n\n          setTimeout(function () {\n            Object(dom_[\"removeClass\"])(columnEl, 'noclick');\n          }, 0);\n        };\n\n        document.addEventListener('mousemove', handleMouseMove);\n        document.addEventListener('mouseup', handleMouseUp);\n      }\n    },\n    handleMouseMove: function handleMouseMove(event, column) {\n      if (column.children && column.children.length > 0) return;\n      var target = event.target;\n      while (target && target.tagName !== 'TH') {\n        target = target.parentNode;\n      }\n\n      if (!column || !column.resizable) return;\n\n      if (!this.dragging && this.border) {\n        var rect = target.getBoundingClientRect();\n\n        var bodyStyle = document.body.style;\n        if (rect.width > 12 && rect.right - event.pageX < 8) {\n          bodyStyle.cursor = 'col-resize';\n          if (Object(dom_[\"hasClass\"])(target, 'is-sortable')) {\n            target.style.cursor = 'col-resize';\n          }\n          this.draggingColumn = column;\n        } else if (!this.dragging) {\n          bodyStyle.cursor = '';\n          if (Object(dom_[\"hasClass\"])(target, 'is-sortable')) {\n            target.style.cursor = 'pointer';\n          }\n          this.draggingColumn = null;\n        }\n      }\n    },\n    handleMouseOut: function handleMouseOut() {\n      if (this.$isServer) return;\n      document.body.style.cursor = '';\n    },\n    toggleOrder: function toggleOrder(_ref) {\n      var order = _ref.order,\n          sortOrders = _ref.sortOrders;\n\n      if (order === '') return sortOrders[0];\n      var index = sortOrders.indexOf(order || null);\n      return sortOrders[index > sortOrders.length - 2 ? 0 : index + 1];\n    },\n    handleSortClick: function handleSortClick(event, column, givenOrder) {\n      event.stopPropagation();\n      var order = column.order === givenOrder ? null : givenOrder || this.toggleOrder(column);\n\n      var target = event.target;\n      while (target && target.tagName !== 'TH') {\n        target = target.parentNode;\n      }\n\n      if (target && target.tagName === 'TH') {\n        if (Object(dom_[\"hasClass\"])(target, 'noclick')) {\n          Object(dom_[\"removeClass\"])(target, 'noclick');\n          return;\n        }\n      }\n\n      if (!column.sortable) return;\n\n      var states = this.store.states;\n      var sortProp = states.sortProp;\n      var sortOrder = void 0;\n      var sortingColumn = states.sortingColumn;\n\n      if (sortingColumn !== column || sortingColumn === column && sortingColumn.order === null) {\n        if (sortingColumn) {\n          sortingColumn.order = null;\n        }\n        states.sortingColumn = column;\n        sortProp = column.property;\n      }\n\n      if (!order) {\n        sortOrder = column.order = null;\n      } else {\n        sortOrder = column.order = order;\n      }\n\n      states.sortProp = sortProp;\n      states.sortOrder = sortOrder;\n\n      this.store.commit('changeSortCondition');\n    }\n  },\n\n  data: function data() {\n    return {\n      draggingColumn: null,\n      dragging: false,\n      dragState: {}\n    };\n  }\n});\n// CONCATENATED MODULE: ./packages/table/src/table-footer.js\nvar table_footer_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n\n\n\n/* harmony default export */ var table_footer = ({\n  name: 'ElTableFooter',\n\n  mixins: [layout_observer],\n\n  render: function render(h) {\n    var _this = this;\n\n    var sums = [];\n    if (this.summaryMethod) {\n      sums = this.summaryMethod({ columns: this.columns, data: this.store.states.data });\n    } else {\n      this.columns.forEach(function (column, index) {\n        if (index === 0) {\n          sums[index] = _this.sumText;\n          return;\n        }\n        var values = _this.store.states.data.map(function (item) {\n          return Number(item[column.property]);\n        });\n        var precisions = [];\n        var notNumber = true;\n        values.forEach(function (value) {\n          if (!isNaN(value)) {\n            notNumber = false;\n            var decimal = ('' + value).split('.')[1];\n            precisions.push(decimal ? decimal.length : 0);\n          }\n        });\n        var precision = Math.max.apply(null, precisions);\n        if (!notNumber) {\n          sums[index] = values.reduce(function (prev, curr) {\n            var value = Number(curr);\n            if (!isNaN(value)) {\n              return parseFloat((prev + curr).toFixed(Math.min(precision, 20)));\n            } else {\n              return prev;\n            }\n          }, 0);\n        } else {\n          sums[index] = '';\n        }\n      });\n    }\n\n    return h(\n      'table',\n      {\n        'class': 'el-table__footer',\n        attrs: { cellspacing: '0',\n          cellpadding: '0',\n          border: '0' }\n      },\n      [h('colgroup', [this.columns.map(function (column) {\n        return h('col', {\n          attrs: { name: column.id },\n          key: column.id });\n      }), this.hasGutter ? h('col', {\n        attrs: { name: 'gutter' }\n      }) : '']), h(\n        'tbody',\n        { 'class': [{ 'has-gutter': this.hasGutter }] },\n        [h('tr', [this.columns.map(function (column, cellIndex) {\n          return h(\n            'td',\n            {\n              key: cellIndex,\n              attrs: { colspan: column.colSpan,\n                rowspan: column.rowSpan\n              },\n              'class': _this.getRowClasses(column, cellIndex) },\n            [h(\n              'div',\n              { 'class': ['cell', column.labelClassName] },\n              [sums[cellIndex]]\n            )]\n          );\n        }), this.hasGutter ? h('th', { 'class': 'gutter' }) : ''])]\n      )]\n    );\n  },\n\n\n  props: {\n    fixed: String,\n    store: {\n      required: true\n    },\n    summaryMethod: Function,\n    sumText: String,\n    border: Boolean,\n    defaultSort: {\n      type: Object,\n      default: function _default() {\n        return {\n          prop: '',\n          order: ''\n        };\n      }\n    }\n  },\n\n  computed: table_footer_extends({\n    table: function table() {\n      return this.$parent;\n    },\n    hasGutter: function hasGutter() {\n      return !this.fixed && this.tableLayout.gutterWidth;\n    }\n  }, mapStates({\n    columns: 'columns',\n    isAllSelected: 'isAllSelected',\n    leftFixedLeafCount: 'fixedLeafColumnsLength',\n    rightFixedLeafCount: 'rightFixedLeafColumnsLength',\n    columnsCount: function columnsCount(states) {\n      return states.columns.length;\n    },\n    leftFixedCount: function leftFixedCount(states) {\n      return states.fixedColumns.length;\n    },\n    rightFixedCount: function rightFixedCount(states) {\n      return states.rightFixedColumns.length;\n    }\n  })),\n\n  methods: {\n    isCellHidden: function isCellHidden(index, columns, column) {\n      if (this.fixed === true || this.fixed === 'left') {\n        return index >= this.leftFixedLeafCount;\n      } else if (this.fixed === 'right') {\n        var before = 0;\n        for (var i = 0; i < index; i++) {\n          before += columns[i].colSpan;\n        }\n        return before < this.columnsCount - this.rightFixedLeafCount;\n      } else if (!this.fixed && column.fixed) {\n        // hide cell when footer instance is not fixed and column is fixed\n        return true;\n      } else {\n        return index < this.leftFixedCount || index >= this.columnsCount - this.rightFixedCount;\n      }\n    },\n    getRowClasses: function getRowClasses(column, cellIndex) {\n      var classes = [column.id, column.align, column.labelClassName];\n      if (column.className) {\n        classes.push(column.className);\n      }\n      if (this.isCellHidden(cellIndex, this.columns, column)) {\n        classes.push('is-hidden');\n      }\n      if (!column.children) {\n        classes.push('is-leaf');\n      }\n      return classes;\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./packages/table/src/table.vue?vue&type=script&lang=js&\nvar tablevue_type_script_lang_js_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar tableIdSeed = 1;\n\n/* harmony default export */ var tablevue_type_script_lang_js_ = ({\n  name: 'ElTable',\n\n  mixins: [locale_default.a, migrating_default.a],\n\n  directives: {\n    Mousewheel: directives_mousewheel\n  },\n\n  props: {\n    data: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n\n    size: String,\n\n    width: [String, Number],\n\n    height: [String, Number],\n\n    maxHeight: [String, Number],\n\n    fit: {\n      type: Boolean,\n      default: true\n    },\n\n    stripe: Boolean,\n\n    border: Boolean,\n\n    rowKey: [String, Function],\n\n    context: {},\n\n    showHeader: {\n      type: Boolean,\n      default: true\n    },\n\n    showSummary: Boolean,\n\n    sumText: String,\n\n    summaryMethod: Function,\n\n    rowClassName: [String, Function],\n\n    rowStyle: [Object, Function],\n\n    cellClassName: [String, Function],\n\n    cellStyle: [Object, Function],\n\n    headerRowClassName: [String, Function],\n\n    headerRowStyle: [Object, Function],\n\n    headerCellClassName: [String, Function],\n\n    headerCellStyle: [Object, Function],\n\n    highlightCurrentRow: Boolean,\n\n    currentRowKey: [String, Number],\n\n    emptyText: String,\n\n    expandRowKeys: Array,\n\n    defaultExpandAll: Boolean,\n\n    defaultSort: Object,\n\n    tooltipEffect: String,\n\n    spanMethod: Function,\n\n    selectOnIndeterminate: {\n      type: Boolean,\n      default: true\n    },\n\n    indent: {\n      type: Number,\n      default: 16\n    },\n\n    treeProps: {\n      type: Object,\n      default: function _default() {\n        return {\n          hasChildren: 'hasChildren',\n          children: 'children'\n        };\n      }\n    },\n\n    lazy: Boolean,\n\n    load: Function\n  },\n\n  components: {\n    TableHeader: table_header,\n    TableFooter: table_footer,\n    TableBody: table_body,\n    ElCheckbox: checkbox_default.a\n  },\n\n  methods: {\n    getMigratingConfig: function getMigratingConfig() {\n      return {\n        events: {\n          expand: 'expand is renamed to expand-change'\n        }\n      };\n    },\n    setCurrentRow: function setCurrentRow(row) {\n      this.store.commit('setCurrentRow', row);\n    },\n    toggleRowSelection: function toggleRowSelection(row, selected) {\n      this.store.toggleRowSelection(row, selected, false);\n      this.store.updateAllSelected();\n    },\n    toggleRowExpansion: function toggleRowExpansion(row, expanded) {\n      this.store.toggleRowExpansionAdapter(row, expanded);\n    },\n    clearSelection: function clearSelection() {\n      this.store.clearSelection();\n    },\n    clearFilter: function clearFilter(columnKeys) {\n      this.store.clearFilter(columnKeys);\n    },\n    clearSort: function clearSort() {\n      this.store.clearSort();\n    },\n    handleMouseLeave: function handleMouseLeave() {\n      this.store.commit('setHoverRow', null);\n      if (this.hoverState) this.hoverState = null;\n    },\n    updateScrollY: function updateScrollY() {\n      var changed = this.layout.updateScrollY();\n      if (changed) {\n        this.layout.notifyObservers('scrollable');\n        this.layout.updateColumnsWidth();\n      }\n    },\n    handleFixedMousewheel: function handleFixedMousewheel(event, data) {\n      var bodyWrapper = this.bodyWrapper;\n      if (Math.abs(data.spinY) > 0) {\n        var currentScrollTop = bodyWrapper.scrollTop;\n        if (data.pixelY < 0 && currentScrollTop !== 0) {\n          event.preventDefault();\n        }\n        if (data.pixelY > 0 && bodyWrapper.scrollHeight - bodyWrapper.clientHeight > currentScrollTop) {\n          event.preventDefault();\n        }\n        bodyWrapper.scrollTop += Math.ceil(data.pixelY / 5);\n      } else {\n        bodyWrapper.scrollLeft += Math.ceil(data.pixelX / 5);\n      }\n    },\n    handleHeaderFooterMousewheel: function handleHeaderFooterMousewheel(event, data) {\n      var pixelX = data.pixelX,\n          pixelY = data.pixelY;\n\n      if (Math.abs(pixelX) >= Math.abs(pixelY)) {\n        this.bodyWrapper.scrollLeft += data.pixelX / 5;\n      }\n    },\n\n\n    // TODO 使用 CSS transform\n    syncPostion: Object(external_throttle_debounce_[\"throttle\"])(20, function () {\n      var _bodyWrapper = this.bodyWrapper,\n          scrollLeft = _bodyWrapper.scrollLeft,\n          scrollTop = _bodyWrapper.scrollTop,\n          offsetWidth = _bodyWrapper.offsetWidth,\n          scrollWidth = _bodyWrapper.scrollWidth;\n      var _$refs = this.$refs,\n          headerWrapper = _$refs.headerWrapper,\n          footerWrapper = _$refs.footerWrapper,\n          fixedBodyWrapper = _$refs.fixedBodyWrapper,\n          rightFixedBodyWrapper = _$refs.rightFixedBodyWrapper;\n\n      if (headerWrapper) headerWrapper.scrollLeft = scrollLeft;\n      if (footerWrapper) footerWrapper.scrollLeft = scrollLeft;\n      if (fixedBodyWrapper) fixedBodyWrapper.scrollTop = scrollTop;\n      if (rightFixedBodyWrapper) rightFixedBodyWrapper.scrollTop = scrollTop;\n      var maxScrollLeftPosition = scrollWidth - offsetWidth - 1;\n      if (scrollLeft >= maxScrollLeftPosition) {\n        this.scrollPosition = 'right';\n      } else if (scrollLeft === 0) {\n        this.scrollPosition = 'left';\n      } else {\n        this.scrollPosition = 'middle';\n      }\n    }),\n\n    bindEvents: function bindEvents() {\n      this.bodyWrapper.addEventListener('scroll', this.syncPostion, { passive: true });\n      if (this.fit) {\n        Object(resize_event_[\"addResizeListener\"])(this.$el, this.resizeListener);\n      }\n    },\n    unbindEvents: function unbindEvents() {\n      this.bodyWrapper.removeEventListener('scroll', this.syncPostion, { passive: true });\n      if (this.fit) {\n        Object(resize_event_[\"removeResizeListener\"])(this.$el, this.resizeListener);\n      }\n    },\n    resizeListener: function resizeListener() {\n      if (!this.$ready) return;\n      var shouldUpdateLayout = false;\n      var el = this.$el;\n      var _resizeState = this.resizeState,\n          oldWidth = _resizeState.width,\n          oldHeight = _resizeState.height;\n\n\n      var width = el.offsetWidth;\n      if (oldWidth !== width) {\n        shouldUpdateLayout = true;\n      }\n\n      var height = el.offsetHeight;\n      if ((this.height || this.shouldUpdateHeight) && oldHeight !== height) {\n        shouldUpdateLayout = true;\n      }\n\n      if (shouldUpdateLayout) {\n        this.resizeState.width = width;\n        this.resizeState.height = height;\n        this.doLayout();\n      }\n    },\n    doLayout: function doLayout() {\n      if (this.shouldUpdateHeight) {\n        this.layout.updateElsHeight();\n      }\n      this.layout.updateColumnsWidth();\n    },\n    sort: function sort(prop, order) {\n      this.store.commit('sort', { prop: prop, order: order });\n    },\n    toggleAllSelection: function toggleAllSelection() {\n      this.store.commit('toggleAllSelection');\n    }\n  },\n\n  computed: tablevue_type_script_lang_js_extends({\n    tableSize: function tableSize() {\n      return this.size || (this.$ELEMENT || {}).size;\n    },\n    bodyWrapper: function bodyWrapper() {\n      return this.$refs.bodyWrapper;\n    },\n    shouldUpdateHeight: function shouldUpdateHeight() {\n      return this.height || this.maxHeight || this.fixedColumns.length > 0 || this.rightFixedColumns.length > 0;\n    },\n    bodyWidth: function bodyWidth() {\n      var _layout = this.layout,\n          bodyWidth = _layout.bodyWidth,\n          scrollY = _layout.scrollY,\n          gutterWidth = _layout.gutterWidth;\n\n      return bodyWidth ? bodyWidth - (scrollY ? gutterWidth : 0) + 'px' : '';\n    },\n    bodyHeight: function bodyHeight() {\n      var _layout2 = this.layout,\n          _layout2$headerHeight = _layout2.headerHeight,\n          headerHeight = _layout2$headerHeight === undefined ? 0 : _layout2$headerHeight,\n          bodyHeight = _layout2.bodyHeight,\n          _layout2$footerHeight = _layout2.footerHeight,\n          footerHeight = _layout2$footerHeight === undefined ? 0 : _layout2$footerHeight;\n\n      if (this.height) {\n        return {\n          height: bodyHeight ? bodyHeight + 'px' : ''\n        };\n      } else if (this.maxHeight) {\n        var maxHeight = Object(util[\"j\" /* parseHeight */])(this.maxHeight);\n        if (typeof maxHeight === 'number') {\n          return {\n            'max-height': maxHeight - footerHeight - (this.showHeader ? headerHeight : 0) + 'px'\n          };\n        }\n      }\n      return {};\n    },\n    fixedBodyHeight: function fixedBodyHeight() {\n      if (this.height) {\n        return {\n          height: this.layout.fixedBodyHeight ? this.layout.fixedBodyHeight + 'px' : ''\n        };\n      } else if (this.maxHeight) {\n        var maxHeight = Object(util[\"j\" /* parseHeight */])(this.maxHeight);\n        if (typeof maxHeight === 'number') {\n          maxHeight = this.layout.scrollX ? maxHeight - this.layout.gutterWidth : maxHeight;\n          if (this.showHeader) {\n            maxHeight -= this.layout.headerHeight;\n          }\n          maxHeight -= this.layout.footerHeight;\n          return {\n            'max-height': maxHeight + 'px'\n          };\n        }\n      }\n      return {};\n    },\n    fixedHeight: function fixedHeight() {\n      if (this.maxHeight) {\n        if (this.showSummary) {\n          return {\n            bottom: 0\n          };\n        }\n        return {\n          bottom: this.layout.scrollX && this.data.length ? this.layout.gutterWidth + 'px' : ''\n        };\n      } else {\n        if (this.showSummary) {\n          return {\n            height: this.layout.tableHeight ? this.layout.tableHeight + 'px' : ''\n          };\n        }\n        return {\n          height: this.layout.viewportHeight ? this.layout.viewportHeight + 'px' : ''\n        };\n      }\n    },\n    emptyBlockStyle: function emptyBlockStyle() {\n      if (this.data && this.data.length) return null;\n      var height = '100%';\n      if (this.layout.appendHeight) {\n        height = 'calc(100% - ' + this.layout.appendHeight + 'px)';\n      }\n      return {\n        width: this.bodyWidth,\n        height: height\n      };\n    }\n  }, mapStates({\n    selection: 'selection',\n    columns: 'columns',\n    tableData: 'data',\n    fixedColumns: 'fixedColumns',\n    rightFixedColumns: 'rightFixedColumns'\n  })),\n\n  watch: {\n    height: {\n      immediate: true,\n      handler: function handler(value) {\n        this.layout.setHeight(value);\n      }\n    },\n\n    maxHeight: {\n      immediate: true,\n      handler: function handler(value) {\n        this.layout.setMaxHeight(value);\n      }\n    },\n\n    currentRowKey: {\n      immediate: true,\n      handler: function handler(value) {\n        if (!this.rowKey) return;\n        this.store.setCurrentRowKey(value);\n      }\n    },\n\n    data: {\n      immediate: true,\n      handler: function handler(value) {\n        this.store.commit('setData', value);\n      }\n    },\n\n    expandRowKeys: {\n      immediate: true,\n      handler: function handler(newVal) {\n        if (newVal) {\n          this.store.setExpandRowKeysAdapter(newVal);\n        }\n      }\n    }\n  },\n\n  created: function created() {\n    var _this = this;\n\n    this.tableId = 'el-table_' + tableIdSeed++;\n    this.debouncedUpdateLayout = Object(external_throttle_debounce_[\"debounce\"])(50, function () {\n      return _this.doLayout();\n    });\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    this.bindEvents();\n    this.store.updateColumns();\n    this.doLayout();\n\n    this.resizeState = {\n      width: this.$el.offsetWidth,\n      height: this.$el.offsetHeight\n    };\n\n    // init filters\n    this.store.states.columns.forEach(function (column) {\n      if (column.filteredValue && column.filteredValue.length) {\n        _this2.store.commit('filterChange', {\n          column: column,\n          values: column.filteredValue,\n          silent: true\n        });\n      }\n    });\n\n    this.$ready = true;\n  },\n  destroyed: function destroyed() {\n    this.unbindEvents();\n  },\n  data: function data() {\n    var _treeProps = this.treeProps,\n        _treeProps$hasChildre = _treeProps.hasChildren,\n        hasChildren = _treeProps$hasChildre === undefined ? 'hasChildren' : _treeProps$hasChildre,\n        _treeProps$children = _treeProps.children,\n        children = _treeProps$children === undefined ? 'children' : _treeProps$children;\n\n    this.store = createStore(this, {\n      rowKey: this.rowKey,\n      defaultExpandAll: this.defaultExpandAll,\n      selectOnIndeterminate: this.selectOnIndeterminate,\n      // TreeTable 的相关配置\n      indent: this.indent,\n      lazy: this.lazy,\n      lazyColumnIdentifier: hasChildren,\n      childrenColumnName: children\n    });\n    var layout = new table_layout({\n      store: this.store,\n      table: this,\n      fit: this.fit,\n      showHeader: this.showHeader\n    });\n    return {\n      layout: layout,\n      isHidden: false,\n      renderExpanded: null,\n      resizeProxyVisible: false,\n      resizeState: {\n        width: null,\n        height: null\n      },\n      // 是否拥有多级表头\n      isGroup: false,\n      scrollPosition: 'left'\n    };\n  }\n});\n// CONCATENATED MODULE: ./packages/table/src/table.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_tablevue_type_script_lang_js_ = (tablevue_type_script_lang_js_); \n// CONCATENATED MODULE: ./packages/table/src/table.vue\n\n\n\n\n\n/* normalize component */\n\nvar table_component = Object(componentNormalizer[\"a\" /* default */])(\n  src_tablevue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var table_api; }\ntable_component.options.__file = \"packages/table/src/table.vue\"\n/* harmony default export */ var src_table = (table_component.exports);\n// CONCATENATED MODULE: ./packages/table/index.js\n\n\n/* istanbul ignore next */\nsrc_table.install = function (Vue) {\n  Vue.component(src_table.name, src_table);\n};\n\n/* harmony default export */ var packages_table = __webpack_exports__[\"default\"] = (src_table);\n\n/***/ })\n/******/ ]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/element-ui/lib/table.js\n")}}]);